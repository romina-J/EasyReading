var classMapping = {'ContinuousChoiceButton':ContinuousChoiceButton,'AudioHighlighter':AudioHighlighter,'TwoStateButton':TwoStateButton,'AutoButton':AutoButton,'ContentReplacementSwitcher':ContentReplacementSwitcher,'Button':Button,'SingleChoiceButton':SingleChoiceButton,'TippyTooltip':TippyTooltip,'TabSlideOutUserInterface':TabSlideOutUserInterface,'SpinnerBusyAnimation':SpinnerBusyAnimation,};if(functionMapping){delete functionMapping;}  var functionMapping = {'colorize':colorize,'magnifyFont':magnifyFont,'shrinkFont':shrinkFont,'increaseLineHeight':increaseLineHeight,'decreaseLineHeight':decreaseLineHeight,'readability':readability,'easyReadingScreenRuler':easyReadingScreenRuler,};

let uiCollection = {
    "id": 22,
    "googleID": "",
    "email": "anonym8319283@easyreading.eu",
    "locale": "de",
    "type": 1,
    "ui_mode": "adaptable",
    "userLoaded": true,
    "userInterfaces": [
        {
            "source": {
                "id": "tab-slide-out",
                "name": "TabSlideOut",
                "description": "Simple tab slide out",
                "version": "1.0",
                "versionDescription": "Initial Version",
                "debugMode": false,
                "remoteAssetDirectory": "/components/user-interface/tab-slide-out/1.0/ui/images",
                "remoteBaseDirectory": "components/user-interface/tab-slide-out/1.0/",
                "implementationClass": "TabSlideOutUserInterface",
                "contentScripts": [
                    {
                        "id": "ui/jquery-ui.js",
                        "source": ""
                    },
                    {
                        "id": "ui/erTabSlideOut.js",
                        "source": ""
                    },
                    {
                        "id": "ui/tab-slide-out-ui.js",
                        "source": ""
                    },
                    {
                        "id": "ui/imagesloaded.pkgd.js",
                        "source": ""
                    },
                    {
                        "id": "ui/erMobileToolTips.js",
                        "source": "Ly8gZGlzbGF5cyB0b29sdGlwcyBvbiB0b3VjaC1ob2xkIGZvciBhbGwgZWxlbWVudHMgaW5zaWRlIGEgZ2l2ZW4gcGFyZW50LU9iamVjdCwgaWYgdGhleSBjb250YWluIGEgInRpdGxlIi1hdHRyaWJ1dGUNCi8vIHVzYWdlOiBzaW1wbHkgY2FsbCBjb25zdHJ1Y3RvciB3aXRoIGEgalF1ZXJ5IE9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50cyB0aGF0IG1pZ2h0IG5lZWQgdG9vbHRpcHMgZGlzcGxheWVkIGFzIGFuIGFyZ3VtZW50DQoNCmNsYXNzIGVyTW9iaWxlVG9vbFRpcHMgew0KICAgIGNvbnN0cnVjdG9yKHBhcmVudE9iaikgeyAvLyBwYXJlbnRPYmogaXMgYSBqUXVlcnktT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVsZW1lbnRzIHRoYXQgbWlnaHQgbmVlZCB0b29sdGlwcyBkaXNwbGF5ZWQNCiAgICAgICAgbGV0IHN0b3BCdWJibGVGb3JDbGljayA9IGZhbHNlOw0KDQogICAgICAgIGxldCBzaG93VG9vbFRpcCA9IGZ1bmN0aW9uKGV2dCwgZG9tT2JqKSB7DQogICAgICAgICAgICAvLyBmaXJzdCByZW1vdmUgb3RoZXIgdG9vbHRpcHMgdGhhdCBtaWdodCBiZSBhY3RpdmUNCiAgICAgICAgICAgICQoZG9jdW1lbnQpLmZpbmQoJy5lclRvb2xUaXAnKS5yZW1vdmUoKTsNCiAgICAgICAgICAgIC8vIHRoZW4gYWRkIHRoZSBuZXcgb25lDQogICAgICAgICAgICBsZXQgdG9vbFRpcFkgPSBNYXRoLnJvdW5kKGV2dC50b3VjaGVzWzBdLmNsaWVudFkgLSAkKCcjZXItdGFiLXNsaWRlLW91dCcpLm9mZnNldCgpLnRvcCkgLSAzMDsNCiAgICAgICAgICAgICQoZG9tT2JqKS5wYXJlbnQoKS5hcHBlbmQoJzxkaXYgY2xhc3M9ImVyVG9vbFRpcCIgc3R5bGU9IiB0b3A6ICcgKyB0b29sVGlwWSArICdweDsiPicgKyAkKGRvbU9iaikuYXR0cigndGl0bGUnKSArICc8L2Rpdj4nKTsNCiAgICAgICAgICAgIHN0b3BCdWJibGVGb3JDbGljayA9IHRydWU7DQogICAgICAgICAgICAkKGRvbU9iaikubmV4dCgpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2dCkgew0KICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsNCiAgICAgICAgICAgICAgICBpZiAoc3RvcEJ1YmJsZUZvckNsaWNrKSB7DQogICAgICAgICAgICAgICAgICAgIHN0b3BCdWJibGVGb3JDbGljayA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7ICANCiAgICAgICAgfTsNCiAgICAgICAgDQogICAgICAgIGxldCBvYmpBcnJheSA9IHBhcmVudE9iai5maW5kKCJbdGl0bGVdIik7DQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqQXJyYXkubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgIGxldCB0aW1lcjsNCiAgICAgICAgICAgIGxldCB0b3VjaER1cmF0aW9uID0gMTAwMDsNCiAgICAgICAgICAgIGxldCBjdXJPYmogPSBvYmpBcnJheVtpXTsNCiAgICAgICAgICAgICQoY3VyT2JqKS5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKGV2dCkgew0KICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93VG9vbFRpcChldnQsIGN1ck9iaik7DQogICAgICAgICAgICAgICAgICAgICAgICB9LCB0b3VjaER1cmF0aW9uKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgJChjdXJPYmopLm9uKCd0b3VjaGVuZCcsIGZ1bmN0aW9uKGV2dCkgew0KICAgICAgICAgICAgICAgIGlmICh0aW1lcikgY2xlYXJUaW1lb3V0KHRpbWVyKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgJChjdXJPYmopLm9uKCd0b3VjaG1vdmUnLCBmdW5jdGlvbihldnQpIHsNCiAgICAgICAgICAgICAgICBpZiAodGltZXIpIGNsZWFyVGltZW91dCh0aW1lcik7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICQoY3VyT2JqKS5vbignY2xpY2snLCBmdW5jdGlvbihldnQpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RvcEJ1YmJsZUZvckNsaWNrKSB7DQogICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsNCiAgICAgICAgICAgICAgICAgICAgc3RvcEJ1YmJsZUZvckNsaWNrID0gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZ0KSB7DQogICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKCcuZXJUb29sVGlwJykucmVtb3ZlKCk7DQogICAgICAgIH0pOw0KICAgIH0NCiAgICANCiAgICANCn0="
                    }
                ],
                "contentCSS": [
                    {
                        "id": "ui/jquery-ui.css",
                        "css": ""
                    },
                    {
                        "id": "ui/tab-slide-out-ui.css",
                        "css": "LnN3YWwyLWNvbnRhaW5lcnsNCiAgICB6LWluZGV4OiA5OTk5OTk5OTk5OTk5OTk5ICFpbXBvcnRhbnQ7DQp9DQoNCiNlci10YWItc2xpZGUtb3V0LWhhbmRsZSB7DQogICAgYmFja2dyb3VuZDogdXJsKCJodHRwczovL2xvY2FsaG9zdDo4MDgwL2NvbXBvbmVudHMvdXNlci1pbnRlcmZhY2UvdGFiLXNsaWRlLW91dC8xLjAvdWkvaW1hZ2VzL2xvZ29fdy5wbmciKSBuby1yZXBlYXQgY2VudGVyOw0KfQ0KDQoudGFiLXNsaWRlLW91dC1hbmltYXRlZHsNCiAgICBhbmltYXRpb246IHRhYi1zbGlkZS1vdXQtc2NhbGUtZWFzZUluQm91bmNlIDAuN3MgcmV2ZXJzZSBlYXNlLWluOw0KfQ0KDQoNCkBrZXlmcmFtZXMgdGFiLXNsaWRlLW91dC1zY2FsZS1lYXNlSW5Cb3VuY2Ugew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTsNCiAgICB9DQoNCiAgICA0JSB7DQogICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45OCk7DQogICAgfQ0KDQogICAgOCUgew0KICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTkpOw0KICAgIH0NCg0KICAgIDE4JSB7DQogICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45NCk7DQogICAgfQ0KDQogICAgMjYlIHsNCiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjk4KTsNCiAgICB9DQoNCiAgICA0NiUgew0KICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuNzUpOw0KICAgIH0NCg0KICAgIDY0JSB7DQogICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45OCk7DQogICAgfQ0KDQogICAgNzYlIHsNCiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjQ0KTsNCiAgICB9DQoNCiAgICA4OCUgew0KICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMTEpOw0KICAgIH0NCg0KICAgIDEwMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDApOw0KICAgIH0NCg0KfQ0KDQojZXItdGFiLXNsaWRlLW91dC1ncmlkLWNvbnRhaW5lciBidXR0b24sICNlci10YWItc2xpZGUtb3V0LXNwZWNpYWwtYnV0dG9uLWNvbnRhaW5lciBidXR0b24gew0KICAgYmFja2dyb3VuZC1jb2xvcjogI2ViZWJlYiAhaW1wb3J0YW50Ow0KICAgYm9yZGVyOiAzcHggb3V0c2V0ICNmNWY1ZjUgIWltcG9ydGFudDsNCiAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsNCiAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDsNCn0NCg0KI2VyLXRhYi1zbGlkZS1vdXQtc3BlY2lhbC1idXR0b24tY29udGFpbmVyIHsNCiAgICBtYXJnaW4tdG9wOiAzcHg7DQogICAgcGFkZGluZy10b3A6IDNweDsNCiAgICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7DQp9DQoNCiNlci10YWItc2xpZGUtb3V0LWdyaWQtY29udGFpbmVyIGJ1dHRvbi5lYXN5LXJlYWRpbmctc2luZ2xlLWNob2ljZS1hY3RpdmUsIA0KI2VyLXRhYi1zbGlkZS1vdXQtZ3JpZC1jb250YWluZXIgYnV0dG9uLmVyLWJ1dHRvbi1hY3RpdmUsDQojZXItdGFiLXNsaWRlLW91dC1ncmlkLWNvbnRhaW5lciBidXR0b24uZWFzeS1yZWFkaW5nLWNvbnRpbnVvdXMtY2hvaWNlLWFjdGl2ZSB7DQogICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNjc5ICFpbXBvcnRhbnQ7DQp9DQoNCiNlci10YWItc2xpZGUtb3V0LWdyaWQtY29udGFpbmVyIGJ1dHRvbjphY3RpdmUgew0KICAgIGJvcmRlci1zdHlsZTogZ3Jvb3ZlICFpbXBvcnRhbnQ7DQp9DQoNCiNlci10YWItc2xpZGUtb3V0LWdyaWQtY29udGFpbmVyIGJ1dHRvbjpob3ZlciB7DQogIC8qIHRoaXMgcmVtb3ZlcyB0aGUgc3RhdGUgZnJvbSB0d28gc3RhdGUgYnV0dG9ucyAgYmFja2dyb3VuZC1jb2xvcjogI2RlZGVkZSAhaW1wb3J0YW50OyAqLw0KfQ0KDQojZXItdGFiLXNsaWRlLW91dC1ncmlkLWNvbnRhaW5lciBidXR0b246Zm9jdXMsIA0KI2VyLXRhYi1zbGlkZS1vdXQtaGFuZGxlOmZvY3VzLCANCiNlci10YWItc2xpZGUtb3V0LXNwZWNpYWwtYnV0dG9uLWNvbnRhaW5lciBidXR0b246Zm9jdXMgew0KICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCA3cHggYmx1ZSAhaW1wb3J0YW50Ow0KfQ0KDQojZXItdGFiLXNsaWRlLW91dC1oYW5kbGUgew0KICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsNCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94ICFpbXBvcnRhbnQ7DQp9"
                    },
                    {
                        "id": "ui/erTabSlideOut.css",
                        "css": "I2VyLXRhYi1zbGlkZS1vdXQtaGFuZGxlIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgcGFkZGluZzogN3B4Ow0KICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrOw0KICAgIC13ZWJraXQtYmFja2dyb3VuZC1zaXplOiBjb250YWluOw0KICAgIC1tb3otYmFja2dyb3VuZC1zaXplOiBjb250YWluOw0KICAgIC1vLWJhY2tncm91bmQtc2l6ZTogY29udGFpbjsNCiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47DQogICAgYmFja2dyb3VuZC1zaXplOiAxMDAlICFpbXBvcnRhbnQ7ICAgIA0KfQ0KDQojZXItdGFiLXNsaWRlLW91dC1ncmlkLWNvbnRhaW5lciB7DQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gYXV0bzsNCn0NCg0KI2VyLXRhYi1zbGlkZS1vdXQtc3BlY2lhbC1idXR0b24tY29udGFpbmVyIHsNCiAgICBkaXNwbGF5OiBncmlkOw0KICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogODBweCA4MHB4OyAgIA0KfQ0KDQojZXItdGFiLXNsaWRlLW91dCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgcG9zaXRpb246IGZpeGVkOw0KfQ0KDQouZXItdGFiLXNsaWRlLW91dC1ncmlkLWhvcml6b250YWwgew0KICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsNCiAgICBtaW4td2lkdGg6IDk4cHggIWltcG9ydGFudDsNCiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDsNCiAgICBmbG9hdDogbGVmdDsNCn0="
                    },
                    {
                        "id": "ui/erMobileToolTips.css",
                        "css": "LmVyVG9vbFRpcCB7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHotaW5kZXg6IDEwMDsNCiAgICBjb2xvcjogYmxhY2s7DQogICAgYmFja2dyb3VuZC1jb2xvcjogc2lsdmVyOw0KICAgIGJvcmRlcjogMnB4IHNvbGlkIGRhcmtibHVlOw0KICAgIHBhZGRpbmc6IDJweDsNCn0="
                    }
                ]
            },
            "configuration": {
                "tabPositioning": "right",
                "buttonSize": 80,
                "remoteAssetDirectory": "https://localhost:8080//components/user-interface/tab-slide-out/1.0/ui/images"
            },
            "tools": [
                {
                    "function": {
                        "source": {
                            "id": "tts",
                            "engine": {
                                "id": "aws-polly-tts",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "AWS: Polly",
                            "description": "Converts text to Speech",
                            "inputTypes": [
                                {
                                    "inputType": "Paragraph",
                                    "name": "Input paragraph",
                                    "description": "Paragraph to convert to audio"
                                },
                                {
                                    "inputType": "Word",
                                    "name": "Input word",
                                    "description": "Word to convert to audio"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "AudioType",
                                    "name": "Output",
                                    "description": "Image word"
                                }
                            ],
                            "defaultIcon": "assets/text-to-speech.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/aws-polly-tts/1.0/assets/text-to-speech.png",
                            "remoteBaseDirectory": "components/engines/aws-polly-tts/1.0/",
                            "type": "RemoteFunction",
                            "entryPoint": "convertTextToSpeech"
                        },
                        "configuration": {
                            "language": "language_of_website",
                            "gender": "female"
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "continuous-choice-button",
                            "name": "Continuous Choice Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/continuous-choice-button/1.0/",
                            "implementationClass": "ContinuousChoiceButton",
                            "contentScripts": [
                                {
                                    "id": "widget/continuous-choice-button.js",
                                    "source": "Y2xhc3MgQ29udGludW91c0Nob2ljZUJ1dHRvbiBleHRlbmRzIFdpZGdldEJhc2Ugew0KDQogICAgY29uc3RydWN0b3IoZnVuY3Rpb25JbmZvLCB1c2VySW50ZXJmYWNlLCB0YXJnZXRJRCwgY29uZmlndXJhdGlvbikgew0KICAgICAgICBzdXBlcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsIHRhcmdldElELCBjb25maWd1cmF0aW9uKTsNCiAgICAgICAgdGhpcy5jb250aW51ZXNUb0NyZWF0ZVJlcXVlc3RzID0gdHJ1ZTsNCiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsNCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IGZhbHNlOw0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2NvbnRpbnVvdXNfY2hvaWNlX2J1dHRvbl8nICsgdGhpcy53aWRnZXRJRDsNCiAgICAgICAgJCgiIyIgKyB0YXJnZXRJRCkuYXBwZW5kKCI8YnV0dG9uIGlkPSciICsgdGhpcy53aWRnZXRJRCArICInIGNsYXNzPSdlYXN5LXJlYWRpbmctY29udGludW91cy1jaG9pY2UgZWFzeS1yZWFkaW5nLWJ1dHRvbic+PGltZyBzcmM9JyIgKyBmdW5jdGlvbkluZm8uc291cmNlLmRlZmF1bHRJY29uVVJMICsgIicgdGl0bGU9JyIgKyBmdW5jdGlvbkluZm8uc291cmNlLm5hbWUgKyAiOiAiICsgZnVuY3Rpb25JbmZvLnNvdXJjZS5kZXNjcmlwdGlvbiArICInPiA8L2J1dHRvbj4iKTsNCg0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFByZXNlbnRhdGlvbkZpbmlzaExpc3RlbmVyKHRoaXMpOw0KDQogICAgICAgIHRoaXMuaHRtbEl0ZXJhdG9yID0gbnVsbDsNCiAgICAgICAgdGhpcy50ZXh0U2VsZWN0aW9uID0gbnVsbDsNCiAgICAgICAgdGhpcy5lbmFibGUoKTsNCg0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFdpZGdldEFjdGl2YXRlZExpc3RlbmVycyh0aGlzKTsNCg0KICAgIH0NCg0KDQogICAgZW5hYmxlKCkgew0KICAgICAgICAkKCIjIiArIHRoaXMud2lkZ2V0SUQpLm9uKCJjbGljayIsIHRoaXMsIHRoaXMuY29udGludW91c0Nob2ljZUJ1dHRvbkNsaWNrZWQpOw0KDQogICAgfQ0KDQogICAgZGlzYWJsZSgpIHsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5vZmYoImNsaWNrIiwgdGhpcywgdGhpcy5jb250aW51b3VzQ2hvaWNlQnV0dG9uQ2xpY2tlZCk7DQogICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIucmVtb3ZlV2lkZ2V0QWN0aXZhdGVkTGlzdGVuZXJzKHRoaXMpOw0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnJlbW92ZVByZXNlbnRhdGlvbkZpbmlzaExpc3RlbmVyKHRoaXMpOw0KDQoNCiAgICB9DQoNCiAgICBhY3RpdmF0ZVdpZGdldCgpew0KICAgICAgICBjb25zb2xlLmxvZygiY29udGludW91cyBDaG9pY2UgQnV0dG9uIEFjdGl2ZSIpOw0KICAgICAgICAkKCIjIiArIHRoaXMud2lkZ2V0SUQpLmFkZENsYXNzKCJlYXN5LXJlYWRpbmctY29udGludW91cy1jaG9pY2UtYWN0aXZlIik7DQoNCg0KICAgICAgICAvL09ubHkgY29uc2lkZXIgZmlyc3QgaW5wdXQgdHlwZSBhcyB2YWxpZCBvbmUNCiAgICAgICAgaWYodGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXMubGVuZ3RoID4gMCl7DQogICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZnVuY3Rpb25JbmZvLnNvdXJjZS5pbnB1dFR5cGVzWzBdLmlucHV0VHlwZSkgew0KICAgICAgICAgICAgICAgIGNhc2UgV29yZC5jbGFzc05hbWU6DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIuYWRkV29yZENsaWNrTGlzdGVuZXIodGhpcyx0aGlzLmdldFByZXNlbnRhdGlvbigpLmlzQ29tcGF0aWJsZVdpdGhPdGhlclByZXNlbnRhdGlvbnMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIFBhcmFncmFwaC5jbGFzc05hbWU6DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIuYWRkUGFyYWdyYXBoQ2xpY2tMaXN0ZW5lcih0aGlzLHRoaXMuZ2V0UHJlc2VudGF0aW9uKCkuaXNDb21wYXRpYmxlV2l0aE90aGVyUHJlc2VudGF0aW9ucyk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci53aWRnZXRBY3RpdmF0ZWQodGhpcyk7DQoNCiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlOw0KICAgIH0NCg0KICAgIGRlYWN0aXZhdGVXaWRnZXQobWFudWFsPXRydWUpew0KICAgICAgICBzdXBlci5kZWFjdGl2YXRlV2lkZ2V0KG1hbnVhbCk7DQoNCg0KICAgICAgICBjb25zb2xlLmxvZygiY29udGludW91cyBDaG9pY2UgQnV0dG9uIE5vdCBBY3RpdmUiKTsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5yZW1vdmVDbGFzcygiZWFzeS1yZWFkaW5nLWNvbnRpbnVvdXMtY2hvaWNlLWFjdGl2ZSIpOw0KDQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXNbaV0uaW5wdXRUeXBlKSB7DQogICAgICAgICAgICAgICAgY2FzZSBXb3JkLmNsYXNzTmFtZToNCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci5yZW1vdmVXb3JkQ2xpY2tMaXN0ZW5lcih0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSBQYXJhZ3JhcGguY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnJlbW92ZVBhcmFncmFwaENsaWNrTGlzdGVuZXIodGhpcyk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KICAgICAgICBpZih0aGlzLmh0bWxJdGVyYXRvcil7DQogICAgICAgICAgICB0aGlzLmh0bWxJdGVyYXRvci5ub3JtYWxpemVPbGRUZXh0Tm9kZXMoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7DQogICAgfQ0KDQogICAgY29udGludW91c0Nob2ljZUJ1dHRvbkNsaWNrZWQoZSkgew0KDQogICAgICAgIGlmKGUuZGF0YS5hY3RpdmUpew0KICAgICAgICAgICAgZS5kYXRhLmRlYWN0aXZhdGVXaWRnZXQodHJ1ZSk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgZS5kYXRhLmFjdGl2YXRlV2lkZ2V0KCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBvbldvcmRDbGljayh3b3JkLCBlKSB7DQogICAgICAgIGlmKHRoaXMucmVxdWVzdEluUHJvZ3Jlc3Mpew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlOw0KDQogICAgICAgIGVhc3lSZWFkaW5nLmJ1c3lBbmltYXRpb24uc3RhcnRBbmltYXRpb24oKTsNCg0KICAgICAgICBpZighdGhpcy5maWx0ZXJVc2VySW50ZXJmYWNlRWxlbWVudHMod29yZCkpew0KICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdCh0aGlzLCB3b3JkLCBlKTsNCiAgICAgICAgfQ0KDQogICAgfQ0KDQogICAgb25QYXJhZ3JhcGhDTGljayhwYXJhZ3JhcGgsIGUpIHsNCiAgICAgICAgaWYodGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyl7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IHRydWU7DQogICAgICAgIGVhc3lSZWFkaW5nLmJ1c3lBbmltYXRpb24uc3RhcnRBbmltYXRpb24oKTsNCg0KICAgICAgICBpZighdGhpcy5maWx0ZXJVc2VySW50ZXJmYWNlRWxlbWVudHMocGFyYWdyYXBoKSl7DQoNCiAgICAgICAgICAgIHRoaXMuaHRtbEl0ZXJhdG9yID0gbmV3IEhUTUxJdGVyYXRvcihwYXJhZ3JhcGguZWxlbWVudCk7DQoNCg0KICAgICAgICAgICAgbGV0IGN1cnJlbnRQYXJhZ3JhcGggPSB0aGlzLmh0bWxJdGVyYXRvci5nZXROZXh0RWxlbWVudHMoKTsNCiAgICAgICAgICAgIGlmKGN1cnJlbnRQYXJhZ3JhcGgpew0KICAgICAgICAgICAgICAgIHRoaXMudGV4dFNlbGVjdGlvbiA9ICBuZXcgVGV4dFNlbGVjdGlvbihjdXJyZW50UGFyYWdyYXBoLnRleHROb2Rlcyw1MDApOw0KICAgICAgICAgICAgICAgIGxldCBuZXh0UGFyYWdyYXBoID0gdGhpcy50ZXh0U2VsZWN0aW9uLmdldE5leHRQYXJhZ3JhcGgoKTsNCiAgICAgICAgICAgICAgICBpZihuZXh0UGFyYWdyYXBoKXsNCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdCh0aGlzLCBuZXh0UGFyYWdyYXBoLCBlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmaWx0ZXJVc2VySW50ZXJmYWNlRWxlbWVudHMoZWxlbWVudCl7DQogICAgICAgIHJldHVybiAkKGVsZW1lbnQpLnBhcmVudHMoJy5lYXN5LXJlYWRpbmctaW50ZXJmYWNlJykubGVuZ3RoOw0KICAgIH0NCg0KICAgIHByZXNlbnRhdGlvbkZpbmlzaGVkKHByZXNlbnRhdGlvbil7DQoNCiAgICAgICAgaWYoIXRoaXMuYWN0aXZlIHx8ICF0aGlzLnRleHRTZWxlY3Rpb24pew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgbGV0IG5leHRQYXJhZ3JhcGggPSB0aGlzLnRleHRTZWxlY3Rpb24uZ2V0TmV4dFBhcmFncmFwaCgpOw0KICAgICAgICBpZihuZXh0UGFyYWdyYXBoKXsNCiAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyLmNyZWF0ZVJlcXVlc3QodGhpcywgbmV4dFBhcmFncmFwaCwgbnVsbCwgdHJ1ZSk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgbGV0IG5leHRFbGVtZW50cyA9IHRoaXMuaHRtbEl0ZXJhdG9yLmdldE5leHRFbGVtZW50cygpOw0KICAgICAgICAgICAgaWYobmV4dEVsZW1lbnRzKXsNCiAgICAgICAgICAgICAgICB0aGlzLnRleHRTZWxlY3Rpb24gPSAgbmV3IFRleHRTZWxlY3Rpb24obmV4dEVsZW1lbnRzLnRleHROb2Rlcyw1MDApOw0KICAgICAgICAgICAgICAgIG5leHRQYXJhZ3JhcGggPSB0aGlzLnRleHRTZWxlY3Rpb24uZ2V0TmV4dFBhcmFncmFwaCgpOw0KICAgICAgICAgICAgICAgIGlmKG5leHRQYXJhZ3JhcGgpew0KICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWFuYWdlci5jcmVhdGVSZXF1ZXN0KHRoaXMsIG5leHRQYXJhZ3JhcGgsIG51bGwsIHRydWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghbmV4dFBhcmFncmFwaCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIG5leHQgcGFyYWdyYXBoIGZvdW5kISEnKTsNCiAgICAgICAgICAgIGNvbnRlbnRTY3JpcHRDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9CYWNrZ3JvdW5kU2NyaXB0KHsNCiAgICAgICAgICAgICAgICB0eXBlOiAiaGVscENvbXBsZXRlIiwNCiAgICAgICAgICAgICAgICB1aV9pOiB0aGlzLnVzZXJJbnRlcmZhY2UuaWQsDQogICAgICAgICAgICAgICAgdG9vbF9pOiB0aGlzLnRvb2xJZCwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICB9DQoNCiAgICByZXF1ZXN0RmluaXNoZWQoKXsNCiAgICAgICAgc3VwZXIucmVxdWVzdEZpbmlzaGVkKCk7DQogICAgICAgIGVhc3lSZWFkaW5nLmJ1c3lBbmltYXRpb24uc3RvcEFuaW1hdGlvbigpOw0KICAgICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7DQogICAgfQ0KDQogICAgcmVtb3ZlKCl7DQoNCg0KICAgICAgICBpZih0aGlzLmFjdGl2ZSl7DQogICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVXaWRnZXQoZmFsc2UpOw0KICAgICAgICB9DQogICAgICAgIHRoaXMuZGlzYWJsZSgpOw0KDQogICAgICAgICQoIiMiICsgdGhpcy53aWRnZXRJRCkucmVtb3ZlKCk7DQogICAgfQ0KfQ=="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/continuous-choice-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1jb250aW51b3VzLWNob2ljZT5pbWd7DQogICAgbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQp9DQoNCi5lYXN5LXJlYWRpbmctY29udGludW91cy1jaG9pY2UtYWN0aXZlew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmM2NzkgIWltcG9ydGFudDsNCn0NCg0KLmVhc3ktcmVhZGluZy1jb250aW51b3VzLWNob2ljZXsNCiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDsNCiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQp9DQoNCg=="
                                }
                            ]
                        }
                    },
                    "presentation": {
                        "source": {
                            "id": "audio-highlighter",
                            "name": "AudioHighlighter",
                            "description": "Plays audio and highlights current spoken words",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/presentation/audio-highlighter/1.0/",
                            "implementationClass": "AudioHighlighter",
                            "contentScripts": [
                                {
                                    "id": "presentation/audio-highlighter.js",
                                    "source": ""
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "presentation/audio-highlighter.css",
                                    "css": "bWFyay5oaWdobGlnaHQtd29yZHsNCiAgICBiYWNrZ3JvdW5kOiBvcmFuZ2U7DQogICAgY29sb3I6IGJsYWNrOw0KfQ0KDQpzcGFuLmhpZ2hsaWdodC1zZW50ZW5jZXsNCiAgICBiYWNrZ3JvdW5kOiAjZmZmODFmOw0KICAgIGNvbG9yOiBibGFjazsNCn0NCg0KLmhpZ2hsaWdodC1hdWRpb3sNCiAgICBiYWNrZ3JvdW5kOiAjZmZmODFmOw0KICAgIGNvbG9yOiBibGFjazsNCn0NCg0KLndvcmQtaGlnaGxpZ2h0ZXJ7DQoNCiAgICBwYWRkaW5nOiA0cHggIWltcG9ydGFudDsNCiAgICBib3JkZXItcmFkaXVzOiA0cHggIWltcG9ydGFudDsNCg0KfQ=="
                                }
                            ]
                        },
                        "configuration": {
                            "speed": "normal"
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "colorize",
                            "engine": {
                                "id": "colorize",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Colorize",
                            "description": "Colors a page according to your favorite color",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/colorize.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/colorize/1.0/assets/colorize.png",
                            "remoteBaseDirectory": "components/engines/colorize/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "colorize",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "colorize/1.0/js/colorize.js",
                                    "source": "DQpsZXQgZWFzeVJlYWRpbmdDb2xvcml6ZUVuYWJsZWQgPSBmYWxzZTsNCmZ1bmN0aW9uIGNvbG9yaXplKHJlcSwgY29uZmlnLHdpZGdldCkgew0KDQogICAgJCgiI2Vhc3ktcmVhZGluZy1jb2xvcml6ZS1zdHlsZSIpLnJlbW92ZSgpOw0KICAgICQoIjxzdHlsZSBpZD0nZWFzeS1yZWFkaW5nLWNvbG9yaXplLXN0eWxlJyB0eXBlPSd0ZXh0L2Nzcyc+IC5lYXN5UmVhZGVyQ29sb3JpemV7IGNvbG9yOiIrY29uZmlnLmZvbnRDb2xvcisiICFpbXBvcnRhbnQ7IGJhY2tncm91bmQtY29sb3I6Iitjb25maWcuYmFja2dyb3VuZENvbG9yKyIgIWltcG9ydGFudDt9IDwvc3R5bGU+IikuYXBwZW5kVG8oImhlYWQiKTsNCg0KICAgIGlmKGVhc3lSZWFkaW5nQ29sb3JpemVFbmFibGVkKXsNCiAgICAgICAgJCgiKiIpLnJlbW92ZUNsYXNzKCJlYXN5UmVhZGVyQ29sb3JpemUiKTsNCiAgICB9ZWxzZXsNCiAgICAgICAgJCgiKiIpLmVhY2goZnVuY3Rpb24gKCkgew0KDQogICAgICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCAmJiAhICQodGhpcykuaGFzQ2xhc3MoJ2Vhc3ktcmVhZGluZy1pbnRlcmZhY2UnKSl7DQoNCiAgICAgICAgICAgICAgICBpZighJCh0aGlzKS5pcygiaW1nIikpew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCJlYXN5UmVhZGVyQ29sb3JpemUiKTsNCiAgICAgICAgICAgICAgICB9DQoNCg0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KDQogICAgfQ0KDQogICAgZWFzeVJlYWRpbmdDb2xvcml6ZUVuYWJsZWQgPSAhZWFzeVJlYWRpbmdDb2xvcml6ZUVuYWJsZWQ7DQp9"
                                }
                            ],
                            "contentCSS": []
                        },
                        "configuration": {
                            "backgroundColor": "#000000",
                            "fontColor": "#FFFFFF"
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "two-state-button",
                            "name": "Two state button",
                            "description": "A simple two state button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/two-state-button/1.0/",
                            "implementationClass": "TwoStateButton",
                            "contentScripts": [
                                {
                                    "id": "widget/two-state-button.js",
                                    "source": "Y2xhc3MgVHdvU3RhdGVCdXR0b24gZXh0ZW5kcyBXaWRnZXRCYXNlew0KDQogICAgY29uc3RydWN0b3IoZnVuY3Rpb25JbmZvLCB1c2VySW50ZXJmYWNlLHRhcmdldElELCBjb25maWd1cmF0aW9uKXsNCiAgICAgICAgc3VwZXIoZnVuY3Rpb25JbmZvLHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsY29uZmlndXJhdGlvbik7DQoNCiAgICAgICAgY29uc29sZS5sb2codGhpcy53aWRnZXRJRCApOw0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLXR3by1zdGF0ZS1idXR0b24nPjxpbWcgc3JjPSciK2Z1bmN0aW9uSW5mby5zb3VyY2UuZGVmYXVsdEljb25VUkwrIicgdGl0bGU9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5uYW1lKyI6ICIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZXNjcmlwdGlvbisiJz4gPC9idXR0b24+Iik7DQogICAgICAgIHRoaXMuZW5hYmxlKCk7DQogICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOw0KICAgIH0NCg0KICAgIGVuYWJsZSgpew0KICAgICAgICAkKCIjIit0aGlzLndpZGdldElEKS5vbiggImNsaWNrIix0aGlzLCB0aGlzLmJ1dHRvbkNsaWNrZWQpOw0KDQogICAgfQ0KDQogICAgZGlzYWJsZSgpew0KICAgICAgICAkKCIjIit0aGlzLndpZGdldElEKS5vZmYoICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KDQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgZS5kYXRhLnByZXNzZWQgPSAhZS5kYXRhLnByZXNzZWQ7DQogICAgICAgICQoIiMiK2UuZGF0YS53aWRnZXRJRCkudG9nZ2xlQ2xhc3MoICJlci1idXR0b24tYWN0aXZlIiApOw0KICAgICAgICBsZXQgdm9pZElucHV0ID0gew0KICAgICAgICAgICAgdHlwZTogIlZvaWQiLA0KICAgICAgICB9Ow0KICAgICAgICByZXF1ZXN0TWFuYWdlci5jcmVhdGVSZXF1ZXN0KGUuZGF0YSwgdm9pZElucHV0LCBlKTsNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkucmVtb3ZlKCk7DQoNCg0KICAgIH0NCg0KICAgIHJlcXVlc3RGYWlsZWQocmVxLGNvbmZpZyl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZUNsYXNzKCAiZXItYnV0dG9uLWFjdGl2ZSIgKTsNCiAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7DQogICAgfQ0KfQ0K"
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/two-state-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy10d28tc3RhdGUtYnV0dG9uPmltZ3sNCiAgICBtYXgtd2lkdGg6IDEwMCU7DQp9DQoNCi5lYXN5LXJlYWRpbmctdHdvLXN0YXRlLWJ1dHRvbnsNCiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDsNCiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQp9DQo="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "content_replacement",
                            "engine": {
                                "id": "content_replacement",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Content",
                            "description": "Content Replacement",
                            "inputTypes": [
                                {
                                    "inputType": "URLType",
                                    "name": "Url",
                                    "description": "Url of the page to search for replacements"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "ContentReplacement",
                                    "name": "Content replacements",
                                    "description": "Content replacements"
                                }
                            ],
                            "defaultIcon": "assets/content_replacement.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/content_replacement/1.0/assets/content_replacement.png",
                            "remoteBaseDirectory": "components/engines/content_replacement/1.0/",
                            "type": "RemoteFunction",
                            "entryPoint": "contentReplacement"
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "auto-button",
                            "name": "Auto Button",
                            "description": "A button that can automatically trigger on pageload",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/auto-button/1.0/",
                            "implementationClass": "AutoButton",
                            "contentScripts": [
                                {
                                    "id": "widget/auto-button.js",
                                    "source": "Y2xhc3MgQXV0b0J1dHRvbiBleHRlbmRzIFdpZGdldEJhc2V7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pew0KICAgICAgICBzdXBlcihmdW5jdGlvbkluZm8sdXNlckludGVyZmFjZSx0YXJnZXRJRCxjb25maWd1cmF0aW9uKTsNCg0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLWJ1dHRvbic+PGltZyBzcmM9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCsiJyB0aXRsZT0nIitmdW5jdGlvbkluZm8uc291cmNlLm5hbWUrIjogIitmdW5jdGlvbkluZm8uc291cmNlLmRlc2NyaXB0aW9uKyInPiA8L2J1dHRvbj4iKTsNCiAgICAgICAgdGhpcy5lbmFibGUoKTsNCg0KICAgICAgICB0aGlzLmlzQWN0aXZhdGVkID0gZmFsc2U7DQogICAgICAgIHRoaXMuaW5pdGlhbFJlcXVlc3QgPSB0cnVlOw0KDQogICAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlOw0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFByZXNlbnRhdGlvbkZpbmlzaExpc3RlbmVyKHRoaXMpOw0KICAgICAgICBsZXQgYXV0b0J1dHRvbiA9IHRoaXM7DQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KCgpPT57DQogICAgICAgICAgICBhdXRvQnV0dG9uLmNyZWF0ZVJlcXVlc3QoKTsNCiAgICAgICAgICAgIC8vYXV0b0J1dHRvbi50b2dnbGUoKTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgZW5hYmxlKCl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLm9uKCAiY2xpY2siLHRoaXMsIHRoaXMuYnV0dG9uQ2xpY2tlZCk7DQoNCiAgICB9DQoNCiAgICBkaXNhYmxlKCl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLm9mZiggImNsaWNrIix0aGlzLCB0aGlzLmJ1dHRvbkNsaWNrZWQpOw0KDQoNCiAgICB9DQoNCiAgICBidXR0b25DbGlja2VkKGUpew0KICAgICAgICBpZighZS5kYXRhLnJlcXVlc3RJblByb2dyZXNzKXsNCg0KICAgICAgICAgICAgaWYoZS5kYXRhLmlzQWN0aXZhdGVkKXsNCiAgICAgICAgICAgICAgICBlLmRhdGEudG9nZ2xlKCk7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBlLmRhdGEuY3JlYXRlUmVxdWVzdCgpOw0KICAgICAgICAgICAgfQ0KDQoNCiAgICAgICAgfQ0KDQogICAgfQ0KDQogICAgdG9nZ2xlKCl7DQogICAgICAgIGlmKHRoaXMuaXNBY3RpdmF0ZWQpew0KICAgICAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkucmVtb3ZlQ2xhc3MoImVyLWJ1dHRvbi1hY3RpdmUiKTsNCiAgICAgICAgICAgIHRoaXMuc3RvcFByZXNlbnRhdGlvbigpOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLmFkZENsYXNzKCJlci1idXR0b24tYWN0aXZlIik7DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5pc0FjdGl2YXRlZCA9ICF0aGlzLmlzQWN0aXZhdGVkOw0KICAgIH0NCg0KICAgIGNyZWF0ZVJlcXVlc3QoKXsNCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IHRydWU7DQogICAgICAgIHJlcXVlc3RNYW5hZ2VyLmNyZWF0ZVJlcXVlc3QodGhpcyx7DQogICAgICAgICAgICB0eXBlOiAiVVJMIiwNCiAgICAgICAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsDQogICAgICAgIH0sIG51bGwsIHRoaXMuaW5pdGlhbFJlcXVlc3QpOw0KICAgIH0NCg0KICAgIHJlbW92ZSgpew0KICAgICAgICB0aGlzLmlzQWN0aXZhdGVkID0gZmFsc2U7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZSgpOw0KICAgIH0NCg0KICAgIHByZXNlbnRhdGlvbkZpbmlzaGVkKHByZXNlbnRhdGlvbikgew0KICAgICAgICBzdXBlci5wcmVzZW50YXRpb25GaW5pc2hlZChwcmVzZW50YXRpb24pOw0KDQoNCiAgICAgICAgaWYocHJlc2VudGF0aW9uLnJlcXVlc3RDb3VudGVyID4gMCl7DQogICAgICAgICAgICB0aGlzLnRvZ2dsZSgpDQoNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuaW5pdGlhbFJlcXVlc3QgPSBmYWxzZTsNCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IGZhbHNlOw0KDQoNCiAgICB9DQp9DQo="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/auto-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1idXR0b24+aW1new0KICAgIG1heC13aWR0aDogMTAwJTsNCn0NCg0KLmVhc3ktcmVhZGluZy1idXR0b257DQogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7DQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KfQ0KDQouZXItYnV0dG9uLWFjdGl2ZXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNjc5ICFpbXBvcnRhbnQ7DQp9"
                                }
                            ]
                        }
                    },
                    "presentation": {
                        "source": {
                            "id": "content-replacement-switcher",
                            "name": "Content Replacement Switcher Switcher",
                            "description": "Renders the result instead of the paragraph but providing a switch to bring the original back.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "/components/presentation/content-replacement-switcher/1.0/presentation/images",
                            "remoteBaseDirectory": "components/presentation/content-replacement-switcher/1.0/",
                            "implementationClass": "ContentReplacementSwitcher",
                            "contentScripts": [
                                {
                                    "id": "presentation/content-replacement-switcher.js",
                                    "source": ""
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "presentation/content-replacement-switcher.css",
                                    "css": "LmVyLWNvbnRlbnQtcmVwbGFjZW1lbnQtdWl7DQogICAgZGlzcGxheTogdGFibGU7DQp9DQouZXItY29udGVudC1yZXBsYWNlbWVudC11aT5zcGFuew0KICAgIGRpc3BsYXk6IHRhYmxlLXJvdzsNCn0NCg0KLmVyLXRvZ2dsZS1idXR0b24gew0KICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7DQogICAgd2lkdGg6IDUwcHggIWltcG9ydGFudDsNCiAgICBoZWlnaHQ6IDUwcHggIWltcG9ydGFudDsNCiAgICBwZXJzcGVjdGl2ZTogMTAwMHB4Ow0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYm9yZGVyIDAuMXMgbGluZWFyLCBib3gtc2hhZG93IDAuMnMgbGluZWFyOw0KICAgIC1tb3otdHJhbnNpdGlvbjogYm9yZGVyIDAuMXMgbGluZWFyLCBib3gtc2hhZG93IDAuMnMgbGluZWFyOw0KICAgIHRyYW5zaXRpb246IGJvcmRlciAwLjFzIGxpbmVhciwgYm94LXNoYWRvdyAwLjJzIGxpbmVhcjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgbWFyZ2luOiAxMHB4ICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KfQ0KLmVyLXRvZ2dsZS1idXR0b24taW5uZXI+c3Bhbj5pbWd7DQogICAgd2lkdGg6IDUwcHggIWltcG9ydGFudDsNCiAgICBoZWlnaHQ6IDUwcHggIWltcG9ydGFudDsNCn0NCg0KLmVyLXRvZ2dsZS1idXR0b24uYW5pbWF0aW9uLWFjdGl2ZSB7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMTBweCBibHVlOw0KICAgIC1tb3otYm94LXNoYWRvdzogMCAwIDEwcHggYmx1ZTsNCiAgICBib3gtc2hhZG93OiAwIDAgMTBweCBibHVlOw0KfQ0KDQouZXItdG9nZ2xlLWJ1dHRvbi1pbm5lciB7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNnM7DQogICAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDsNCiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsMCwwLDAuMik7DQp9DQoNCi5lci10b2dnbGUtYnV0dG9uLWlubmVyLmFjdGl2ZSB7DQogICAgdHJhbnNmb3JtOiByb3RhdGVZKDE4MGRlZyk7DQp9DQoNCi5lci10b2dnbGUtYnV0dG9uLWZyb250LCAuZXItdG9nZ2xlLWJ1dHRvbi1iYWNrIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuOw0KICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjsNCn0NCg0KLmVyLXRvZ2dsZS1idXR0b24tZnJvbnQgew0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmI7DQogICAgY29sb3I6IGJsYWNrOw0KfQ0KDQouZXItdG9nZ2xlLWJ1dHRvbi1iYWNrIHsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMTgwZGVnKTsNCn0NCg0KLmVyLXRvZ2dsZS1idXR0b24tdWktY29udGFpbmVyew0KICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7DQogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsNCn0NCg0KLmVyLXRvZ2dsZS1idXR0b24tdWktY29udGFpbmVyPmJ1dHRvbnsNCiAgICBtYXgtd2lkdGg6IDI1cHggIWltcG9ydGFudDsNCiAgICBtYXgtaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7DQogICAgd2lkdGg6IDI1cHggIWltcG9ydGFudDsNCiAgICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7DQogICAgYmFja2dyb3VuZDogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLmVyLXRvZ2dsZS1idXR0b24tdWktY29udGFpbmVyPmJ1dHRvbjpob3ZlcnsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgYmFja2dyb3VuZDogIzIyNzZkMiAhaW1wb3J0YW50Ow0KfQ0KDQouZXItdG9nZ2xlLWJ1dHRvbi11aS1jb250YWluZXI+YnV0dG9uPmltZ3sNCiAgICBtYXgtd2lkdGg6IDI1cHggIWltcG9ydGFudDsNCiAgICBtYXgtaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KICAgIG1hcmdpbjogMCAhaW1wb3J0YW50Ow0KfQ0KDQoNCg=="
                                }
                            ]
                        },
                        "configuration": {
                            "remoteAssetDirectory": "https://localhost:8080//components/presentation/content-replacement-switcher/1.0/presentation/images"
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "magnifyFont",
                            "engine": {
                                "id": "font-magnification-tool",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Magnify font",
                            "description": "Magnifies the font size",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/magnify.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/font-magnification-tool/1.0/assets/magnify.png",
                            "remoteBaseDirectory": "components/engines/font-magnification-tool/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "magnifyFont",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "font-magnification-tool/1.0/js/font-magnification-tool.js",
                                    "source": "bGV0IHpvb20gPSAwOw0KbGV0IHpvb21Jbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRGb250TWFnbmlmaWNhdGlvbigpIHsNCiAgICBpZiAoIXpvb21Jbml0KSB7DQogICAgICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KGVsLmNzcygnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgZWwuZGF0YSgnZm9udC1zaXplJywgc2l6ZSk7DQoNCg0KICAgICAgICB9KTsNCiAgICAgICAgem9vbUluaXQgPSB0cnVlOw0KICAgIH0NCg0KfQ0KDQpmdW5jdGlvbiBtYWduaWZ5Rm9udChyZXEsIGNvbmZpZyx3aWRnZXQpIHsNCiAgICBpbml0Rm9udE1hZ25pZmljYXRpb24oKTsNCiAgICB6b29tKys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdmb250LXNpemUnKTsNCiAgICAgICAgICAgIGVsLmNzcygnZm9udC1zaXplJywgTWF0aC5tYXgoc2l6ZSArIHpvb20sIDApICsgJ3B4Jyk7DQogICAgICAgIH0NCg0KICAgIH0pOw0KDQoNCn0NCg0KZnVuY3Rpb24gc2hyaW5rRm9udChyZXEsIGNvbmZpZykgew0KICAgIGluaXRGb250TWFnbmlmaWNhdGlvbigpOw0KICAgIHpvb20tLTsNCiAgICAkKCcqJykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmKCEkKHRoaXMpLnBhcmVudHMoJy5lYXN5LXJlYWRpbmctaW50ZXJmYWNlJykubGVuZ3RoKXsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IGVsLmRhdGEoJ2ZvbnQtc2l6ZScpOw0KICAgICAgICAgICAgZWwuY3NzKCdmb250LXNpemUnLCBNYXRoLm1heChzaXplICsgem9vbSwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9DQoNCg0KDQovLy9MSU5FIEhFSUdIVA0KbGV0IGxpbmVIZWlnaHQgPSAwOw0KbGV0IGxpbmVIZWlnaHRJbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRMaW5lSGVpZ2h0KCkgew0KICAgIGlmICghbGluZUhlaWdodEluaXQpIHsNCiAgICAgICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQoZWwuY3NzKCdsaW5lLWhlaWdodCcpKTsNCiAgICAgICAgICAgIGVsLmRhdGEoJ2xpbmUtaGVpZ2h0Jywgc2l6ZSk7DQoNCiAgICAgICAgfSk7DQogICAgICAgIGxpbmVIZWlnaHRJbml0ID0gdHJ1ZTsNCiAgICB9DQoNCn0NCg0KZnVuY3Rpb24gaW5jcmVhc2VMaW5lSGVpZ2h0KHJlcSwgY29uZmlnKSB7DQogICAgaW5pdExpbmVIZWlnaHQoKTsNCiAgICBsaW5lSGVpZ2h0Kys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdsaW5lLWhlaWdodCcpOw0KICAgICAgICAgICAgZWwuY3NzKCdsaW5lLWhlaWdodCcsIE1hdGgubWF4KHNpemUgKyBsaW5lSGVpZ2h0LCAwKSArICdweCcpOw0KICAgICAgICB9DQoNCiAgICB9KTsNCg0KDQp9DQoNCmZ1bmN0aW9uIGRlY3JlYXNlTGluZUhlaWdodChyZXEsIGNvbmZpZykgew0KICAgIGluaXRMaW5lSGVpZ2h0KCk7DQogICAgbGluZUhlaWdodC0tOw0KICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYoISQodGhpcykucGFyZW50cygnLmVhc3ktcmVhZGluZy1pbnRlcmZhY2UnKS5sZW5ndGgpew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gZWwuZGF0YSgnbGluZS1oZWlnaHQnKTsNCiAgICAgICAgICAgIGVsLmNzcygnbGluZS1oZWlnaHQnLCBNYXRoLm1heChzaXplICsgbGluZUhlaWdodCwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9"
                                }
                            ],
                            "contentCSS": []
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "button",
                            "name": "Simple Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/button/1.0/",
                            "implementationClass": "Button",
                            "contentScripts": [
                                {
                                    "id": "widget/button.js",
                                    "source": "Y2xhc3MgQnV0dG9uIGV4dGVuZHMgV2lkZ2V0QmFzZSB7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pew0KICAgICAgICBzdXBlcihmdW5jdGlvbkluZm8sdXNlckludGVyZmFjZSx0YXJnZXRJRCxjb25maWd1cmF0aW9uKTsNCg0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLWJ1dHRvbic+PGltZyBzcmM9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCsiJyB0aXRsZT0nIitmdW5jdGlvbkluZm8uc291cmNlLm5hbWUrIjogIitmdW5jdGlvbkluZm8uc291cmNlLmRlc2NyaXB0aW9uKyInPiA8L2J1dHRvbj4iKTsNCiAgICAgICAgdGhpcy5lbmFibGUoKTsNCiAgICB9DQoNCiAgICBlbmFibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub24oICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KICAgIH0NCg0KICAgIGRpc2FibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub2ZmKCAiY2xpY2siLHRoaXMsIHRoaXMuYnV0dG9uQ2xpY2tlZCk7DQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgbGV0IHZvaWRJbnB1dCA9IHsNCiAgICAgICAgICAgIHR5cGU6ICJWb2lkIiwNCiAgICAgICAgfTsNCiAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdChlLmRhdGEsIHZvaWRJbnB1dCwgZSk7DQogICAgfQ0KDQogICAgcmVtb3ZlKCl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZSgpOw0KICAgIH0NCn0NCg=="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1idXR0b24+aW1new0KICAgIG1heC13aWR0aDogMTAwJTsNCn0NCg0KLmVhc3ktcmVhZGluZy1idXR0b257DQogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7DQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KfQ=="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "shrinkFont",
                            "engine": {
                                "id": "font-magnification-tool",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Shrink font",
                            "description": "Shrinks the font size",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/shrink.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/font-magnification-tool/1.0/assets/shrink.png",
                            "remoteBaseDirectory": "components/engines/font-magnification-tool/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "shrinkFont",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "font-magnification-tool/1.0/js/font-magnification-tool.js",
                                    "source": "bGV0IHpvb20gPSAwOw0KbGV0IHpvb21Jbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRGb250TWFnbmlmaWNhdGlvbigpIHsNCiAgICBpZiAoIXpvb21Jbml0KSB7DQogICAgICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KGVsLmNzcygnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgZWwuZGF0YSgnZm9udC1zaXplJywgc2l6ZSk7DQoNCg0KICAgICAgICB9KTsNCiAgICAgICAgem9vbUluaXQgPSB0cnVlOw0KICAgIH0NCg0KfQ0KDQpmdW5jdGlvbiBtYWduaWZ5Rm9udChyZXEsIGNvbmZpZyx3aWRnZXQpIHsNCiAgICBpbml0Rm9udE1hZ25pZmljYXRpb24oKTsNCiAgICB6b29tKys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdmb250LXNpemUnKTsNCiAgICAgICAgICAgIGVsLmNzcygnZm9udC1zaXplJywgTWF0aC5tYXgoc2l6ZSArIHpvb20sIDApICsgJ3B4Jyk7DQogICAgICAgIH0NCg0KICAgIH0pOw0KDQoNCn0NCg0KZnVuY3Rpb24gc2hyaW5rRm9udChyZXEsIGNvbmZpZykgew0KICAgIGluaXRGb250TWFnbmlmaWNhdGlvbigpOw0KICAgIHpvb20tLTsNCiAgICAkKCcqJykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmKCEkKHRoaXMpLnBhcmVudHMoJy5lYXN5LXJlYWRpbmctaW50ZXJmYWNlJykubGVuZ3RoKXsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IGVsLmRhdGEoJ2ZvbnQtc2l6ZScpOw0KICAgICAgICAgICAgZWwuY3NzKCdmb250LXNpemUnLCBNYXRoLm1heChzaXplICsgem9vbSwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9DQoNCg0KDQovLy9MSU5FIEhFSUdIVA0KbGV0IGxpbmVIZWlnaHQgPSAwOw0KbGV0IGxpbmVIZWlnaHRJbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRMaW5lSGVpZ2h0KCkgew0KICAgIGlmICghbGluZUhlaWdodEluaXQpIHsNCiAgICAgICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQoZWwuY3NzKCdsaW5lLWhlaWdodCcpKTsNCiAgICAgICAgICAgIGVsLmRhdGEoJ2xpbmUtaGVpZ2h0Jywgc2l6ZSk7DQoNCiAgICAgICAgfSk7DQogICAgICAgIGxpbmVIZWlnaHRJbml0ID0gdHJ1ZTsNCiAgICB9DQoNCn0NCg0KZnVuY3Rpb24gaW5jcmVhc2VMaW5lSGVpZ2h0KHJlcSwgY29uZmlnKSB7DQogICAgaW5pdExpbmVIZWlnaHQoKTsNCiAgICBsaW5lSGVpZ2h0Kys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdsaW5lLWhlaWdodCcpOw0KICAgICAgICAgICAgZWwuY3NzKCdsaW5lLWhlaWdodCcsIE1hdGgubWF4KHNpemUgKyBsaW5lSGVpZ2h0LCAwKSArICdweCcpOw0KICAgICAgICB9DQoNCiAgICB9KTsNCg0KDQp9DQoNCmZ1bmN0aW9uIGRlY3JlYXNlTGluZUhlaWdodChyZXEsIGNvbmZpZykgew0KICAgIGluaXRMaW5lSGVpZ2h0KCk7DQogICAgbGluZUhlaWdodC0tOw0KICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYoISQodGhpcykucGFyZW50cygnLmVhc3ktcmVhZGluZy1pbnRlcmZhY2UnKS5sZW5ndGgpew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gZWwuZGF0YSgnbGluZS1oZWlnaHQnKTsNCiAgICAgICAgICAgIGVsLmNzcygnbGluZS1oZWlnaHQnLCBNYXRoLm1heChzaXplICsgbGluZUhlaWdodCwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9"
                                }
                            ],
                            "contentCSS": []
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "button",
                            "name": "Simple Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/button/1.0/",
                            "implementationClass": "Button",
                            "contentScripts": [
                                {
                                    "id": "widget/button.js",
                                    "source": "Y2xhc3MgQnV0dG9uIGV4dGVuZHMgV2lkZ2V0QmFzZSB7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pew0KICAgICAgICBzdXBlcihmdW5jdGlvbkluZm8sdXNlckludGVyZmFjZSx0YXJnZXRJRCxjb25maWd1cmF0aW9uKTsNCg0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLWJ1dHRvbic+PGltZyBzcmM9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCsiJyB0aXRsZT0nIitmdW5jdGlvbkluZm8uc291cmNlLm5hbWUrIjogIitmdW5jdGlvbkluZm8uc291cmNlLmRlc2NyaXB0aW9uKyInPiA8L2J1dHRvbj4iKTsNCiAgICAgICAgdGhpcy5lbmFibGUoKTsNCiAgICB9DQoNCiAgICBlbmFibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub24oICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KICAgIH0NCg0KICAgIGRpc2FibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub2ZmKCAiY2xpY2siLHRoaXMsIHRoaXMuYnV0dG9uQ2xpY2tlZCk7DQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgbGV0IHZvaWRJbnB1dCA9IHsNCiAgICAgICAgICAgIHR5cGU6ICJWb2lkIiwNCiAgICAgICAgfTsNCiAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdChlLmRhdGEsIHZvaWRJbnB1dCwgZSk7DQogICAgfQ0KDQogICAgcmVtb3ZlKCl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZSgpOw0KICAgIH0NCn0NCg=="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1idXR0b24+aW1new0KICAgIG1heC13aWR0aDogMTAwJTsNCn0NCg0KLmVhc3ktcmVhZGluZy1idXR0b257DQogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7DQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KfQ=="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "image_search",
                            "engine": {
                                "id": "image_search",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Image Search",
                            "description": "Simple image search using Google Image Search",
                            "inputTypes": [
                                {
                                    "inputType": "Word",
                                    "name": "Input word",
                                    "description": "Word to translate"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "ImageIOType",
                                    "name": "Image",
                                    "description": "Image word"
                                }
                            ],
                            "defaultIcon": "assets/image_search.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/image_search/1.0/assets/image_search.png",
                            "remoteBaseDirectory": "components/engines/image_search/1.0/",
                            "type": "RemoteFunction",
                            "entryPoint": "getImage"
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "single-choice-button",
                            "name": "Single Choice Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/single-choice-button/1.0/",
                            "implementationClass": "SingleChoiceButton",
                            "contentScripts": [
                                {
                                    "id": "widget/single-choice-button.js",
                                    "source": "Y2xhc3MgU2luZ2xlQ2hvaWNlQnV0dG9uIGV4dGVuZHMgV2lkZ2V0QmFzZSB7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsIHRhcmdldElELCBjb25maWd1cmF0aW9uKSB7DQogICAgICAgIHN1cGVyKGZ1bmN0aW9uSW5mbywgdXNlckludGVyZmFjZSwgdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pOw0KDQogICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7DQogICAgICAgIHRoaXMub3V0cHV0VHlwZUNsYXNzID0gbnVsbDsNCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IGZhbHNlOw0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX3NpbmdsZV9jaG9pY2VfYnV0dG9uXycgKyB0aGlzLndpZGdldElEOw0KICAgICAgICAkKCIjIiArIHRhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIgKyB0aGlzLndpZGdldElEICsgIicgY2xhc3M9J2Vhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlIGVhc3ktcmVhZGluZy1idXR0b24nPjxpbWcgc3JjPSciICsgZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCArICInIHRpdGxlPSciICsgZnVuY3Rpb25JbmZvLnNvdXJjZS5uYW1lICsgIjogIiArIGZ1bmN0aW9uSW5mby5zb3VyY2UuZGVzY3JpcHRpb24gKyAiJz4gPC9idXR0b24+Iik7DQoNCiAgICAgLy8gICAkKCIjIiArIHRoaXMud2lkZ2V0SUQpLmNzcygnY3NzVGV4dCcsICdiYWNrZ3JvdW5kLWNvbG9yOiAnK2NvbmZpZ3VyYXRpb24uYmFja2dyb3VuZENvbG9yQnV0dG9uQWN0aXZlKycgIWltcG9ydGFudCcpOw0KICAgICAgICB0aGlzLmVuYWJsZSgpOw0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFdpZGdldEFjdGl2YXRlZExpc3RlbmVycyh0aGlzKTsNCiAgICB9DQoNCg0KICAgIGVuYWJsZSgpIHsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5vbigiY2xpY2siLCB0aGlzLCB0aGlzLnNpbmdsZUNob2ljZUJ1dHRvbkNsaWNrZWQpOw0KDQogICAgfQ0KDQogICAgZGlzYWJsZSgpIHsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5vZmYoImNsaWNrIiwgdGhpcywgdGhpcy5zaW5nbGVDaG9pY2VCdXR0b25DbGlja2VkKTsNCiAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci5yZW1vdmVXaWRnZXRBY3RpdmF0ZWRMaXN0ZW5lcnModGhpcyk7DQoNCiAgICB9DQoNCiAgICBhY3RpdmF0ZVdpZGdldCgpew0KICAgICAgICBjb25zb2xlLmxvZygiU2luZ2xlIENob2ljZSBCdXR0b24gQWN0aXZlIik7DQogICAgICAgICQoIiMiICsgdGhpcy53aWRnZXRJRCkuYWRkQ2xhc3MoImVhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlLWFjdGl2ZSIpOw0KICAgICAgICBpZih0aGlzLmZ1bmN0aW9uSW5mby5zb3VyY2UuaW5wdXRUeXBlcy5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXNbMF0uaW5wdXRUeXBlKSB7DQoNCiAgICAgICAgICAgICAgICBjYXNlIFBhcmFncmFwaC5jbGFzc05hbWU6DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIuYWRkUGFyYWdyYXBoQ2xpY2tMaXN0ZW5lcih0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgICAgICBjYXNlIFdvcmQuY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFdvcmRDbGlja0xpc3RlbmVyKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgQW5ub3RhdGVkUGFyYWdyYXBoLmNsYXNzTmFtZToNCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci5hZGRQYXJhZ3JhcGhDbGlja0xpc3RlbmVyKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMub3V0cHV0VHlwZUNsYXNzID0gdGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXNbMF0uaW5wdXRUeXBlOw0KICAgICAgICB9DQoNCiAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci53aWRnZXRBY3RpdmF0ZWQodGhpcyk7DQoNCiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlOw0KDQogICAgfQ0KDQogICAgZGVhY3RpdmF0ZVdpZGdldChtYW51YWw9dHJ1ZSl7DQogICAgICAgIHN1cGVyLmRlYWN0aXZhdGVXaWRnZXQobWFudWFsKTsNCiAgICAgICAgY29uc29sZS5sb2coIlNpbmdsZSBDaG9pY2UgQnV0dG9uIE5vdCBBY3RpdmUiKTsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5yZW1vdmVDbGFzcygiZWFzeS1yZWFkaW5nLXNpbmdsZS1jaG9pY2UtYWN0aXZlIik7DQoNCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZ1bmN0aW9uSW5mby5zb3VyY2UuaW5wdXRUeXBlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZ1bmN0aW9uSW5mby5zb3VyY2UuaW5wdXRUeXBlc1tpXS5pbnB1dFR5cGUpIHsNCiAgICAgICAgICAgICAgICBjYXNlIFdvcmQuY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnJlbW92ZVdvcmRDbGlja0xpc3RlbmVyKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIFBhcmFncmFwaC5jbGFzc05hbWU6DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIucmVtb3ZlUGFyYWdyYXBoQ2xpY2tMaXN0ZW5lcih0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSBBbm5vdGF0ZWRQYXJhZ3JhcGguY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnJlbW92ZVBhcmFncmFwaENsaWNrTGlzdGVuZXIodGhpcyk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQoNCg0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOw0KICAgIH0NCg0KICAgIHNpbmdsZUNob2ljZUJ1dHRvbkNsaWNrZWQoZSkgew0KICAgICAgICBpZihlLmRhdGEuYWN0aXZlKXsNCiAgICAgICAgICAgIGUuZGF0YS5kZWFjdGl2YXRlV2lkZ2V0KHRydWUpOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIGUuZGF0YS5hY3RpdmF0ZVdpZGdldCgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgb25Xb3JkQ2xpY2sod29yZCwgZSkgew0KICAgICAgICBpZih0aGlzLnJlcXVlc3RJblByb2dyZXNzKXsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gdHJ1ZTsNCiAgICAgICAgZWFzeVJlYWRpbmcuYnVzeUFuaW1hdGlvbi5zdGFydEFuaW1hdGlvbigpOw0KICAgICAgICBpZighdGhpcy5maWx0ZXJVc2VySW50ZXJmYWNlRWxlbWVudHMod29yZCkpew0KICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdCh0aGlzLCB3b3JkLCBlKTsNCiAgICAgICAgfQ0KDQogICAgfQ0KDQogICAgb25QYXJhZ3JhcGhDTGljayhwYXJhZ3JhcGgsIGUpIHsNCiAgICAgICAgaWYodGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyl7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IHRydWU7DQogICAgICAgIGVhc3lSZWFkaW5nLmJ1c3lBbmltYXRpb24uc3RhcnRBbmltYXRpb24oKTsNCiAgICAgICAgaWYoIXRoaXMuZmlsdGVyVXNlckludGVyZmFjZUVsZW1lbnRzKHBhcmFncmFwaCkpew0KICAgICAgICAgICAgaWYodGhpcy5vdXRwdXRUeXBlQ2xhc3MgPT09IFBhcmFncmFwaC5jbGFzc05hbWUpew0KICAgICAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyLmNyZWF0ZVJlcXVlc3QodGhpcywgcGFyYWdyYXBoLCBlKTsNCiAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMub3V0cHV0VHlwZUNsYXNzID09PSBBbm5vdGF0ZWRQYXJhZ3JhcGguY2xhc3NOYW1lKXsNCiAgICAgICAgICAgICAgICBwYXJhZ3JhcGgudHlwZSA9IEFubm90YXRlZFBhcmFncmFwaC5jbGFzc05hbWU7DQogICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdCh0aGlzLCBwYXJhZ3JhcGgsIGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgZmlsdGVyVXNlckludGVyZmFjZUVsZW1lbnRzKGVsZW1lbnQpew0KICAgICAgICByZXR1cm4gJChlbGVtZW50KS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aDsNCiAgICB9DQoNCg0KICAgIHJlcXVlc3RGaW5pc2hlZCgpew0KICAgICAgICBzdXBlci5yZXF1ZXN0RmluaXNoZWQoKTsNCiAgICAgICAgZWFzeVJlYWRpbmcuYnVzeUFuaW1hdGlvbi5zdG9wQW5pbWF0aW9uKCk7DQogICAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSBmYWxzZTsNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgaWYodGhpcy5hY3RpdmUpew0KICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlV2lkZ2V0KGZhbHNlKTsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLmRpc2FibGUoKTsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5yZW1vdmUoKTsNCg0KICAgIH0NCn0="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/single-choice-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlPmltZ3sNCiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDsNCn0NCg0KLmVhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlLWFjdGl2ZXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNjc5ICFpbXBvcnRhbnQ7DQp9DQoNCi5lYXN5LXJlYWRpbmctc2luZ2xlLWNob2ljZXsNCiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDsNCiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQp9"
                                }
                            ]
                        }
                    },
                    "presentation": {
                        "source": {
                            "id": "tippy-tooltip",
                            "name": "TippyTooltip",
                            "description": "Renders the result within a tooltip based on tippy.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "/components/presentation/tippy-tooltip/1.0/presentation/images",
                            "remoteBaseDirectory": "components/presentation/tippy-tooltip/1.0/",
                            "implementationClass": "TippyTooltip",
                            "contentScripts": [
                                {
                                    "id": "presentation/popper.min.js",
                                    "source": ""
                                },
                                {
                                    "id": "presentation/tippy.min.js",
                                    "source": ""
                                },
                                {
                                    "id": "presentation/tippy-tooltip.js",
                                    "source": "Y2xhc3MgVGlwcHlUb29sdGlwIGV4dGVuZHMgUHJlc2VudGF0aW9uIHsNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsIGNvbmZpZ3VyYXRpb24pIHsNCiAgICAgICAgc3VwZXIoZnVuY3Rpb25JbmZvLCB1c2VySW50ZXJmYWNlLCBjb25maWd1cmF0aW9uKTsNCg0KICAgIH0NCg0KICAgIHJlbmRlclJlc3VsdChyZXF1ZXN0LCByZXN1bHQpIHsNCg0KICAgICAgICBsZXQgaW9SZXMgPSBpb1R5cGVVdGlscy50b0lPVHlwZUluc3RhbmNlKHJlc3VsdC5yZXN1bHQpOw0KICAgICAgICBsZXQgcmVzdWx0SFRNTCA9IGlvUmVzLnRvSHRtbCgpOw0KICAgICAgICBsZXQgcmVxdWVzdElEID0gdGhpcy5jcmVhdGVSZXF1ZXN0SWQoKTsNCg0KICAgICAgICBpZiAocmVxdWVzdC5pbnB1dFR5cGUgaW5zdGFuY2VvZiBXb3JkKSB7DQoNCg0KDQogICAgICAgICAgICAvL2xldCBjbGFzc05hbWUgPSAiZWFzeS1yZWFkaW5nLXRpcHB5LXRvb2x0aXAtIit0aGlzLnJlcXVlc3RDb3VudGVyOw0KICAgICAgICAgICAgLy9wYWdlVXRpbHMud3JhcFdvcmRJbihyZXF1ZXN0LmlucHV0LCAic3BhbiIsdGhpcy5jcmVhdGVSZXF1ZXN0SWQoKSwiZWFzeS1yZWFkaW5nLXJlc3VsdCBlYXN5LXJlYWRpbmctdGlwcHktdG9vbHRpcCAiK2NsYXNzTmFtZSk7DQoNCiAgICAgICAgICAgIGxldCBzcGFuID0gcGFnZVV0aWxzLndyYXBXb3JkSW4ocmVxdWVzdC5pbnB1dCwgInNwYW4iLCByZXF1ZXN0SUQrIiBlYXN5LXJlYWRpbmctdGlwcHktdG9vbHRpcCAiICsgdGhpcy5nZXRSZXN1bHRDbGFzcygpLCB0aGlzLmdldFByZXNlbnRhdGlvbkFuZFJlcXVlc3RJZGVudGlmaWVyKHJlcXVlc3RJRCkpOw0KDQogICAgICAgICAgICBpZiAoaW9SZXMgaW5zdGFuY2VvZiBJbWFnZUlPVHlwZSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IElOSVRJQUxfQ09OVEVOVCA9ICdMb2FkaW5nLi4uJzsNCg0KICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gew0KICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgY2FuRmV0Y2g6IHRydWUNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgdGlwcHkoIi4iICsgcmVxdWVzdElELCB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IElOSVRJQUxfQ09OVEVOVCwNCiAgICAgICAgICAgICAgICAgICAgdGhlbWU6ICdsaWdodC1ib3JkZXInLA0KICAgICAgICAgICAgICAgICAgICBhc3luYyBvblNob3codGlwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaXNGZXRjaGluZyB8fCAhc3RhdGUuY2FuRmV0Y2gpIHJldHVybjsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNGZXRjaGluZyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jYW5GZXRjaCA9IGZhbHNlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICB0cnkgew0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG93bmxvYWRpbmdJbWFnZSA9IG5ldyBJbWFnZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nSW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGlwLnN0YXRlLmlzVmlzaWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IDEwMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpcC5zZXRDb250ZW50KHRoaXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nSW1hZ2Uuc3JjID0gcmVzdWx0LnJlc3VsdC51cmw7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXAuc2V0Q29udGVudChgRmV0Y2ggZmFpbGVkLiAke2V9YCkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNGZXRjaGluZyA9IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIG9uSGlkZGVuKHRpcCkgew0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aXBweSgiLiIgKyByZXF1ZXN0SUQsIHsNCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcmVzdWx0SFRNTCwNCiAgICAgICAgICAgICAgICAgICAgdGhlbWU6ICdsaWdodC1ib3JkZXInLA0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5pbnB1dFR5cGUgaW5zdGFuY2VvZiBQYXJhZ3JhcGgpIHsNCg0KICAgICAgICAgICAgbGV0IGRpdiA9ICQoIHJlcXVlc3QuaW5wdXQuZWxlbWVudCkud3JhcCggIjxkaXYgY2xhc3M9JyIrIHJlcXVlc3RJRCsiIGVhc3ktcmVhZGluZy10aXBweS10b29sdGlwICIrdGhpcy5nZXRSZXN1bHRDbGFzcygpKyInICIrdGhpcy5nZXRQcmVzZW50YXRpb25BbmRSZXF1ZXN0SWRlbnRpZmllcihyZXF1ZXN0SUQpKyI+PC9kaXY+IiApOw0KDQogICAgICAgICAgICB0aXBweSgiLiIgKyByZXF1ZXN0SUQsIHsNCiAgICAgICAgICAgICAgICBjb250ZW50OiByZXN1bHRIVE1MLA0KICAgICAgICAgICAgICAgIHRoZW1lOiAnbGlnaHQtYm9yZGVyJywNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgIH0NCg0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnByZXNlbnRhdGlvbkZpbmlzaGVkKHRoaXMpOw0KDQogICAgfQ0KDQogICAgdW5kbygpIHsNCg0KICAgIH0NCiAgICByZW1vdmVSZXN1bHQocmVxdWVzdElEKXsNCg0KICAgICAgICBjb25zdCB0b29sdGlwRWxlbWVudCA9ICQoIi4iK3JlcXVlc3RJRCk7DQogICAgICAgIGlmKHRvb2x0aXBFbGVtZW50Lmxlbmd0aCl7DQogICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRpcHB5KHRvb2x0aXBFbGVtZW50WzBdKTsNCiAgICAgICAgICAgIGlmKGluc3RhbmNlKXsNCiAgICAgICAgICAgICAgICBpbnN0YW5jZS5kZXN0cm95KHRydWUpOw0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgaWYodG9vbHRpcEVsZW1lbnRbMF0uX3RpcHB5KXsNCiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcEVsZW1lbnRbMF0uX3RpcHB5LmRlc3Ryb3kodHJ1ZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBsZXQgcGFyZW50ID0gdG9vbHRpcEVsZW1lbnQucGFyZW50KCk7DQogICAgICAgICAgICB0b29sdGlwRWxlbWVudC5jb250ZW50cygpLnVud3JhcCgpOw0KICAgICAgICAgICAgaWYocGFyZW50Lmxlbmd0aCl7DQogICAgICAgICAgICAgICAgcGFyZW50LmdldCgwKS5ub3JtYWxpemUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgfQ0KDQoNCn0="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "presentation/light-border.css",
                                    "css": "LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1le2JhY2tncm91bmQtY29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsOCwxNiwuMTUpO2NvbG9yOiMyNjMyM2Q7Ym94LXNoYWRvdzowIDNweCAxNHB4IC0uNXB4IHJnYmEoMCw4LDE2LC4wOCl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1iYWNrZHJvcHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1hcnJvdzphZnRlciwudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWUgLnRpcHB5LWFycm93OmJlZm9yZSwudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWUgLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXIsLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1yb3VuZGFycm93OmJlZm9yZXtjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6LTF9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1yb3VuZGFycm93e2ZpbGw6I2ZmZn0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWUgLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXJ7YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCamJHbHdMWEoxYkdVOUltVjJaVzV2WkdRaUlHWnBiR3d0Y25Wc1pUMGlaWFpsYm05a1pDSWdjM1J5YjJ0bExXeHBibVZxYjJsdVBTSnliM1Z1WkNJZ2MzUnliMnRsTFcxcGRHVnliR2x0YVhROUlqRXVOREUwSWlCMmFXVjNRbTk0UFNJd0lEQWdNVGdnTnlJZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWo0OGNHRjBhQ0JrUFNKTk1DQTNjekl1TURJeExTNHdNVFVnTlM0eU5UTXROQzR5TVRoRE5pNDFPRFFnTVM0d05URWdOeTQzT1RjdU1EQTNJRGtnTUdNeExqSXdNeTB1TURBM0lESXVOREUySURFdU1ETTFJRE11TnpZeElESXVOemd5UXpFMkxqQXhNaUEzTGpBd05TQXhPQ0EzSURFNElEZDZJaUJtYVd4c1BTSWpNek16SWlCbWFXeHNMVzl3WVdOcGRIazlJaTR5TXpVaUlHWnBiR3d0Y25Wc1pUMGlibTl1ZW1WeWJ5SXZQand2YzNablBnPT0pO2JhY2tncm91bmQtc2l6ZToxOHB4IDdweDt3aWR0aDoxOHB4O2hlaWdodDo3cHg7bGVmdDowO3RvcDowO2ZpbGw6cmdiYSgwLDgsMTYsLjE1KX0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXJ7dG9wOjFweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvd3tib3JkZXItdG9wLWNvbG9yOiNmZmZ9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItdG9wOjdweCBzb2xpZCAjZmZmO3RvcDotN3B4fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci10b3A6N3B4IHNvbGlkIHJnYmEoMCw4LDE2LC4yKTtib3R0b206LTFweH0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXJ7dG9wOi0xcHh9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1hcnJvd3tib3JkZXItYm90dG9tLWNvbG9yOiNmZmZ9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItYm90dG9tOjdweCBzb2xpZCAjZmZmO2JvdHRvbTotN3B4fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci1ib3R0b206N3B4IHNvbGlkIHJnYmEoMCw4LDE2LC4yKTtib3R0b206LTZweH0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1yb3VuZGFycm93OmFmdGVye2xlZnQ6MXB4O3RvcDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3d7Ym9yZGVyLWxlZnQtY29sb3I6I2ZmZn0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItbGVmdDo3cHggc29saWQgI2ZmZjtsZWZ0Oi03cHh9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci1sZWZ0OjdweCBzb2xpZCByZ2JhKDAsOCwxNiwuMik7bGVmdDotNnB4fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93OmFmdGVye2xlZnQ6LTFweDt0b3A6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93e2JvcmRlci1yaWdodC1jb2xvcjojZmZmfS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItcmlnaHQ6N3B4IHNvbGlkICNmZmY7cmlnaHQ6LTdweH0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci1yaWdodDo3cHggc29saWQgcmdiYSgwLDgsMTYsLjIpO3JpZ2h0Oi02cHh9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1hcnJvdywudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LXJvdW5kYXJyb3csLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvdywudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3d7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMXB4KX0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWFycm93OmFmdGVyLC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3c6YmVmb3JlLC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3c6YWZ0ZXIsLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvdzpiZWZvcmV7bGVmdDotN3B4O2JvcmRlci1sZWZ0OjdweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6N3B4IHNvbGlkIHRyYW5zcGFyZW50fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWFycm93LC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3csLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93LC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTFweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTFweCl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3c6YWZ0ZXIsLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3c6YmVmb3JlLC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1hcnJvdzphZnRlciwudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3c6YmVmb3Jle3RvcDotN3B4O2JvcmRlci10b3A6N3B4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206N3B4IHNvbGlkIHRyYW5zcGFyZW50fQ=="
                                },
                                {
                                    "id": "presentation/tippy-tooltip.css",
                                    "css": "LmVhc3ktcmVhZGluZy10aXBweS10b29sdGlwIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgYmxhY2s7DQp9DQoNCg=="
                                }
                            ]
                        },
                        "configuration": {
                            "remoteAssetDirectory": "https://localhost:8080//components/presentation/tippy-tooltip/1.0/presentation/images"
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "increaseLineHeight",
                            "engine": {
                                "id": "line-spacing-tool",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Line spacing tool",
                            "description": "Increases or decreases line spacing",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/increaseLineHeight.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/line-spacing-tool/1.0/assets/increaseLineHeight.png",
                            "remoteBaseDirectory": "components/engines/line-spacing-tool/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "increaseLineHeight",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "line-spacing-tool/1.0/js/line-spacing-tool.js",
                                    "source": "bGV0IHpvb20gPSAwOw0KbGV0IHpvb21Jbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRGb250TWFnbmlmaWNhdGlvbigpIHsNCiAgICBpZiAoIXpvb21Jbml0KSB7DQogICAgICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KGVsLmNzcygnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgZWwuZGF0YSgnZm9udC1zaXplJywgc2l6ZSk7DQoNCg0KICAgICAgICB9KTsNCiAgICAgICAgem9vbUluaXQgPSB0cnVlOw0KICAgIH0NCg0KfQ0KDQpmdW5jdGlvbiBtYWduaWZ5Rm9udChyZXEsIGNvbmZpZyx3aWRnZXQpIHsNCiAgICBpbml0Rm9udE1hZ25pZmljYXRpb24oKTsNCiAgICB6b29tKys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdmb250LXNpemUnKTsNCiAgICAgICAgICAgIGVsLmNzcygnZm9udC1zaXplJywgTWF0aC5tYXgoc2l6ZSArIHpvb20sIDApICsgJ3B4Jyk7DQogICAgICAgIH0NCg0KICAgIH0pOw0KDQoNCn0NCg0KZnVuY3Rpb24gc2hyaW5rRm9udChyZXEsIGNvbmZpZykgew0KICAgIGluaXRGb250TWFnbmlmaWNhdGlvbigpOw0KICAgIHpvb20tLTsNCiAgICAkKCcqJykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmKCEkKHRoaXMpLnBhcmVudHMoJy5lYXN5LXJlYWRpbmctaW50ZXJmYWNlJykubGVuZ3RoKXsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IGVsLmRhdGEoJ2ZvbnQtc2l6ZScpOw0KICAgICAgICAgICAgZWwuY3NzKCdmb250LXNpemUnLCBNYXRoLm1heChzaXplICsgem9vbSwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9DQoNCg0KDQovLy9MSU5FIEhFSUdIVA0KbGV0IGxpbmVIZWlnaHQgPSAwOw0KbGV0IGxpbmVIZWlnaHRJbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRMaW5lSGVpZ2h0KCkgew0KICAgIGlmICghbGluZUhlaWdodEluaXQpIHsNCiAgICAgICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQoZWwuY3NzKCdsaW5lLWhlaWdodCcpKTsNCiAgICAgICAgICAgIGVsLmRhdGEoJ2xpbmUtaGVpZ2h0Jywgc2l6ZSk7DQoNCiAgICAgICAgfSk7DQogICAgICAgIGxpbmVIZWlnaHRJbml0ID0gdHJ1ZTsNCiAgICB9DQoNCn0NCg0KZnVuY3Rpb24gaW5jcmVhc2VMaW5lSGVpZ2h0KHJlcSwgY29uZmlnKSB7DQogICAgaW5pdExpbmVIZWlnaHQoKTsNCiAgICBsaW5lSGVpZ2h0Kys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdsaW5lLWhlaWdodCcpOw0KICAgICAgICAgICAgZWwuY3NzKCdsaW5lLWhlaWdodCcsIE1hdGgubWF4KHNpemUgKyBsaW5lSGVpZ2h0LCAwKSArICdweCcpOw0KICAgICAgICB9DQoNCiAgICB9KTsNCg0KDQp9DQoNCmZ1bmN0aW9uIGRlY3JlYXNlTGluZUhlaWdodChyZXEsIGNvbmZpZykgew0KICAgIGluaXRMaW5lSGVpZ2h0KCk7DQogICAgbGluZUhlaWdodC0tOw0KICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYoISQodGhpcykucGFyZW50cygnLmVhc3ktcmVhZGluZy1pbnRlcmZhY2UnKS5sZW5ndGgpew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gZWwuZGF0YSgnbGluZS1oZWlnaHQnKTsNCiAgICAgICAgICAgIGVsLmNzcygnbGluZS1oZWlnaHQnLCBNYXRoLm1heChzaXplICsgbGluZUhlaWdodCwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9"
                                }
                            ],
                            "contentCSS": []
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "button",
                            "name": "Simple Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/button/1.0/",
                            "implementationClass": "Button",
                            "contentScripts": [
                                {
                                    "id": "widget/button.js",
                                    "source": "Y2xhc3MgQnV0dG9uIGV4dGVuZHMgV2lkZ2V0QmFzZSB7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pew0KICAgICAgICBzdXBlcihmdW5jdGlvbkluZm8sdXNlckludGVyZmFjZSx0YXJnZXRJRCxjb25maWd1cmF0aW9uKTsNCg0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLWJ1dHRvbic+PGltZyBzcmM9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCsiJyB0aXRsZT0nIitmdW5jdGlvbkluZm8uc291cmNlLm5hbWUrIjogIitmdW5jdGlvbkluZm8uc291cmNlLmRlc2NyaXB0aW9uKyInPiA8L2J1dHRvbj4iKTsNCiAgICAgICAgdGhpcy5lbmFibGUoKTsNCiAgICB9DQoNCiAgICBlbmFibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub24oICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KICAgIH0NCg0KICAgIGRpc2FibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub2ZmKCAiY2xpY2siLHRoaXMsIHRoaXMuYnV0dG9uQ2xpY2tlZCk7DQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgbGV0IHZvaWRJbnB1dCA9IHsNCiAgICAgICAgICAgIHR5cGU6ICJWb2lkIiwNCiAgICAgICAgfTsNCiAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdChlLmRhdGEsIHZvaWRJbnB1dCwgZSk7DQogICAgfQ0KDQogICAgcmVtb3ZlKCl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZSgpOw0KICAgIH0NCn0NCg=="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1idXR0b24+aW1new0KICAgIG1heC13aWR0aDogMTAwJTsNCn0NCg0KLmVhc3ktcmVhZGluZy1idXR0b257DQogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7DQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KfQ=="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "decreaseLineHeight",
                            "engine": {
                                "id": "line-spacing-tool",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Decrease line height",
                            "description": "Decreases the line height",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/decreaseLineHeight.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/line-spacing-tool/1.0/assets/decreaseLineHeight.png",
                            "remoteBaseDirectory": "components/engines/line-spacing-tool/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "decreaseLineHeight",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "line-spacing-tool/1.0/js/line-spacing-tool.js",
                                    "source": "bGV0IHpvb20gPSAwOw0KbGV0IHpvb21Jbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRGb250TWFnbmlmaWNhdGlvbigpIHsNCiAgICBpZiAoIXpvb21Jbml0KSB7DQogICAgICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KGVsLmNzcygnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgZWwuZGF0YSgnZm9udC1zaXplJywgc2l6ZSk7DQoNCg0KICAgICAgICB9KTsNCiAgICAgICAgem9vbUluaXQgPSB0cnVlOw0KICAgIH0NCg0KfQ0KDQpmdW5jdGlvbiBtYWduaWZ5Rm9udChyZXEsIGNvbmZpZyx3aWRnZXQpIHsNCiAgICBpbml0Rm9udE1hZ25pZmljYXRpb24oKTsNCiAgICB6b29tKys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdmb250LXNpemUnKTsNCiAgICAgICAgICAgIGVsLmNzcygnZm9udC1zaXplJywgTWF0aC5tYXgoc2l6ZSArIHpvb20sIDApICsgJ3B4Jyk7DQogICAgICAgIH0NCg0KICAgIH0pOw0KDQoNCn0NCg0KZnVuY3Rpb24gc2hyaW5rRm9udChyZXEsIGNvbmZpZykgew0KICAgIGluaXRGb250TWFnbmlmaWNhdGlvbigpOw0KICAgIHpvb20tLTsNCiAgICAkKCcqJykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmKCEkKHRoaXMpLnBhcmVudHMoJy5lYXN5LXJlYWRpbmctaW50ZXJmYWNlJykubGVuZ3RoKXsNCiAgICAgICAgICAgIGxldCBlbCA9ICQodGhpcyk7DQogICAgICAgICAgICBsZXQgc2l6ZSA9IGVsLmRhdGEoJ2ZvbnQtc2l6ZScpOw0KICAgICAgICAgICAgZWwuY3NzKCdmb250LXNpemUnLCBNYXRoLm1heChzaXplICsgem9vbSwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9DQoNCg0KDQovLy9MSU5FIEhFSUdIVA0KbGV0IGxpbmVIZWlnaHQgPSAwOw0KbGV0IGxpbmVIZWlnaHRJbml0ID0gZmFsc2U7DQoNCmZ1bmN0aW9uIGluaXRMaW5lSGVpZ2h0KCkgew0KICAgIGlmICghbGluZUhlaWdodEluaXQpIHsNCiAgICAgICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQoZWwuY3NzKCdsaW5lLWhlaWdodCcpKTsNCiAgICAgICAgICAgIGVsLmRhdGEoJ2xpbmUtaGVpZ2h0Jywgc2l6ZSk7DQoNCiAgICAgICAgfSk7DQogICAgICAgIGxpbmVIZWlnaHRJbml0ID0gdHJ1ZTsNCiAgICB9DQoNCn0NCg0KZnVuY3Rpb24gaW5jcmVhc2VMaW5lSGVpZ2h0KHJlcSwgY29uZmlnKSB7DQogICAgaW5pdExpbmVIZWlnaHQoKTsNCiAgICBsaW5lSGVpZ2h0Kys7DQogICAgJCgnKicpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICBpZighJCh0aGlzKS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aCl7DQogICAgICAgICAgICBsZXQgZWwgPSAkKHRoaXMpOw0KICAgICAgICAgICAgbGV0IHNpemUgPSBlbC5kYXRhKCdsaW5lLWhlaWdodCcpOw0KICAgICAgICAgICAgZWwuY3NzKCdsaW5lLWhlaWdodCcsIE1hdGgubWF4KHNpemUgKyBsaW5lSGVpZ2h0LCAwKSArICdweCcpOw0KICAgICAgICB9DQoNCiAgICB9KTsNCg0KDQp9DQoNCmZ1bmN0aW9uIGRlY3JlYXNlTGluZUhlaWdodChyZXEsIGNvbmZpZykgew0KICAgIGluaXRMaW5lSGVpZ2h0KCk7DQogICAgbGluZUhlaWdodC0tOw0KICAgICQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYoISQodGhpcykucGFyZW50cygnLmVhc3ktcmVhZGluZy1pbnRlcmZhY2UnKS5sZW5ndGgpew0KICAgICAgICAgICAgbGV0IGVsID0gJCh0aGlzKTsNCiAgICAgICAgICAgIGxldCBzaXplID0gZWwuZGF0YSgnbGluZS1oZWlnaHQnKTsNCiAgICAgICAgICAgIGVsLmNzcygnbGluZS1oZWlnaHQnLCBNYXRoLm1heChzaXplICsgbGluZUhlaWdodCwgMCkgKyAncHgnKTsNCiAgICAgICAgfQ0KDQogICAgfSk7DQp9"
                                }
                            ],
                            "contentCSS": []
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "button",
                            "name": "Simple Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/button/1.0/",
                            "implementationClass": "Button",
                            "contentScripts": [
                                {
                                    "id": "widget/button.js",
                                    "source": "Y2xhc3MgQnV0dG9uIGV4dGVuZHMgV2lkZ2V0QmFzZSB7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pew0KICAgICAgICBzdXBlcihmdW5jdGlvbkluZm8sdXNlckludGVyZmFjZSx0YXJnZXRJRCxjb25maWd1cmF0aW9uKTsNCg0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLWJ1dHRvbic+PGltZyBzcmM9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCsiJyB0aXRsZT0nIitmdW5jdGlvbkluZm8uc291cmNlLm5hbWUrIjogIitmdW5jdGlvbkluZm8uc291cmNlLmRlc2NyaXB0aW9uKyInPiA8L2J1dHRvbj4iKTsNCiAgICAgICAgdGhpcy5lbmFibGUoKTsNCiAgICB9DQoNCiAgICBlbmFibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub24oICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KICAgIH0NCg0KICAgIGRpc2FibGUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkub2ZmKCAiY2xpY2siLHRoaXMsIHRoaXMuYnV0dG9uQ2xpY2tlZCk7DQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgbGV0IHZvaWRJbnB1dCA9IHsNCiAgICAgICAgICAgIHR5cGU6ICJWb2lkIiwNCiAgICAgICAgfTsNCiAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdChlLmRhdGEsIHZvaWRJbnB1dCwgZSk7DQogICAgfQ0KDQogICAgcmVtb3ZlKCl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZSgpOw0KICAgIH0NCn0NCg=="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1idXR0b24+aW1new0KICAgIG1heC13aWR0aDogMTAwJTsNCn0NCg0KLmVhc3ktcmVhZGluZy1idXR0b257DQogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7DQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMCAhaW1wb3J0YW50Ow0KfQ=="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "readability",
                            "engine": {
                                "id": "readability",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Readability",
                            "description": "Gets Main Content",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/readability.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/readability/1.0/assets/readability.png",
                            "remoteBaseDirectory": "components/engines/readability/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "readability",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "readability/1.0/js/Readability.js",
                                    "source": ""
                                },
                                {
                                    "id": "readability/1.0/js/Readability-readerable.js",
                                    "source": "LyogZXNsaW50LWVudiBlczY6ZmFsc2UgKi8NCi8qIGdsb2JhbHMgZXhwb3J0cyAqLw0KLyoNCiAqIENvcHlyaWdodCAoYykgMjAxMCBBcmM5MCBJbmMNCiAqDQogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICoNCiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiAqDQogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCiAqLw0KDQovKg0KICogVGhpcyBjb2RlIGlzIGhlYXZpbHkgYmFzZWQgb24gQXJjOTAncyByZWFkYWJpbGl0eS5qcyAoMS43LjEpIHNjcmlwdA0KICogYXZhaWxhYmxlIGF0OiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvYXJjOTBsYWJzLXJlYWRhYmlsaXR5DQogKi8NCg0KdmFyIFJFR0VYUFMgPSB7DQogICAgLy8gTk9URTogVGhlc2UgdHdvIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIGR1cGxpY2F0ZWQgaW4NCiAgICAvLyBSZWFkYWJpbGl0eS5qcy4gUGxlYXNlIGtlZXAgYm90aCBjb3BpZXMgaW4gc3luYy4NCiAgICB1bmxpa2VseUNhbmRpZGF0ZXM6IC8tYWQtfGFpMmh0bWx8YmFubmVyfGJyZWFkY3J1bWJzfGNvbWJ4fGNvbW1lbnR8Y29tbXVuaXR5fGNvdmVyLXdyYXB8ZGlzcXVzfGV4dHJhfGZvb3RlcnxnZHByfGhlYWRlcnxsZWdlbmRzfG1lbnV8cmVsYXRlZHxyZW1hcmt8cmVwbGllc3xyc3N8c2hvdXRib3h8c2lkZWJhcnxza3lzY3JhcGVyfHNvY2lhbHxzcG9uc29yfHN1cHBsZW1lbnRhbHxhZC1icmVha3xhZ2VnYXRlfHBhZ2luYXRpb258cGFnZXJ8cG9wdXB8eW9tLXJlbW90ZS9pLA0KICAgIG9rTWF5YmVJdHNBQ2FuZGlkYXRlOiAvYW5kfGFydGljbGV8Ym9keXxjb2x1bW58bWFpbnxzaGFkb3cvaSwNCn07DQoNCmZ1bmN0aW9uIGlzTm9kZVZpc2libGUobm9kZSkgew0KICAgIC8vIEhhdmUgdG8gbnVsbC1jaGVjayBub2RlLnN0eWxlIHRvIGRlYWwgd2l0aCBTVkcgYW5kIE1hdGhNTCBub2Rlcy4NCiAgICByZXR1cm4gKCFub2RlLnN0eWxlIHx8IG5vZGUuc3R5bGUuZGlzcGxheSAhPSAibm9uZSIpICYmICFub2RlLmhhc0F0dHJpYnV0ZSgiaGlkZGVuIikNCiAgICAgICAgJiYgKCFub2RlLmhhc0F0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iKSB8fCBub2RlLmdldEF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iKSAhPSAidHJ1ZSIpOw0KfQ0KDQovKioNCiAqIERlY2lkZXMgd2hldGhlciBvciBub3QgdGhlIGRvY3VtZW50IGlzIHJlYWRlci1hYmxlIHdpdGhvdXQgcGFyc2luZyB0aGUgd2hvbGUgdGhpbmcuDQogKg0KICogQHJldHVybiBib29sZWFuIFdoZXRoZXIgb3Igbm90IHdlIHN1c3BlY3QgUmVhZGFiaWxpdHkucGFyc2UoKSB3aWxsIHN1Y2VlZWQgYXQgcmV0dXJuaW5nIGFuIGFydGljbGUgb2JqZWN0Lg0KICovDQpmdW5jdGlvbiBpc1Byb2JhYmx5UmVhZGVyYWJsZShkb2MsIGlzVmlzaWJsZSkgew0KICAgIGlmICghaXNWaXNpYmxlKSB7DQogICAgICAgIGlzVmlzaWJsZSA9IGlzTm9kZVZpc2libGU7DQogICAgfQ0KDQogICAgdmFyIG5vZGVzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoInAsIHByZSIpOw0KDQogICAgLy8gR2V0IDxkaXY+IG5vZGVzIHdoaWNoIGhhdmUgPGJyPiBub2RlKHMpIGFuZCBhcHBlbmQgdGhlbSBpbnRvIHRoZSBgbm9kZXNgIHZhcmlhYmxlLg0KICAgIC8vIFNvbWUgYXJ0aWNsZXMnIERPTSBzdHJ1Y3R1cmVzIG1pZ2h0IGxvb2sgbGlrZQ0KICAgIC8vIDxkaXY+DQogICAgLy8gICBTZW50ZW5jZXM8YnI+DQogICAgLy8gICA8YnI+DQogICAgLy8gICBTZW50ZW5jZXM8YnI+DQogICAgLy8gPC9kaXY+DQogICAgdmFyIGJyTm9kZXMgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgiZGl2ID4gYnIiKTsNCiAgICBpZiAoYnJOb2Rlcy5sZW5ndGgpIHsNCiAgICAgICAgdmFyIHNldCA9IG5ldyBTZXQobm9kZXMpOw0KICAgICAgICBbXS5mb3JFYWNoLmNhbGwoYnJOb2RlcywgZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgc2V0LmFkZChub2RlLnBhcmVudE5vZGUpOw0KICAgICAgICB9KTsNCiAgICAgICAgbm9kZXMgPSBBcnJheS5mcm9tKHNldCk7DQogICAgfQ0KDQogICAgdmFyIHNjb3JlID0gMDsNCiAgICAvLyBUaGlzIGlzIGEgbGl0dGxlIGNoZWVreSwgd2UgdXNlIHRoZSBhY2N1bXVsYXRvciAnc2NvcmUnIHRvIGRlY2lkZSB3aGF0IHRvIHJldHVybiBmcm9tDQogICAgLy8gdGhpcyBjYWxsYmFjazoNCiAgICByZXR1cm4gW10uc29tZS5jYWxsKG5vZGVzLCBmdW5jdGlvbihub2RlKSB7DQogICAgICAgIGlmICghaXNWaXNpYmxlKG5vZGUpKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIHZhciBtYXRjaFN0cmluZyA9IG5vZGUuY2xhc3NOYW1lICsgIiAiICsgbm9kZS5pZDsNCiAgICAgICAgaWYgKFJFR0VYUFMudW5saWtlbHlDYW5kaWRhdGVzLnRlc3QobWF0Y2hTdHJpbmcpICYmDQogICAgICAgICAgICAhUkVHRVhQUy5va01heWJlSXRzQUNhbmRpZGF0ZS50ZXN0KG1hdGNoU3RyaW5nKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKG5vZGUubWF0Y2hlcygibGkgcCIpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgdGV4dENvbnRlbnRMZW5ndGggPSBub2RlLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGg7DQogICAgICAgIGlmICh0ZXh0Q29udGVudExlbmd0aCA8IDE0MCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgc2NvcmUgKz0gTWF0aC5zcXJ0KHRleHRDb250ZW50TGVuZ3RoIC0gMTQwKTsNCg0KICAgICAgICAvL09sZCB2YWx1ZSB3YXMgMjANCiAgICAgICAgaWYgKHNjb3JlID4gMzApIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9KTsNCn0="
                                },
                                {
                                    "id": "readability/1.0/js/readabilityController.js",
                                    "source": "bGV0IGVyUmVhZGFiaWxpdHlBY3RpdmUgPSBmYWxzZTsNCg0KZnVuY3Rpb24gcmVhZGFiaWxpdHkocmVxLCBjb25maWcsd2lkZ2V0KSB7DQoNCiAgICBjb25maWcgPSB7DQogICAgICAgIGNvbnRlbnRXaWR0aDogNTAsDQogICAgICAgIGZvbnRTaXplOiAyNCwNCiAgICAgICAgbGluZVNwYWNpbmc6IDIuNSwNCiAgICB9Ow0KDQogICAgaWYoZXJSZWFkYWJpbGl0eUFjdGl2ZSl7DQoNCiAgICAgICAgJCgiLmVyLXJlYWRhYmlsaXR5LWhpZGRlbiIpLnJlbW92ZUNsYXNzKCJlci1yZWFkYWJpbGl0eS1oaWRkZW4iKTsNCiAgICAgICAgJCgiI2VyLXJlYWRhYmlsaXR5LWNvbnRhaW5lciIpLnJlbW92ZSgpOw0KICAgICAgICAkKCJib2R5IikucmVtb3ZlQ2xhc3MoImVyLXJlYWRhYmlsaXR5LWJvZHkiKTsNCiAgICB9ZWxzZXsNCiAgICAgICAgbGV0IHNlbnRlbmNlVG9rZW5pemVyID0gbmV3IFNlbnRlbmNlVG9rZW5pemVyKCk7DQogICAgICAgIGlmKGlzUHJvYmFibHlSZWFkZXJhYmxlKGRvY3VtZW50KSl7DQoNCiAgICAgICAgICAgIGxldCBvcHRpb25zID0gew0KICAgICAgICAgICAgICAgICJuZXdsaW5lX2JvdW5kYXJpZXMiIDogZmFsc2UsDQogICAgICAgICAgICAgICAgImh0bWxfYm91bmRhcmllcyIgICAgOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAic2FuaXRpemUiICAgICAgICAgICA6IGZhbHNlLA0KICAgICAgICAgICAgICAgICJhbGxvd2VkX3RhZ3MiICAgICAgIDogZmFsc2UsDQogICAgICAgICAgICAgICAgInByZXNlcnZlX3doaXRlc3BhY2UiIDogdHJ1ZSwNCiAgICAgICAgICAgICAgICAiYWJicmV2aWF0aW9ucyIgICAgICA6IG51bGwNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICBsZXQgZG9jdW1lbnRDbG9uZSA9IGRvY3VtZW50LmNsb25lTm9kZSh0cnVlKTsNCiAgICAgICAgICAgIGxldCBhcnRpY2xlID0gbmV3IFJlYWRhYmlsaXR5KGRvY3VtZW50Q2xvbmUpLnBhcnNlKCk7DQoNCg0KICAgICAgICAgICAgbGV0IHRpdGxlID0gIjxoMT4iK2FydGljbGUudGl0bGUrIjwvaDE+IjsNCiAgICAgICAgICAgIGxldCByZWFkYWJpbGl0eUNvbnRlbnQgPSAkLnBhcnNlSFRNTCh0aXRsZSthcnRpY2xlLmNvbnRlbnQpOw0KDQogICAgICAgICAgICBsZXQgY29udGFpbmVyID0gJC5wYXJzZUhUTUwoIjxkaXYgY2xhc3M9J2VyLXJlYWRhYmlsaXR5LWJhY2tncm91bmQnPiIgKw0KICAgICAgICAgICAgICAgICIgICA8ZGl2IGNsYXNzPSdlci1yZWFkYWJpbGl0eS1jb250YWluZXInIGlkPSdlci1yZWFkYWJpbGl0eS1jb250YWluZXInPiIgKw0KICAgICAgICAgICAgICAgICIgICA8L2Rpdj4iICsNCiAgICAgICAgICAgICAgICAiPC9kaXY+Iik7DQogICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKGNvbnRhaW5lcik7DQogICAgICAgICAgICAkKCcjZXItcmVhZGFiaWxpdHktY29udGFpbmVyJykuYXBwZW5kKHJlYWRhYmlsaXR5Q29udGVudCk7DQoNCg0KICAgICAgICAgICAgJCgnI2VyLXJlYWRhYmlsaXR5LWNvbnRhaW5lciAqOmVtcHR5JyApLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmKCQodGhpcykuaXMoImltZyIpKXsNCg0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQoNCiAgICAgICAgICAgIGxldCB3aGl0ZWxpc3QgPSBbInNyYyIsImFsdCIsInRpdGxlIiwiaHJlZiIsImNvbHNwYW4iLCJyb3dzcGFuIiwic2NvcGUiLCJsYW5nIl07DQogICAgICAgICAgICAkKCcjZXItcmVhZGFiaWxpdHktY29udGFpbmVyIConKS5lYWNoKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOw0KICAgICAgICAgICAgICAgIHZhciBpID0gYXR0cmlidXRlcy5sZW5ndGg7DQogICAgICAgICAgICAgICAgd2hpbGUoIGktLSApIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBhdHRyaWJ1dGVzW2ldOw0KICAgICAgICAgICAgICAgICAgICBpZiggJC5pbkFycmF5KGF0dHIubmFtZSx3aGl0ZWxpc3QpID09IC0xICkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCgnI2VyLXJlYWRhYmlsaXR5LWNvbnRhaW5lciBwJykuZWFjaChmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgICAgICAgICBsZXQgaHRtbCA9ICQodGhpcykuaHRtbCgpOw0KICAgICAgICAgICAgICAgIGxldCBzZW50ZW5jZXMgPSBlcl90b2tlbml6ZXIuc2VudGVuY2VzKGh0bWwsb3B0aW9ucyk7DQogICAgICAgICAgICAgICAgbGV0IHNlbnRlbmNlc1dpdGhCUiA9ICIiOw0KICAgICAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpIDwgc2VudGVuY2VzLmxlbmd0aDsgaSsrKXsNCg0KICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZXNXaXRoQlIrPXNlbnRlbmNlc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgaWYoaSA8IHNlbnRlbmNlcy5sZW5ndGgtMSl7DQogICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZXNXaXRoQlIrPSI8YnI+IjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkKHRoaXMpLmh0bWwoc2VudGVuY2VzV2l0aEJSKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgJCgnYm9keScpLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgICAgICAgICBpZigkKHRoaXMpLmhhc0NsYXNzKCJlYXN5LXJlYWRpbmctaW50ZXJmYWNlIikgfHwgJCh0aGlzKS5oYXNDbGFzcygiZXItcmVhZGFiaWxpdHktYmFja2dyb3VuZCIpKXsNCg0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdlci1yZWFkYWJpbGl0eS1oaWRkZW4nKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCgiYm9keSIpLmFkZENsYXNzKCJlci1yZWFkYWJpbGl0eS1ib2R5Iik7DQogICAgICAgICAgICAkKCcjZXItcmVhZGFiaWxpdHktY29udGFpbmVyIConKS5hZGRDbGFzcygiZXItcmVhZGFiaWxpdHktc3R5bGUtcmV2ZXJ0Iik7DQoNCiAgICAgICAgICAgICQoIi5lci1yZWFkYWJpbGl0eS1jb250YWluZXIiKS5jc3MoIm1heC13aWR0aCIsIGNvbmZpZy5jb250ZW50V2lkdGgrIiUiKTsNCiAgICAgICAgICAgICQoIi5lci1yZWFkYWJpbGl0eS1jb250YWluZXIiKS5jc3MoImZvbnQtc2l6ZSIsIGNvbmZpZy5mb250U2l6ZSk7DQogICAgICAgICAgICAkKCIuZXItcmVhZGFiaWxpdHktY29udGFpbmVyIikuY3NzKCJsaW5lLWhlaWdodCIsIGNvbmZpZy5saW5lU3BhY2luZyk7DQoNCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgICBhbGVydE1hbmFnZXIuc2hvd0Vycm9yQWxlcnQoIlNvcnJ5IEkgY291bGQgbm90IGRldGVjdCB0aGUgY29udGVudCBvZiB0aGUgcGFnZS4iKTsNCg0KICAgICAgICAgICAgd2lkZ2V0LnJlcXVlc3RGYWlsZWQocmVxLGNvbmZpZyk7DQogICAgICAgIH0NCg0KDQogICAgfQ0KDQogICAgZXJSZWFkYWJpbGl0eUFjdGl2ZSA9ICFlclJlYWRhYmlsaXR5QWN0aXZlOw0KDQoNCg0KDQoNCn0="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "readability/1.0/css/style.css",
                                    "css": "DQouZXItcmVhZGFiaWxpdHktYmFja2dyb3VuZHsNCiAgICBhbGw6IHJldmVydDsNCg0KfQ0KDQouZXItcmVhZGFiaWxpdHktc3R5bGUtcmV2ZXJ0ew0KICAgIGFsbDogcmV2ZXJ0Ow0KfQ0KDQouZXItcmVhZGFiaWxpdHktYm9keXsNCiAgICBhbGw6cmV2ZXJ0ICFpbXBvcnRhbnQ7DQp9DQoNCi5lci1yZWFkYWJpbGl0eS1oaWRkZW57DQogICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50Ow0KfQ0KDQouZXItcmVhZGFiaWxpdHktY29udGFpbmVyIHsNCiAgICBtYXgtd2lkdGg6IDQwJTsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsNCiAgICBmb250LXNpemU6IDI0cHg7DQogICAgbGluZS1oZWlnaHQ6IDIuMmVtOw0KICAgIGhlaWdodDogYXV0bzsNCn0NCg0KDQouZXItcmVhZGFiaWxpdHktY29udGFpbmVyIHRhYmxlIHsNCiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOw0KfQ0KDQouZXItcmVhZGFiaWxpdHktY29udGFpbmVyIHRhYmxlLCAuZXItcmVhZGFiaWxpdHktY29udGFpbmVyIHRoLC5lci1yZWFkYWJpbGl0eS1jb250YWluZXIgdGQgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOw0KfQ0KDQouZXItcmVhZGFiaWxpdHktY29udGFpbmVyIGJyew0KDQogICAgbWFyZ2luLWJvdHRvbTogMjBweDsNCn0NCg0KLmVyLXJlYWRhYmlsaXR5LWNvbnRhaW5lciBwew0KDQogICAgbWFyZ2luLWJvdHRvbTogMzBweDsNCn0="
                                }
                            ]
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "two-state-button",
                            "name": "Two state button",
                            "description": "A simple two state button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/two-state-button/1.0/",
                            "implementationClass": "TwoStateButton",
                            "contentScripts": [
                                {
                                    "id": "widget/two-state-button.js",
                                    "source": "Y2xhc3MgVHdvU3RhdGVCdXR0b24gZXh0ZW5kcyBXaWRnZXRCYXNlew0KDQogICAgY29uc3RydWN0b3IoZnVuY3Rpb25JbmZvLCB1c2VySW50ZXJmYWNlLHRhcmdldElELCBjb25maWd1cmF0aW9uKXsNCiAgICAgICAgc3VwZXIoZnVuY3Rpb25JbmZvLHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsY29uZmlndXJhdGlvbik7DQoNCiAgICAgICAgY29uc29sZS5sb2codGhpcy53aWRnZXRJRCApOw0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLXR3by1zdGF0ZS1idXR0b24nPjxpbWcgc3JjPSciK2Z1bmN0aW9uSW5mby5zb3VyY2UuZGVmYXVsdEljb25VUkwrIicgdGl0bGU9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5uYW1lKyI6ICIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZXNjcmlwdGlvbisiJz4gPC9idXR0b24+Iik7DQogICAgICAgIHRoaXMuZW5hYmxlKCk7DQogICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOw0KICAgIH0NCg0KICAgIGVuYWJsZSgpew0KICAgICAgICAkKCIjIit0aGlzLndpZGdldElEKS5vbiggImNsaWNrIix0aGlzLCB0aGlzLmJ1dHRvbkNsaWNrZWQpOw0KDQogICAgfQ0KDQogICAgZGlzYWJsZSgpew0KICAgICAgICAkKCIjIit0aGlzLndpZGdldElEKS5vZmYoICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KDQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgZS5kYXRhLnByZXNzZWQgPSAhZS5kYXRhLnByZXNzZWQ7DQogICAgICAgICQoIiMiK2UuZGF0YS53aWRnZXRJRCkudG9nZ2xlQ2xhc3MoICJlci1idXR0b24tYWN0aXZlIiApOw0KICAgICAgICBsZXQgdm9pZElucHV0ID0gew0KICAgICAgICAgICAgdHlwZTogIlZvaWQiLA0KICAgICAgICB9Ow0KICAgICAgICByZXF1ZXN0TWFuYWdlci5jcmVhdGVSZXF1ZXN0KGUuZGF0YSwgdm9pZElucHV0LCBlKTsNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkucmVtb3ZlKCk7DQoNCg0KICAgIH0NCg0KICAgIHJlcXVlc3RGYWlsZWQocmVxLGNvbmZpZyl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZUNsYXNzKCAiZXItYnV0dG9uLWFjdGl2ZSIgKTsNCiAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7DQogICAgfQ0KfQ0K"
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/two-state-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy10d28tc3RhdGUtYnV0dG9uPmltZ3sNCiAgICBtYXgtd2lkdGg6IDEwMCU7DQp9DQoNCi5lYXN5LXJlYWRpbmctdHdvLXN0YXRlLWJ1dHRvbnsNCiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDsNCiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQp9DQo="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "screen-ruler",
                            "engine": {
                                "id": "screen-ruler",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Screen ruler",
                            "description": "Creates a screenruler for better reading",
                            "inputTypes": [
                                {
                                    "inputType": "VoidIOType"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "VoidIOType"
                                }
                            ],
                            "defaultIcon": "assets/screen-ruler.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/screen-ruler/1.0/assets/screen-ruler.png",
                            "remoteBaseDirectory": "components/engines/screen-ruler/1.0/",
                            "type": "LocalFunction",
                            "entryPoint": "easyReadingScreenRuler",
                            "remoteAssetDirectory": "",
                            "contentScripts": [
                                {
                                    "id": "screen-ruler/1.0/js/screen-ruler.js",
                                    "source": "bGV0IGVhc3lSZWFkaW5nU2NyZWVuUnVsZXJWaXNpYmxlID0gZmFsc2U7DQpsZXQgZWFzeVJlYWRpbmdTY3JlZW5SdWxlckN1cnJlbnRDbGllbnRZID0gMDsNCg0KZnVuY3Rpb24gZWFzeVJlYWRpbmdTY3JlZW5SdWxlcihyZXEsIGNvbmZpZyx3aWRnZXQpIHsNCg0KICAgIGlmKGVhc3lSZWFkaW5nU2NyZWVuUnVsZXJWaXNpYmxlKXsNCiAgICAgICAgaGlkZUVhc3lSZWFkaW5nU2NyZWVuUnVsZXIoKTsNCiAgICB9ZWxzZXsNCiAgICAgICAgc2hvd0Vhc3lSZWFkaW5nU2NyZWVuUnVsZXIoKTsNCiAgICB9DQogICAgZWFzeVJlYWRpbmdTY3JlZW5SdWxlclZpc2libGUgPSAhZWFzeVJlYWRpbmdTY3JlZW5SdWxlclZpc2libGU7DQp9DQoNCmxldCBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXsNCiAgICBpZihlYXN5UmVhZGluZ1NjcmVlblJ1bGVyVmlzaWJsZSl7DQogICAgICAgICQoIiNvdmVybGF5LXRvcCIpLmNzcygiYm90dG9tIiwgJCh3aW5kb3cpLmhlaWdodCgpIC1ldmVudC5jbGllbnRZICsyMCk7DQogICAgICAgICQoIiNvdmVybGF5LWJvdHRvbSIpLmNzcygidG9wIiwgZXZlbnQuY2xpZW50WSArMjApOw0KICAgIH0NCg0KICAgIGVhc3lSZWFkaW5nU2NyZWVuUnVsZXJDdXJyZW50Q2xpZW50WSA9IGV2ZW50LmNsaWVudFk7DQp9Ow0KDQpmdW5jdGlvbiBzaG93RWFzeVJlYWRpbmdTY3JlZW5SdWxlcigpIHsNCg0KICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9Im92ZXJsYXktdG9wIj48L2Rpdj48ZGl2IGlkPSJvdmVybGF5LWJvdHRvbSI+PC9kaXY+Jyk7DQogICAgJCgiI292ZXJsYXktdG9wIikuY3NzKCJib3R0b20iLCAkKHdpbmRvdykuaGVpZ2h0KCkgLWVhc3lSZWFkaW5nU2NyZWVuUnVsZXJDdXJyZW50Q2xpZW50WSArMjApOw0KICAgICQoIiNvdmVybGF5LWJvdHRvbSIpLmNzcygidG9wIixlYXN5UmVhZGluZ1NjcmVlblJ1bGVyQ3VycmVudENsaWVudFkgKzIwKTsNCn0NCg0KZnVuY3Rpb24gaGlkZUVhc3lSZWFkaW5nU2NyZWVuUnVsZXIoKXsNCiAgICAkKCIjb3ZlcmxheS10b3AiKS5yZW1vdmUoKTsNCiAgICAkKCIjb3ZlcmxheS1ib3R0b20iKS5yZW1vdmUoKTsNCn0NCmxldCBlYXN5UmVhZGluZ1NjcmVlblJ1bGVyRG9jdW1lbnRSZWFkeSA9ICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAkKGRvY3VtZW50KS5tb3VzZW1vdmUobGlzdGVuZXIpOw0KfSk7"
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "screen-ruler/1.0/css/screen-ruler.css",
                                    "css": "I292ZXJsYXktdG9wLCNvdmVybGF5LWJvdHRvbSB7DQogICAgcG9zaXRpb246IGZpeGVkICFpbXBvcnRhbnQ7DQogICAgdG9wOiAwOw0KICAgIGxlZnQ6IDAgIWltcG9ydGFudDsNCiAgICByaWdodDogMCAhaW1wb3J0YW50Ow0KICAgIGJvdHRvbTogMDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNSkgIWltcG9ydGFudDsNCiAgICB6LWluZGV4OiA5OTk5Ow0KICAgIGRpc3BsYXk6IGJsb2NrOw0KfQ=="
                                }
                            ]
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "two-state-button",
                            "name": "Two state button",
                            "description": "A simple two state button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/two-state-button/1.0/",
                            "implementationClass": "TwoStateButton",
                            "contentScripts": [
                                {
                                    "id": "widget/two-state-button.js",
                                    "source": "Y2xhc3MgVHdvU3RhdGVCdXR0b24gZXh0ZW5kcyBXaWRnZXRCYXNlew0KDQogICAgY29uc3RydWN0b3IoZnVuY3Rpb25JbmZvLCB1c2VySW50ZXJmYWNlLHRhcmdldElELCBjb25maWd1cmF0aW9uKXsNCiAgICAgICAgc3VwZXIoZnVuY3Rpb25JbmZvLHVzZXJJbnRlcmZhY2UsdGFyZ2V0SUQsY29uZmlndXJhdGlvbik7DQoNCiAgICAgICAgY29uc29sZS5sb2codGhpcy53aWRnZXRJRCApOw0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX2J1dHRvbl8nK3RoaXMud2lkZ2V0SUQ7DQogICAgICAgICQoIiMiK3RhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIrdGhpcy53aWRnZXRJRCsiJyBjbGFzcz0nZWFzeS1yZWFkaW5nLXR3by1zdGF0ZS1idXR0b24nPjxpbWcgc3JjPSciK2Z1bmN0aW9uSW5mby5zb3VyY2UuZGVmYXVsdEljb25VUkwrIicgdGl0bGU9JyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5uYW1lKyI6ICIrZnVuY3Rpb25JbmZvLnNvdXJjZS5kZXNjcmlwdGlvbisiJz4gPC9idXR0b24+Iik7DQogICAgICAgIHRoaXMuZW5hYmxlKCk7DQogICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOw0KICAgIH0NCg0KICAgIGVuYWJsZSgpew0KICAgICAgICAkKCIjIit0aGlzLndpZGdldElEKS5vbiggImNsaWNrIix0aGlzLCB0aGlzLmJ1dHRvbkNsaWNrZWQpOw0KDQogICAgfQ0KDQogICAgZGlzYWJsZSgpew0KICAgICAgICAkKCIjIit0aGlzLndpZGdldElEKS5vZmYoICJjbGljayIsdGhpcywgdGhpcy5idXR0b25DbGlja2VkKTsNCg0KDQogICAgfQ0KDQogICAgYnV0dG9uQ2xpY2tlZChlKXsNCiAgICAgICAgZS5kYXRhLnByZXNzZWQgPSAhZS5kYXRhLnByZXNzZWQ7DQogICAgICAgICQoIiMiK2UuZGF0YS53aWRnZXRJRCkudG9nZ2xlQ2xhc3MoICJlci1idXR0b24tYWN0aXZlIiApOw0KICAgICAgICBsZXQgdm9pZElucHV0ID0gew0KICAgICAgICAgICAgdHlwZTogIlZvaWQiLA0KICAgICAgICB9Ow0KICAgICAgICByZXF1ZXN0TWFuYWdlci5jcmVhdGVSZXF1ZXN0KGUuZGF0YSwgdm9pZElucHV0LCBlKTsNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgJCgiIyIrdGhpcy53aWRnZXRJRCkucmVtb3ZlKCk7DQoNCg0KICAgIH0NCg0KICAgIHJlcXVlc3RGYWlsZWQocmVxLGNvbmZpZyl7DQogICAgICAgICQoIiMiK3RoaXMud2lkZ2V0SUQpLnJlbW92ZUNsYXNzKCAiZXItYnV0dG9uLWFjdGl2ZSIgKTsNCiAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7DQogICAgfQ0KfQ0K"
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/two-state-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy10d28tc3RhdGUtYnV0dG9uPmltZ3sNCiAgICBtYXgtd2lkdGg6IDEwMCU7DQp9DQoNCi5lYXN5LXJlYWRpbmctdHdvLXN0YXRlLWJ1dHRvbnsNCiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDsNCiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQp9DQo="
                                }
                            ]
                        }
                    }
                },
                {
                    "function": {
                        "source": {
                            "id": "wiktionary_dict",
                            "engine": {
                                "id": "word-definition",
                                "version": "1.0",
                                "debugMode": false
                            },
                            "debugMode": false,
                            "name": "Wiktionary: Word Definition",
                            "description": "Definition of a word",
                            "inputTypes": [
                                {
                                    "inputType": "Word",
                                    "name": "Input word",
                                    "description": "Word to find a definition"
                                }
                            ],
                            "outputTypes": [
                                {
                                    "outputType": "Word",
                                    "name": "Definition",
                                    "description": "Definition of the word"
                                }
                            ],
                            "defaultIcon": "assets/word-definition.png",
                            "defaultIconURL": "https://localhost:8080/components/engines/word-definition/1.0/assets/word-definition.png",
                            "remoteBaseDirectory": "components/engines/word-definition/1.0/",
                            "type": "RemoteFunction",
                            "entryPoint": "findDefinitionForWord"
                        }
                    },
                    "widget": {
                        "source": {
                            "id": "single-choice-button",
                            "name": "Single Choice Button",
                            "description": "A simple button.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "",
                            "remoteBaseDirectory": "components/widget/single-choice-button/1.0/",
                            "implementationClass": "SingleChoiceButton",
                            "contentScripts": [
                                {
                                    "id": "widget/single-choice-button.js",
                                    "source": "Y2xhc3MgU2luZ2xlQ2hvaWNlQnV0dG9uIGV4dGVuZHMgV2lkZ2V0QmFzZSB7DQoNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsIHRhcmdldElELCBjb25maWd1cmF0aW9uKSB7DQogICAgICAgIHN1cGVyKGZ1bmN0aW9uSW5mbywgdXNlckludGVyZmFjZSwgdGFyZ2V0SUQsIGNvbmZpZ3VyYXRpb24pOw0KDQogICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7DQogICAgICAgIHRoaXMub3V0cHV0VHlwZUNsYXNzID0gbnVsbDsNCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IGZhbHNlOw0KICAgICAgICB0aGlzLndpZGdldElEID0gJ2VyX3NpbmdsZV9jaG9pY2VfYnV0dG9uXycgKyB0aGlzLndpZGdldElEOw0KICAgICAgICAkKCIjIiArIHRhcmdldElEKS5hcHBlbmQoIjxidXR0b24gaWQ9JyIgKyB0aGlzLndpZGdldElEICsgIicgY2xhc3M9J2Vhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlIGVhc3ktcmVhZGluZy1idXR0b24nPjxpbWcgc3JjPSciICsgZnVuY3Rpb25JbmZvLnNvdXJjZS5kZWZhdWx0SWNvblVSTCArICInIHRpdGxlPSciICsgZnVuY3Rpb25JbmZvLnNvdXJjZS5uYW1lICsgIjogIiArIGZ1bmN0aW9uSW5mby5zb3VyY2UuZGVzY3JpcHRpb24gKyAiJz4gPC9idXR0b24+Iik7DQoNCiAgICAgLy8gICAkKCIjIiArIHRoaXMud2lkZ2V0SUQpLmNzcygnY3NzVGV4dCcsICdiYWNrZ3JvdW5kLWNvbG9yOiAnK2NvbmZpZ3VyYXRpb24uYmFja2dyb3VuZENvbG9yQnV0dG9uQWN0aXZlKycgIWltcG9ydGFudCcpOw0KICAgICAgICB0aGlzLmVuYWJsZSgpOw0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFdpZGdldEFjdGl2YXRlZExpc3RlbmVycyh0aGlzKTsNCiAgICB9DQoNCg0KICAgIGVuYWJsZSgpIHsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5vbigiY2xpY2siLCB0aGlzLCB0aGlzLnNpbmdsZUNob2ljZUJ1dHRvbkNsaWNrZWQpOw0KDQogICAgfQ0KDQogICAgZGlzYWJsZSgpIHsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5vZmYoImNsaWNrIiwgdGhpcywgdGhpcy5zaW5nbGVDaG9pY2VCdXR0b25DbGlja2VkKTsNCiAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci5yZW1vdmVXaWRnZXRBY3RpdmF0ZWRMaXN0ZW5lcnModGhpcyk7DQoNCiAgICB9DQoNCiAgICBhY3RpdmF0ZVdpZGdldCgpew0KICAgICAgICBjb25zb2xlLmxvZygiU2luZ2xlIENob2ljZSBCdXR0b24gQWN0aXZlIik7DQogICAgICAgICQoIiMiICsgdGhpcy53aWRnZXRJRCkuYWRkQ2xhc3MoImVhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlLWFjdGl2ZSIpOw0KICAgICAgICBpZih0aGlzLmZ1bmN0aW9uSW5mby5zb3VyY2UuaW5wdXRUeXBlcy5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXNbMF0uaW5wdXRUeXBlKSB7DQoNCiAgICAgICAgICAgICAgICBjYXNlIFBhcmFncmFwaC5jbGFzc05hbWU6DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIuYWRkUGFyYWdyYXBoQ2xpY2tMaXN0ZW5lcih0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgICAgICBjYXNlIFdvcmQuY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLmFkZFdvcmRDbGlja0xpc3RlbmVyKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgQW5ub3RhdGVkUGFyYWdyYXBoLmNsYXNzTmFtZToNCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci5hZGRQYXJhZ3JhcGhDbGlja0xpc3RlbmVyKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMub3V0cHV0VHlwZUNsYXNzID0gdGhpcy5mdW5jdGlvbkluZm8uc291cmNlLmlucHV0VHlwZXNbMF0uaW5wdXRUeXBlOw0KICAgICAgICB9DQoNCiAgICAgICAgZ2xvYmFsRXZlbnRMaXN0ZW5lci53aWRnZXRBY3RpdmF0ZWQodGhpcyk7DQoNCiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlOw0KDQogICAgfQ0KDQogICAgZGVhY3RpdmF0ZVdpZGdldChtYW51YWw9dHJ1ZSl7DQogICAgICAgIHN1cGVyLmRlYWN0aXZhdGVXaWRnZXQobWFudWFsKTsNCiAgICAgICAgY29uc29sZS5sb2coIlNpbmdsZSBDaG9pY2UgQnV0dG9uIE5vdCBBY3RpdmUiKTsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5yZW1vdmVDbGFzcygiZWFzeS1yZWFkaW5nLXNpbmdsZS1jaG9pY2UtYWN0aXZlIik7DQoNCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZ1bmN0aW9uSW5mby5zb3VyY2UuaW5wdXRUeXBlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZ1bmN0aW9uSW5mby5zb3VyY2UuaW5wdXRUeXBlc1tpXS5pbnB1dFR5cGUpIHsNCiAgICAgICAgICAgICAgICBjYXNlIFdvcmQuY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnJlbW92ZVdvcmRDbGlja0xpc3RlbmVyKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIFBhcmFncmFwaC5jbGFzc05hbWU6DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50TGlzdGVuZXIucmVtb3ZlUGFyYWdyYXBoQ2xpY2tMaXN0ZW5lcih0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSBBbm5vdGF0ZWRQYXJhZ3JhcGguY2xhc3NOYW1lOg0KICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnJlbW92ZVBhcmFncmFwaENsaWNrTGlzdGVuZXIodGhpcyk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQoNCg0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOw0KICAgIH0NCg0KICAgIHNpbmdsZUNob2ljZUJ1dHRvbkNsaWNrZWQoZSkgew0KICAgICAgICBpZihlLmRhdGEuYWN0aXZlKXsNCiAgICAgICAgICAgIGUuZGF0YS5kZWFjdGl2YXRlV2lkZ2V0KHRydWUpOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIGUuZGF0YS5hY3RpdmF0ZVdpZGdldCgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgb25Xb3JkQ2xpY2sod29yZCwgZSkgew0KICAgICAgICBpZih0aGlzLnJlcXVlc3RJblByb2dyZXNzKXsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gdHJ1ZTsNCiAgICAgICAgZWFzeVJlYWRpbmcuYnVzeUFuaW1hdGlvbi5zdGFydEFuaW1hdGlvbigpOw0KICAgICAgICBpZighdGhpcy5maWx0ZXJVc2VySW50ZXJmYWNlRWxlbWVudHMod29yZCkpew0KICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdCh0aGlzLCB3b3JkLCBlKTsNCiAgICAgICAgfQ0KDQogICAgfQ0KDQogICAgb25QYXJhZ3JhcGhDTGljayhwYXJhZ3JhcGgsIGUpIHsNCiAgICAgICAgaWYodGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyl7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IHRydWU7DQogICAgICAgIGVhc3lSZWFkaW5nLmJ1c3lBbmltYXRpb24uc3RhcnRBbmltYXRpb24oKTsNCiAgICAgICAgaWYoIXRoaXMuZmlsdGVyVXNlckludGVyZmFjZUVsZW1lbnRzKHBhcmFncmFwaCkpew0KICAgICAgICAgICAgaWYodGhpcy5vdXRwdXRUeXBlQ2xhc3MgPT09IFBhcmFncmFwaC5jbGFzc05hbWUpew0KICAgICAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyLmNyZWF0ZVJlcXVlc3QodGhpcywgcGFyYWdyYXBoLCBlKTsNCiAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMub3V0cHV0VHlwZUNsYXNzID09PSBBbm5vdGF0ZWRQYXJhZ3JhcGguY2xhc3NOYW1lKXsNCiAgICAgICAgICAgICAgICBwYXJhZ3JhcGgudHlwZSA9IEFubm90YXRlZFBhcmFncmFwaC5jbGFzc05hbWU7DQogICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuY3JlYXRlUmVxdWVzdCh0aGlzLCBwYXJhZ3JhcGgsIGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgZmlsdGVyVXNlckludGVyZmFjZUVsZW1lbnRzKGVsZW1lbnQpew0KICAgICAgICByZXR1cm4gJChlbGVtZW50KS5wYXJlbnRzKCcuZWFzeS1yZWFkaW5nLWludGVyZmFjZScpLmxlbmd0aDsNCiAgICB9DQoNCg0KICAgIHJlcXVlc3RGaW5pc2hlZCgpew0KICAgICAgICBzdXBlci5yZXF1ZXN0RmluaXNoZWQoKTsNCiAgICAgICAgZWFzeVJlYWRpbmcuYnVzeUFuaW1hdGlvbi5zdG9wQW5pbWF0aW9uKCk7DQogICAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSBmYWxzZTsNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgaWYodGhpcy5hY3RpdmUpew0KICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlV2lkZ2V0KGZhbHNlKTsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLmRpc2FibGUoKTsNCiAgICAgICAgJCgiIyIgKyB0aGlzLndpZGdldElEKS5yZW1vdmUoKTsNCg0KICAgIH0NCn0="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "widget/single-choice-button.css",
                                    "css": "LmVhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlPmltZ3sNCiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDsNCn0NCg0KLmVhc3ktcmVhZGluZy1zaW5nbGUtY2hvaWNlLWFjdGl2ZXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNjc5ICFpbXBvcnRhbnQ7DQp9DQoNCi5lYXN5LXJlYWRpbmctc2luZ2xlLWNob2ljZXsNCiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDsNCiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7DQp9"
                                }
                            ]
                        }
                    },
                    "presentation": {
                        "source": {
                            "id": "tippy-tooltip",
                            "name": "TippyTooltip",
                            "description": "Renders the result within a tooltip based on tippy.",
                            "version": "1.0",
                            "versionDescription": "Initial Version",
                            "debugMode": false,
                            "remoteAssetDirectory": "/components/presentation/tippy-tooltip/1.0/presentation/images",
                            "remoteBaseDirectory": "components/presentation/tippy-tooltip/1.0/",
                            "implementationClass": "TippyTooltip",
                            "contentScripts": [
                                {
                                    "id": "presentation/popper.min.js",
                                    "source": ""
                                },
                                {
                                    "id": "presentation/tippy.min.js",
                                    "source": ""
                                },
                                {
                                    "id": "presentation/tippy-tooltip.js",
                                    "source": "Y2xhc3MgVGlwcHlUb29sdGlwIGV4dGVuZHMgUHJlc2VudGF0aW9uIHsNCiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbkluZm8sIHVzZXJJbnRlcmZhY2UsIGNvbmZpZ3VyYXRpb24pIHsNCiAgICAgICAgc3VwZXIoZnVuY3Rpb25JbmZvLCB1c2VySW50ZXJmYWNlLCBjb25maWd1cmF0aW9uKTsNCg0KICAgIH0NCg0KICAgIHJlbmRlclJlc3VsdChyZXF1ZXN0LCByZXN1bHQpIHsNCg0KICAgICAgICBsZXQgaW9SZXMgPSBpb1R5cGVVdGlscy50b0lPVHlwZUluc3RhbmNlKHJlc3VsdC5yZXN1bHQpOw0KICAgICAgICBsZXQgcmVzdWx0SFRNTCA9IGlvUmVzLnRvSHRtbCgpOw0KICAgICAgICBsZXQgcmVxdWVzdElEID0gdGhpcy5jcmVhdGVSZXF1ZXN0SWQoKTsNCg0KICAgICAgICBpZiAocmVxdWVzdC5pbnB1dFR5cGUgaW5zdGFuY2VvZiBXb3JkKSB7DQoNCg0KDQogICAgICAgICAgICAvL2xldCBjbGFzc05hbWUgPSAiZWFzeS1yZWFkaW5nLXRpcHB5LXRvb2x0aXAtIit0aGlzLnJlcXVlc3RDb3VudGVyOw0KICAgICAgICAgICAgLy9wYWdlVXRpbHMud3JhcFdvcmRJbihyZXF1ZXN0LmlucHV0LCAic3BhbiIsdGhpcy5jcmVhdGVSZXF1ZXN0SWQoKSwiZWFzeS1yZWFkaW5nLXJlc3VsdCBlYXN5LXJlYWRpbmctdGlwcHktdG9vbHRpcCAiK2NsYXNzTmFtZSk7DQoNCiAgICAgICAgICAgIGxldCBzcGFuID0gcGFnZVV0aWxzLndyYXBXb3JkSW4ocmVxdWVzdC5pbnB1dCwgInNwYW4iLCByZXF1ZXN0SUQrIiBlYXN5LXJlYWRpbmctdGlwcHktdG9vbHRpcCAiICsgdGhpcy5nZXRSZXN1bHRDbGFzcygpLCB0aGlzLmdldFByZXNlbnRhdGlvbkFuZFJlcXVlc3RJZGVudGlmaWVyKHJlcXVlc3RJRCkpOw0KDQogICAgICAgICAgICBpZiAoaW9SZXMgaW5zdGFuY2VvZiBJbWFnZUlPVHlwZSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IElOSVRJQUxfQ09OVEVOVCA9ICdMb2FkaW5nLi4uJzsNCg0KICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gew0KICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgY2FuRmV0Y2g6IHRydWUNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgdGlwcHkoIi4iICsgcmVxdWVzdElELCB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IElOSVRJQUxfQ09OVEVOVCwNCiAgICAgICAgICAgICAgICAgICAgdGhlbWU6ICdsaWdodC1ib3JkZXInLA0KICAgICAgICAgICAgICAgICAgICBhc3luYyBvblNob3codGlwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaXNGZXRjaGluZyB8fCAhc3RhdGUuY2FuRmV0Y2gpIHJldHVybjsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNGZXRjaGluZyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jYW5GZXRjaCA9IGZhbHNlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICB0cnkgew0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG93bmxvYWRpbmdJbWFnZSA9IG5ldyBJbWFnZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nSW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGlwLnN0YXRlLmlzVmlzaWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IDEwMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpcC5zZXRDb250ZW50KHRoaXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nSW1hZ2Uuc3JjID0gcmVzdWx0LnJlc3VsdC51cmw7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXAuc2V0Q29udGVudChgRmV0Y2ggZmFpbGVkLiAke2V9YCkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNGZXRjaGluZyA9IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIG9uSGlkZGVuKHRpcCkgew0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aXBweSgiLiIgKyByZXF1ZXN0SUQsIHsNCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcmVzdWx0SFRNTCwNCiAgICAgICAgICAgICAgICAgICAgdGhlbWU6ICdsaWdodC1ib3JkZXInLA0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5pbnB1dFR5cGUgaW5zdGFuY2VvZiBQYXJhZ3JhcGgpIHsNCg0KICAgICAgICAgICAgbGV0IGRpdiA9ICQoIHJlcXVlc3QuaW5wdXQuZWxlbWVudCkud3JhcCggIjxkaXYgY2xhc3M9JyIrIHJlcXVlc3RJRCsiIGVhc3ktcmVhZGluZy10aXBweS10b29sdGlwICIrdGhpcy5nZXRSZXN1bHRDbGFzcygpKyInICIrdGhpcy5nZXRQcmVzZW50YXRpb25BbmRSZXF1ZXN0SWRlbnRpZmllcihyZXF1ZXN0SUQpKyI+PC9kaXY+IiApOw0KDQogICAgICAgICAgICB0aXBweSgiLiIgKyByZXF1ZXN0SUQsIHsNCiAgICAgICAgICAgICAgICBjb250ZW50OiByZXN1bHRIVE1MLA0KICAgICAgICAgICAgICAgIHRoZW1lOiAnbGlnaHQtYm9yZGVyJywNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgIH0NCg0KICAgICAgICBnbG9iYWxFdmVudExpc3RlbmVyLnByZXNlbnRhdGlvbkZpbmlzaGVkKHRoaXMpOw0KDQogICAgfQ0KDQogICAgdW5kbygpIHsNCg0KICAgIH0NCiAgICByZW1vdmVSZXN1bHQocmVxdWVzdElEKXsNCg0KICAgICAgICBjb25zdCB0b29sdGlwRWxlbWVudCA9ICQoIi4iK3JlcXVlc3RJRCk7DQogICAgICAgIGlmKHRvb2x0aXBFbGVtZW50Lmxlbmd0aCl7DQogICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRpcHB5KHRvb2x0aXBFbGVtZW50WzBdKTsNCiAgICAgICAgICAgIGlmKGluc3RhbmNlKXsNCiAgICAgICAgICAgICAgICBpbnN0YW5jZS5kZXN0cm95KHRydWUpOw0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgaWYodG9vbHRpcEVsZW1lbnRbMF0uX3RpcHB5KXsNCiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcEVsZW1lbnRbMF0uX3RpcHB5LmRlc3Ryb3kodHJ1ZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBsZXQgcGFyZW50ID0gdG9vbHRpcEVsZW1lbnQucGFyZW50KCk7DQogICAgICAgICAgICB0b29sdGlwRWxlbWVudC5jb250ZW50cygpLnVud3JhcCgpOw0KICAgICAgICAgICAgaWYocGFyZW50Lmxlbmd0aCl7DQogICAgICAgICAgICAgICAgcGFyZW50LmdldCgwKS5ub3JtYWxpemUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgfQ0KDQoNCn0="
                                }
                            ],
                            "contentCSS": [
                                {
                                    "id": "presentation/light-border.css",
                                    "css": "LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1le2JhY2tncm91bmQtY29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsOCwxNiwuMTUpO2NvbG9yOiMyNjMyM2Q7Ym94LXNoYWRvdzowIDNweCAxNHB4IC0uNXB4IHJnYmEoMCw4LDE2LC4wOCl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1iYWNrZHJvcHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1hcnJvdzphZnRlciwudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWUgLnRpcHB5LWFycm93OmJlZm9yZSwudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWUgLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXIsLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1yb3VuZGFycm93OmJlZm9yZXtjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6LTF9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lIC50aXBweS1yb3VuZGFycm93e2ZpbGw6I2ZmZn0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWUgLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXJ7YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCamJHbHdMWEoxYkdVOUltVjJaVzV2WkdRaUlHWnBiR3d0Y25Wc1pUMGlaWFpsYm05a1pDSWdjM1J5YjJ0bExXeHBibVZxYjJsdVBTSnliM1Z1WkNJZ2MzUnliMnRsTFcxcGRHVnliR2x0YVhROUlqRXVOREUwSWlCMmFXVjNRbTk0UFNJd0lEQWdNVGdnTnlJZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWo0OGNHRjBhQ0JrUFNKTk1DQTNjekl1TURJeExTNHdNVFVnTlM0eU5UTXROQzR5TVRoRE5pNDFPRFFnTVM0d05URWdOeTQzT1RjdU1EQTNJRGtnTUdNeExqSXdNeTB1TURBM0lESXVOREUySURFdU1ETTFJRE11TnpZeElESXVOemd5UXpFMkxqQXhNaUEzTGpBd05TQXhPQ0EzSURFNElEZDZJaUJtYVd4c1BTSWpNek16SWlCbWFXeHNMVzl3WVdOcGRIazlJaTR5TXpVaUlHWnBiR3d0Y25Wc1pUMGlibTl1ZW1WeWJ5SXZQand2YzNablBnPT0pO2JhY2tncm91bmQtc2l6ZToxOHB4IDdweDt3aWR0aDoxOHB4O2hlaWdodDo3cHg7bGVmdDowO3RvcDowO2ZpbGw6cmdiYSgwLDgsMTYsLjE1KX0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXJ7dG9wOjFweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvd3tib3JkZXItdG9wLWNvbG9yOiNmZmZ9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItdG9wOjdweCBzb2xpZCAjZmZmO3RvcDotN3B4fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci10b3A6N3B4IHNvbGlkIHJnYmEoMCw4LDE2LC4yKTtib3R0b206LTFweH0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LXJvdW5kYXJyb3c6YWZ0ZXJ7dG9wOi0xcHh9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1hcnJvd3tib3JkZXItYm90dG9tLWNvbG9yOiNmZmZ9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItYm90dG9tOjdweCBzb2xpZCAjZmZmO2JvdHRvbTotN3B4fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci1ib3R0b206N3B4IHNvbGlkIHJnYmEoMCw4LDE2LC4yKTtib3R0b206LTZweH0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1yb3VuZGFycm93OmFmdGVye2xlZnQ6MXB4O3RvcDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3d7Ym9yZGVyLWxlZnQtY29sb3I6I2ZmZn0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItbGVmdDo3cHggc29saWQgI2ZmZjtsZWZ0Oi03cHh9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci1sZWZ0OjdweCBzb2xpZCByZ2JhKDAsOCwxNiwuMik7bGVmdDotNnB4fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93OmFmdGVye2xlZnQ6LTFweDt0b3A6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93e2JvcmRlci1yaWdodC1jb2xvcjojZmZmfS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1hcnJvdzphZnRlcntib3JkZXItcmlnaHQ6N3B4IHNvbGlkICNmZmY7cmlnaHQ6LTdweH0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3c6YmVmb3Jle2JvcmRlci1yaWdodDo3cHggc29saWQgcmdiYSgwLDgsMTYsLjIpO3JpZ2h0Oi02cHh9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1hcnJvdywudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LXJvdW5kYXJyb3csLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvdywudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3d7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMXB4KX0udGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWFycm93OmFmdGVyLC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3c6YmVmb3JlLC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3c6YWZ0ZXIsLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvdzpiZWZvcmV7bGVmdDotN3B4O2JvcmRlci1sZWZ0OjdweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6N3B4IHNvbGlkIHRyYW5zcGFyZW50fS50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWFycm93LC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3csLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93LC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTFweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTFweCl9LnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3c6YWZ0ZXIsLnRpcHB5LXRvb2x0aXAubGlnaHQtYm9yZGVyLXRoZW1lW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYXJyb3c6YmVmb3JlLC50aXBweS10b29sdGlwLmxpZ2h0LWJvcmRlci10aGVtZVt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1hcnJvdzphZnRlciwudGlwcHktdG9vbHRpcC5saWdodC1ib3JkZXItdGhlbWVbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3c6YmVmb3Jle3RvcDotN3B4O2JvcmRlci10b3A6N3B4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206N3B4IHNvbGlkIHRyYW5zcGFyZW50fQ=="
                                },
                                {
                                    "id": "presentation/tippy-tooltip.css",
                                    "css": "LmVhc3ktcmVhZGluZy10aXBweS10b29sdGlwIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgYmxhY2s7DQp9DQoNCg=="
                                }
                            ]
                        },
                        "configuration": {
                            "remoteAssetDirectory": "https://localhost:8080//components/presentation/tippy-tooltip/1.0/presentation/images"
                        }
                    }
                }
            ]
        }
    ],
    "plugins": [
        {
            "source": {
                "id": "texthelp-analytics",
                "name": "Texthelp analytics",
                "description": "Google Analytics of Texthelp",
                "version": "1.0",
                "versionDescription": "Initial Version",
                "debugMode": false,
                "remoteAssetDirectory": "",
                "remoteBaseDirectory": "components/plugin/texthelp-analytics/1.0/",
                "implementationClass": "TestPlugin",
                "contentScripts": [
                    {
                        "id": "plugin/assets/js/analytics.js",
                        "source": "JC5nZXRTY3JpcHQoICJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTEyNDkwNDUxNi0yIiwgZnVuY3Rpb24oIGRhdGEsIHRleHRTdGF0dXMsIGpxeGhyICkgew0KICAgIGlmKGpxeGhyLnN0YXR1cyA9PT0gMjAwKXsNCiAgICAgICAgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107DQogICAgICAgIGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30NCiAgICAgICAgZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsNCiAgICAgICAgZ3RhZygnY29uZmlnJywgJ1VBLTEyNDkwNDUxNi0yJyk7DQoNCg0KICAgICAgICBjb25zb2xlLmxvZygidGV4dGhlbHAtYW5hbHl0aWNzIGxvYWRlZCIpOw0KDQogICAgfQ0KfSk7DQoNCg=="
                    }
                ],
                "contentCSS": []
            }
        }
    ],
    "userInterfaceCollectionID": 38,
    "uuid": "pbkdf2$10000$0c2661b06b1f8d202eab17fbf4bfd66f5e003f5dc52532e4ac1117d5c4b918db6f2e2918b002064b48a99b0c671587754fd0310193130d6e49d2c1b917fcc8e2$",
    "webSocketConnection": null,
    "roles": [
        "client",
        "anonym"
    ],
    "debugMode": false,
    "static": [
        "",
        "",
        "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9ZXx8c2VsZikuTWljcm9Nb2RhbD10KCl9KHRoaXMsZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7cmV0dXJuKCgpPT57Y29uc3QgZT1bImFbaHJlZl0iLCJhcmVhW2hyZWZdIiwnaW5wdXQ6bm90KFtkaXNhYmxlZF0pOm5vdChbdHlwZT0iaGlkZGVuIl0pOm5vdChbYXJpYS1oaWRkZW5dKScsInNlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pIiwidGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKSIsImJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pIiwiaWZyYW1lIiwib2JqZWN0IiwiZW1iZWQiLCJbY29udGVudGVkaXRhYmxlXSIsJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleF49Ii0iXSknXTtjbGFzcyB0e2NvbnN0cnVjdG9yKHt0YXJnZXRNb2RhbDplLHRyaWdnZXJzOnQ9W10sb25TaG93Om89KCgpPT57fSksb25DbG9zZTppPSgoKT0+e30pLG9wZW5UcmlnZ2VyOm49ImRhdGEtbWljcm9tb2RhbC10cmlnZ2VyIixjbG9zZVRyaWdnZXI6cz0iZGF0YS1taWNyb21vZGFsLWNsb3NlIixkaXNhYmxlU2Nyb2xsOmE9ITEsZGlzYWJsZUZvY3VzOmw9ITEsYXdhaXRDbG9zZUFuaW1hdGlvbjpkPSExLGF3YWl0T3BlbkFuaW1hdGlvbjpyPSExLGRlYnVnTW9kZTpjPSExfSl7dGhpcy5tb2RhbD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKSx0aGlzLmNvbmZpZz17ZGVidWdNb2RlOmMsZGlzYWJsZVNjcm9sbDphLG9wZW5UcmlnZ2VyOm4sY2xvc2VUcmlnZ2VyOnMsb25TaG93Om8sb25DbG9zZTppLGF3YWl0Q2xvc2VBbmltYXRpb246ZCxhd2FpdE9wZW5BbmltYXRpb246cixkaXNhYmxlRm9jdXM6bH0sdC5sZW5ndGg+MCYmdGhpcy5yZWdpc3RlclRyaWdnZXJzKC4uLnQpLHRoaXMub25DbGljaz10aGlzLm9uQ2xpY2suYmluZCh0aGlzKSx0aGlzLm9uS2V5ZG93bj10aGlzLm9uS2V5ZG93bi5iaW5kKHRoaXMpfXJlZ2lzdGVyVHJpZ2dlcnMoLi4uZSl7ZS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChlPT57ZS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZT0+dGhpcy5zaG93TW9kYWwoZSkpfSl9c2hvd01vZGFsKCl7aWYodGhpcy5hY3RpdmVFbGVtZW50PWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsdGhpcy5tb2RhbC5zZXRBdHRyaWJ1dGUoImFyaWEtaGlkZGVuIiwiZmFsc2UiKSx0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoImlzLW9wZW4iKSx0aGlzLnNjcm9sbEJlaGF2aW91cigiZGlzYWJsZSIpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKSx0aGlzLmNvbmZpZy5hd2FpdE9wZW5BbmltYXRpb24pe2NvbnN0IGU9KCk9Pnt0aGlzLm1vZGFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoImFuaW1hdGlvbmVuZCIsZSwhMSksdGhpcy5zZXRGb2N1c1RvRmlyc3ROb2RlKCl9O3RoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigiYW5pbWF0aW9uZW5kIixlLCExKX1lbHNlIHRoaXMuc2V0Rm9jdXNUb0ZpcnN0Tm9kZSgpO3RoaXMuY29uZmlnLm9uU2hvdyh0aGlzLm1vZGFsLHRoaXMuYWN0aXZlRWxlbWVudCl9Y2xvc2VNb2RhbCgpe2NvbnN0IGU9dGhpcy5tb2RhbDt0aGlzLm1vZGFsLnNldEF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iLCJ0cnVlIiksdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpLHRoaXMuc2Nyb2xsQmVoYXZpb3VyKCJlbmFibGUiKSx0aGlzLmFjdGl2ZUVsZW1lbnQmJnRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cygpLHRoaXMuY29uZmlnLm9uQ2xvc2UodGhpcy5tb2RhbCksdGhpcy5jb25maWcuYXdhaXRDbG9zZUFuaW1hdGlvbj90aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoImFuaW1hdGlvbmVuZCIsZnVuY3Rpb24gdCgpe2UuY2xhc3NMaXN0LnJlbW92ZSgiaXMtb3BlbiIpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYW5pbWF0aW9uZW5kIix0LCExKX0sITEpOmUuY2xhc3NMaXN0LnJlbW92ZSgiaXMtb3BlbiIpfWNsb3NlTW9kYWxCeUlkKGUpe3RoaXMubW9kYWw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSksdGhpcy5tb2RhbCYmdGhpcy5jbG9zZU1vZGFsKCl9c2Nyb2xsQmVoYXZpb3VyKGUpe2lmKCF0aGlzLmNvbmZpZy5kaXNhYmxlU2Nyb2xsKXJldHVybjtjb25zdCB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImJvZHkiKTtzd2l0Y2goZSl7Y2FzZSJlbmFibGUiOk9iamVjdC5hc3NpZ24odC5zdHlsZSx7b3ZlcmZsb3c6IiIsaGVpZ2h0OiIifSk7YnJlYWs7Y2FzZSJkaXNhYmxlIjpPYmplY3QuYXNzaWduKHQuc3R5bGUse292ZXJmbG93OiJoaWRkZW4iLGhlaWdodDoiMTAwdmgifSl9fWFkZEV2ZW50TGlzdGVuZXJzKCl7dGhpcy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCJ0b3VjaHN0YXJ0Iix0aGlzLm9uQ2xpY2spLHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLHRoaXMub25DbGljayksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsdGhpcy5vbktleWRvd24pfXJlbW92ZUV2ZW50TGlzdGVuZXJzKCl7dGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCJ0b3VjaHN0YXJ0Iix0aGlzLm9uQ2xpY2spLHRoaXMubW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLHRoaXMub25DbGljayksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsdGhpcy5vbktleWRvd24pfW9uQ2xpY2soZSl7ZS50YXJnZXQuaGFzQXR0cmlidXRlKHRoaXMuY29uZmlnLmNsb3NlVHJpZ2dlcikmJih0aGlzLmNsb3NlTW9kYWwoKSxlLnByZXZlbnREZWZhdWx0KCkpfW9uS2V5ZG93bihlKXsyNz09PWUua2V5Q29kZSYmdGhpcy5jbG9zZU1vZGFsKGUpLDk9PT1lLmtleUNvZGUmJnRoaXMubWFpbnRhaW5Gb2N1cyhlKX1nZXRGb2N1c2FibGVOb2Rlcygpe2NvbnN0IHQ9dGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yQWxsKGUpO3JldHVybiBBcnJheSguLi50KX1zZXRGb2N1c1RvRmlyc3ROb2RlKCl7aWYodGhpcy5jb25maWcuZGlzYWJsZUZvY3VzKXJldHVybjtjb25zdCBlPXRoaXMuZ2V0Rm9jdXNhYmxlTm9kZXMoKTtlLmxlbmd0aCYmZVswXS5mb2N1cygpfW1haW50YWluRm9jdXMoZSl7Y29uc3QgdD10aGlzLmdldEZvY3VzYWJsZU5vZGVzKCk7aWYodGhpcy5tb2RhbC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSl7Y29uc3Qgbz10LmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7ZS5zaGlmdEtleSYmMD09PW8mJih0W3QubGVuZ3RoLTFdLmZvY3VzKCksZS5wcmV2ZW50RGVmYXVsdCgpKSxlLnNoaWZ0S2V5fHxvIT09dC5sZW5ndGgtMXx8KHRbMF0uZm9jdXMoKSxlLnByZXZlbnREZWZhdWx0KCkpfWVsc2UgdFswXS5mb2N1cygpfX1sZXQgbz1udWxsO2NvbnN0IGk9ZT0+e2lmKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKSlyZXR1cm4gY29uc29sZS53YXJuKGBNaWNyb01vZGFsOiDinZdTZWVtcyBsaWtlIHlvdSBoYXZlIG1pc3NlZCAlYycke2V9J2AsImJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7IiwiSUQgc29tZXdoZXJlIGluIHlvdXIgY29kZS4gUmVmZXIgZXhhbXBsZSBiZWxvdyB0byByZXNvbHZlIGl0LiIpLGNvbnNvbGUud2FybigiJWNFeGFtcGxlOiIsImJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7IixgPGRpdiBjbGFzcz0ibW9kYWwiIGlkPSIke2V9Ij48L2Rpdj5gKSwhMX0sbj0oZSx0KT0+e2lmKChlPT57aWYoZS5sZW5ndGg8PTApY29uc29sZS53YXJuKCJNaWNyb01vZGFsOiDinZdQbGVhc2Ugc3BlY2lmeSBhdCBsZWFzdCBvbmUgJWMnbWljcm9tb2RhbC10cmlnZ2VyJyIsImJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7IiwiZGF0YSBhdHRyaWJ1dGUuIiksY29uc29sZS53YXJuKCIlY0V4YW1wbGU6IiwiYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtjb2xvcjogIzUwNTk2Yztmb250LXdlaWdodDogYm9sZDsiLCc8YSBocmVmPSIjIiBkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcj0ibXktbW9kYWwiPjwvYT4nKX0pKGUpLCF0KXJldHVybiEwO2Zvcih2YXIgbyBpbiB0KWkobyk7cmV0dXJuITB9O3JldHVybntpbml0OmU9Pntjb25zdCBpPU9iamVjdC5hc3NpZ24oe30se29wZW5UcmlnZ2VyOiJkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlciJ9LGUpLHM9Wy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFske2kub3BlblRyaWdnZXJ9XWApXSxhPSgoZSx0KT0+e2NvbnN0IG89W107cmV0dXJuIGUuZm9yRWFjaChlPT57Y29uc3QgaT1lLmF0dHJpYnV0ZXNbdF0udmFsdWU7dm9pZCAwPT09b1tpXSYmKG9baV09W10pLG9baV0ucHVzaChlKX0pLG99KShzLGkub3BlblRyaWdnZXIpO2lmKCEwIT09aS5kZWJ1Z01vZGV8fCExIT09bihzLGEpKWZvcih2YXIgbCBpbiBhKXtsZXQgZT1hW2xdO2kudGFyZ2V0TW9kYWw9bCxpLnRyaWdnZXJzPVsuLi5lXSxvPW5ldyB0KGkpfX0sc2hvdzooZSxuKT0+e2NvbnN0IHM9bnx8e307cy50YXJnZXRNb2RhbD1lLCEwPT09cy5kZWJ1Z01vZGUmJiExPT09aShlKXx8KG89bmV3IHQocykpLnNob3dNb2RhbCgpfSxjbG9zZTplPT57ZT9vLmNsb3NlTW9kYWxCeUlkKGUpOm8uY2xvc2VNb2RhbCgpfX19KSgpfSk7DQo=",
        "LyohCiogc3dlZXRhbGVydDIgdjguMTQuMAoqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4KKi8KKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsKCXR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDoKCXR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6CgkoZ2xvYmFsLlN3ZWV0YWxlcnQyID0gZmFjdG9yeSgpKTsKfSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikgewogICAgICByZXR1cm4gdHlwZW9mIG9iajsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7CiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRhcmdldDsKICB9OwoKICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsKICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOwogIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7CiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7CgogIHRyeSB7CiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOwogICAgcmV0dXJuIHRydWU7CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7CiAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7CiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7CiAgfSBlbHNlIHsKICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsKICAgICAgdmFyIGEgPSBbbnVsbF07CiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTsKICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOwogICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsKICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7CiAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgIH07CiAgfQoKICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgewogIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7CiAgICBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsKICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOwogIH0KCiAgcmV0dXJuIG9iamVjdDsKfQoKZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgewogIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gInVuZGVmaW5lZCIgJiYgUmVmbGVjdC5nZXQpIHsKICAgIF9nZXQgPSBSZWZsZWN0LmdldDsKICB9IGVsc2UgewogICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsKICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsKCiAgICAgIGlmICghYmFzZSkgcmV0dXJuOwogICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOwoKICAgICAgaWYgKGRlc2MuZ2V0KSB7CiAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpOwogICAgICB9CgogICAgICByZXR1cm4gZGVzYy52YWx1ZTsKICAgIH07CiAgfQoKICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpOwp9Cgp2YXIgY29uc29sZVByZWZpeCA9ICdTd2VldEFsZXJ0MjonOwovKioKICogRmlsdGVyIHRoZSB1bmlxdWUgdmFsdWVzIGludG8gYSBuZXcgYXJyYXkKICogQHBhcmFtIGFycgogKi8KCnZhciB1bmlxdWVBcnJheSA9IGZ1bmN0aW9uIHVuaXF1ZUFycmF5KGFycikgewogIHZhciByZXN1bHQgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgIGlmIChyZXN1bHQuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgewogICAgICByZXN1bHQucHVzaChhcnJbaV0pOwogICAgfQogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfTsKLyoqCiAqIFJldHVybnMgdGhlIGFycmF5IG9iIG9iamVjdCB2YWx1ZXMgKE9iamVjdC52YWx1ZXMgaXNuJ3Qgc3VwcG9ydGVkIGluIElFMTEpCiAqIEBwYXJhbSBvYmoKICovCgp2YXIgb2JqZWN0VmFsdWVzID0gZnVuY3Rpb24gb2JqZWN0VmFsdWVzKG9iaikgewogIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICByZXR1cm4gb2JqW2tleV07CiAgfSk7Cn07Ci8qKgogKiBDb252ZXJ0IE5vZGVMaXN0IHRvIEFycmF5CiAqIEBwYXJhbSBub2RlTGlzdAogKi8KCnZhciB0b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheShub2RlTGlzdCkgewogIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7Cn07Ci8qKgogKiBTdGFuZGFyZGlzZSBjb25zb2xlIHdhcm5pbmdzCiAqIEBwYXJhbSBtZXNzYWdlCiAqLwoKdmFyIHdhcm4gPSBmdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHsKICBjb25zb2xlLndhcm4oIiIuY29uY2F0KGNvbnNvbGVQcmVmaXgsICIgIikuY29uY2F0KG1lc3NhZ2UpKTsKfTsKLyoqCiAqIFN0YW5kYXJkaXNlIGNvbnNvbGUgZXJyb3JzCiAqIEBwYXJhbSBtZXNzYWdlCiAqLwoKdmFyIGVycm9yID0gZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkgewogIGNvbnNvbGUuZXJyb3IoIiIuY29uY2F0KGNvbnNvbGVQcmVmaXgsICIgIikuY29uY2F0KG1lc3NhZ2UpKTsKfTsKLyoqCiAqIFByaXZhdGUgZ2xvYmFsIHN0YXRlIGZvciBgd2Fybk9uY2VgCiAqIEB0eXBlIHtBcnJheX0KICogQHByaXZhdGUKICovCgp2YXIgcHJldmlvdXNXYXJuT25jZU1lc3NhZ2VzID0gW107Ci8qKgogKiBTaG93IGEgY29uc29sZSB3YXJuaW5nLCBidXQgb25seSBpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuIHNob3duCiAqIEBwYXJhbSBtZXNzYWdlCiAqLwoKdmFyIHdhcm5PbmNlID0gZnVuY3Rpb24gd2Fybk9uY2UobWVzc2FnZSkgewogIGlmICghKHByZXZpb3VzV2Fybk9uY2VNZXNzYWdlcy5pbmRleE9mKG1lc3NhZ2UpICE9PSAtMSkpIHsKICAgIHByZXZpb3VzV2Fybk9uY2VNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpOwogICAgd2FybihtZXNzYWdlKTsKICB9Cn07Ci8qKgogKiBTaG93IGEgb25lLXRpbWUgY29uc29sZSB3YXJuaW5nIGFib3V0IGRlcHJlY2F0ZWQgcGFyYW1zL21ldGhvZHMKICovCgp2YXIgd2FybkFib3V0RGVwcmVhdGlvbiA9IGZ1bmN0aW9uIHdhcm5BYm91dERlcHJlYXRpb24oZGVwcmVjYXRlZFBhcmFtLCB1c2VJbnN0ZWFkKSB7CiAgd2Fybk9uY2UoIlwiIi5jb25jYXQoZGVwcmVjYXRlZFBhcmFtLCAiXCIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFBsZWFzZSB1c2UgXCIiKS5jb25jYXQodXNlSW5zdGVhZCwgIlwiIGluc3RlYWQuIikpOwp9OwovKioKICogSWYgYGFyZ2AgaXMgYSBmdW5jdGlvbiwgY2FsbCBpdCAod2l0aCBubyBhcmd1bWVudHMgb3IgY29udGV4dCkgYW5kIHJldHVybiB0aGUgcmVzdWx0LgogKiBPdGhlcndpc2UsIGp1c3QgcGFzcyB0aGUgdmFsdWUgdGhyb3VnaAogKiBAcGFyYW0gYXJnCiAqLwoKdmFyIGNhbGxJZkZ1bmN0aW9uID0gZnVuY3Rpb24gY2FsbElmRnVuY3Rpb24oYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicgPyBhcmcoKSA6IGFyZzsKfTsKdmFyIGlzUHJvbWlzZSA9IGZ1bmN0aW9uIGlzUHJvbWlzZShhcmcpIHsKICByZXR1cm4gYXJnICYmIFByb21pc2UucmVzb2x2ZShhcmcpID09PSBhcmc7Cn07Cgp2YXIgRGlzbWlzc1JlYXNvbiA9IE9iamVjdC5mcmVlemUoewogIGNhbmNlbDogJ2NhbmNlbCcsCiAgYmFja2Ryb3A6ICdiYWNrZHJvcCcsCiAgY2xvc2U6ICdjbG9zZScsCiAgZXNjOiAnZXNjJywKICB0aW1lcjogJ3RpbWVyJwp9KTsKCnZhciBhcmdzVG9QYXJhbXMgPSBmdW5jdGlvbiBhcmdzVG9QYXJhbXMoYXJncykgewogIHZhciBwYXJhbXMgPSB7fTsKCiAgc3dpdGNoIChfdHlwZW9mKGFyZ3NbMF0pKSB7CiAgICBjYXNlICdvYmplY3QnOgogICAgICBfZXh0ZW5kcyhwYXJhbXMsIGFyZ3NbMF0pOwoKICAgICAgYnJlYWs7CgogICAgZGVmYXVsdDoKICAgICAgWyd0aXRsZScsICdodG1sJywgJ3R5cGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lLCBpbmRleCkgewogICAgICAgIHN3aXRjaCAoX3R5cGVvZihhcmdzW2luZGV4XSkpIHsKICAgICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICAgIHBhcmFtc1tuYW1lXSA9IGFyZ3NbaW5kZXhdOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOgogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBlcnJvcigiVW5leHBlY3RlZCB0eXBlIG9mICIuY29uY2F0KG5hbWUsICIhIEV4cGVjdGVkIFwic3RyaW5nXCIsIGdvdCAiKS5jb25jYXQoX3R5cGVvZihhcmdzW2luZGV4XSkpKTsKICAgICAgICB9CiAgICAgIH0pOwogIH0KCiAgcmV0dXJuIHBhcmFtczsKfTsKCnZhciBzd2FsUHJlZml4ID0gJ3N3YWwyLSc7CnZhciBwcmVmaXggPSBmdW5jdGlvbiBwcmVmaXgoaXRlbXMpIHsKICB2YXIgcmVzdWx0ID0ge307CgogIGZvciAodmFyIGkgaW4gaXRlbXMpIHsKICAgIHJlc3VsdFtpdGVtc1tpXV0gPSBzd2FsUHJlZml4ICsgaXRlbXNbaV07CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9Owp2YXIgc3dhbENsYXNzZXMgPSBwcmVmaXgoWydjb250YWluZXInLCAnc2hvd24nLCAnaGVpZ2h0LWF1dG8nLCAnaW9zZml4JywgJ3BvcHVwJywgJ21vZGFsJywgJ25vLWJhY2tkcm9wJywgJ3RvYXN0JywgJ3RvYXN0LXNob3duJywgJ3RvYXN0LWNvbHVtbicsICdmYWRlJywgJ3Nob3cnLCAnaGlkZScsICdub2FuaW1hdGlvbicsICdjbG9zZScsICd0aXRsZScsICdoZWFkZXInLCAnY29udGVudCcsICdhY3Rpb25zJywgJ2NvbmZpcm0nLCAnY2FuY2VsJywgJ2Zvb3RlcicsICdpY29uJywgJ2ltYWdlJywgJ2lucHV0JywgJ2ZpbGUnLCAncmFuZ2UnLCAnc2VsZWN0JywgJ3JhZGlvJywgJ2NoZWNrYm94JywgJ2xhYmVsJywgJ3RleHRhcmVhJywgJ2lucHV0ZXJyb3InLCAndmFsaWRhdGlvbi1tZXNzYWdlJywgJ3Byb2dyZXNzLXN0ZXBzJywgJ2FjdGl2ZS1wcm9ncmVzcy1zdGVwJywgJ3Byb2dyZXNzLXN0ZXAnLCAncHJvZ3Jlc3Mtc3RlcC1saW5lJywgJ2xvYWRpbmcnLCAnc3R5bGVkJywgJ3RvcCcsICd0b3Atc3RhcnQnLCAndG9wLWVuZCcsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnLCAnY2VudGVyJywgJ2NlbnRlci1zdGFydCcsICdjZW50ZXItZW5kJywgJ2NlbnRlci1sZWZ0JywgJ2NlbnRlci1yaWdodCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ2dyb3ctcm93JywgJ2dyb3ctY29sdW1uJywgJ2dyb3ctZnVsbHNjcmVlbicsICdydGwnXSk7CnZhciBpY29uVHlwZXMgPSBwcmVmaXgoWydzdWNjZXNzJywgJ3dhcm5pbmcnLCAnaW5mbycsICdxdWVzdGlvbicsICdlcnJvciddKTsKCnZhciBzdGF0ZXMgPSB7CiAgcHJldmlvdXNCb2R5UGFkZGluZzogbnVsbAp9Owp2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtLCBjbGFzc05hbWUpIHsKICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTsKfTsKdmFyIGFwcGx5Q3VzdG9tQ2xhc3MgPSBmdW5jdGlvbiBhcHBseUN1c3RvbUNsYXNzKGVsZW0sIGN1c3RvbUNsYXNzLCBjbGFzc05hbWUpIHsKICAvLyBDbGVhbiB1cCBwcmV2aW91cyBjdXN0b20gY2xhc3NlcwogIHRvQXJyYXkoZWxlbS5jbGFzc0xpc3QpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkgewogICAgaWYgKCEob2JqZWN0VmFsdWVzKHN3YWxDbGFzc2VzKS5pbmRleE9mKGNsYXNzTmFtZSkgIT09IC0xKSAmJiAhKG9iamVjdFZhbHVlcyhpY29uVHlwZXMpLmluZGV4T2YoY2xhc3NOYW1lKSAhPT0gLTEpKSB7CiAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOwogICAgfQogIH0pOwoKICBpZiAoY3VzdG9tQ2xhc3MgJiYgY3VzdG9tQ2xhc3NbY2xhc3NOYW1lXSkgewogICAgYWRkQ2xhc3MoZWxlbSwgY3VzdG9tQ2xhc3NbY2xhc3NOYW1lXSk7CiAgfQp9OwpmdW5jdGlvbiBnZXRJbnB1dChjb250ZW50LCBpbnB1dFR5cGUpIHsKICBpZiAoIWlucHV0VHlwZSkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICBzd2l0Y2ggKGlucHV0VHlwZSkgewogICAgY2FzZSAnc2VsZWN0JzoKICAgIGNhc2UgJ3RleHRhcmVhJzoKICAgIGNhc2UgJ2ZpbGUnOgogICAgICByZXR1cm4gZ2V0Q2hpbGRCeUNsYXNzKGNvbnRlbnQsIHN3YWxDbGFzc2VzW2lucHV0VHlwZV0pOwoKICAgIGNhc2UgJ2NoZWNrYm94JzoKICAgICAgcmV0dXJuIGNvbnRlbnQucXVlcnlTZWxlY3RvcigiLiIuY29uY2F0KHN3YWxDbGFzc2VzLmNoZWNrYm94LCAiIGlucHV0IikpOwoKICAgIGNhc2UgJ3JhZGlvJzoKICAgICAgcmV0dXJuIGNvbnRlbnQucXVlcnlTZWxlY3RvcigiLiIuY29uY2F0KHN3YWxDbGFzc2VzLnJhZGlvLCAiIGlucHV0OmNoZWNrZWQiKSkgfHwgY29udGVudC5xdWVyeVNlbGVjdG9yKCIuIi5jb25jYXQoc3dhbENsYXNzZXMucmFkaW8sICIgaW5wdXQ6Zmlyc3QtY2hpbGQiKSk7CgogICAgY2FzZSAncmFuZ2UnOgogICAgICByZXR1cm4gY29udGVudC5xdWVyeVNlbGVjdG9yKCIuIi5jb25jYXQoc3dhbENsYXNzZXMucmFuZ2UsICIgaW5wdXQiKSk7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGdldENoaWxkQnlDbGFzcyhjb250ZW50LCBzd2FsQ2xhc3Nlcy5pbnB1dCk7CiAgfQp9CnZhciBmb2N1c0lucHV0ID0gZnVuY3Rpb24gZm9jdXNJbnB1dChpbnB1dCkgewogIGlucHV0LmZvY3VzKCk7IC8vIHBsYWNlIGN1cnNvciBhdCBlbmQgb2YgdGV4dCBpbiB0ZXh0IGlucHV0CgogIGlmIChpbnB1dC50eXBlICE9PSAnZmlsZScpIHsKICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIzNDU5MTUKICAgIHZhciB2YWwgPSBpbnB1dC52YWx1ZTsKICAgIGlucHV0LnZhbHVlID0gJyc7CiAgICBpbnB1dC52YWx1ZSA9IHZhbDsKICB9Cn07CnZhciB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKHRhcmdldCwgY2xhc3NMaXN0LCBjb25kaXRpb24pIHsKICBpZiAoIXRhcmdldCB8fCAhY2xhc3NMaXN0KSB7CiAgICByZXR1cm47CiAgfQoKICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PT0gJ3N0cmluZycpIHsKICAgIGNsYXNzTGlzdCA9IGNsYXNzTGlzdC5zcGxpdCgvXHMrLykuZmlsdGVyKEJvb2xlYW4pOwogIH0KCiAgY2xhc3NMaXN0LmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkgewogICAgaWYgKHRhcmdldC5mb3JFYWNoKSB7CiAgICAgIHRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7CiAgICAgICAgY29uZGl0aW9uID8gZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSkgOiBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBjb25kaXRpb24gPyB0YXJnZXQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpIDogdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsKICAgIH0KICB9KTsKfTsKdmFyIGFkZENsYXNzID0gZnVuY3Rpb24gYWRkQ2xhc3ModGFyZ2V0LCBjbGFzc0xpc3QpIHsKICB0b2dnbGVDbGFzcyh0YXJnZXQsIGNsYXNzTGlzdCwgdHJ1ZSk7Cn07CnZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKHRhcmdldCwgY2xhc3NMaXN0KSB7CiAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBjbGFzc0xpc3QsIGZhbHNlKTsKfTsKdmFyIGdldENoaWxkQnlDbGFzcyA9IGZ1bmN0aW9uIGdldENoaWxkQnlDbGFzcyhlbGVtLCBjbGFzc05hbWUpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgaWYgKGhhc0NsYXNzKGVsZW0uY2hpbGROb2Rlc1tpXSwgY2xhc3NOYW1lKSkgewogICAgICByZXR1cm4gZWxlbS5jaGlsZE5vZGVzW2ldOwogICAgfQogIH0KfTsKdmFyIGFwcGx5TnVtZXJpY2FsU3R5bGUgPSBmdW5jdGlvbiBhcHBseU51bWVyaWNhbFN0eWxlKGVsZW0sIHByb3BlcnR5LCB2YWx1ZSkgewogIGlmICh2YWx1ZSB8fCBwYXJzZUludCh2YWx1ZSkgPT09IDApIHsKICAgIGVsZW0uc3R5bGVbcHJvcGVydHldID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlICsgJ3B4JyA6IHZhbHVlOwogIH0gZWxzZSB7CiAgICBlbGVtLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTsKICB9Cn07CnZhciBzaG93ID0gZnVuY3Rpb24gc2hvdyhlbGVtKSB7CiAgdmFyIGRpc3BsYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdmbGV4JzsKICBlbGVtLnN0eWxlLm9wYWNpdHkgPSAnJzsKICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5Owp9Owp2YXIgaGlkZSA9IGZ1bmN0aW9uIGhpZGUoZWxlbSkgewogIGVsZW0uc3R5bGUub3BhY2l0eSA9ICcnOwogIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKfTsKdmFyIHRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShlbGVtLCBjb25kaXRpb24sIGRpc3BsYXkpIHsKICBjb25kaXRpb24gPyBzaG93KGVsZW0sIGRpc3BsYXkpIDogaGlkZShlbGVtKTsKfTsgLy8gYm9ycm93ZWQgZnJvbSBqcXVlcnkgJChlbGVtKS5pcygnOnZpc2libGUnKSBpbXBsZW1lbnRhdGlvbgoKdmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZShlbGVtKSB7CiAgcmV0dXJuICEhKGVsZW0gJiYgKGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkpOwp9Owp2YXIgaXNTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNTY3JvbGxhYmxlKGVsZW0pIHsKICByZXR1cm4gISEoZWxlbS5zY3JvbGxIZWlnaHQgPiBlbGVtLmNsaWVudEhlaWdodCk7Cn07IC8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ2MzUyMTE5Cgp2YXIgaGFzQ3NzQW5pbWF0aW9uID0gZnVuY3Rpb24gaGFzQ3NzQW5pbWF0aW9uKGVsZW0pIHsKICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTsKICB2YXIgYW5pbUR1cmF0aW9uID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdhbmltYXRpb24tZHVyYXRpb24nKSB8fCAnMCcpOwogIHZhciB0cmFuc0R1cmF0aW9uID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2l0aW9uLWR1cmF0aW9uJykgfHwgJzAnKTsKICByZXR1cm4gYW5pbUR1cmF0aW9uID4gMCB8fCB0cmFuc0R1cmF0aW9uID4gMDsKfTsKdmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMoaGF5c3RhY2ssIG5lZWRsZSkgewogIGlmICh0eXBlb2YgaGF5c3RhY2suY29udGFpbnMgPT09ICdmdW5jdGlvbicpIHsKICAgIHJldHVybiBoYXlzdGFjay5jb250YWlucyhuZWVkbGUpOwogIH0KfTsKCnZhciBnZXRDb250YWluZXIgPSBmdW5jdGlvbiBnZXRDb250YWluZXIoKSB7CiAgcmV0dXJuIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcignLicgKyBzd2FsQ2xhc3Nlcy5jb250YWluZXIpOwp9Owp2YXIgZWxlbWVudEJ5U2VsZWN0b3IgPSBmdW5jdGlvbiBlbGVtZW50QnlTZWxlY3RvcihzZWxlY3RvclN0cmluZykgewogIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTsKICByZXR1cm4gY29udGFpbmVyID8gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JTdHJpbmcpIDogbnVsbDsKfTsKCnZhciBlbGVtZW50QnlDbGFzcyA9IGZ1bmN0aW9uIGVsZW1lbnRCeUNsYXNzKGNsYXNzTmFtZSkgewogIHJldHVybiBlbGVtZW50QnlTZWxlY3RvcignLicgKyBjbGFzc05hbWUpOwp9OwoKdmFyIGdldFBvcHVwID0gZnVuY3Rpb24gZ2V0UG9wdXAoKSB7CiAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLnBvcHVwKTsKfTsKdmFyIGdldEljb25zID0gZnVuY3Rpb24gZ2V0SWNvbnMoKSB7CiAgdmFyIHBvcHVwID0gZ2V0UG9wdXAoKTsKICByZXR1cm4gdG9BcnJheShwb3B1cC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHN3YWxDbGFzc2VzLmljb24pKTsKfTsKdmFyIGdldEljb24gPSBmdW5jdGlvbiBnZXRJY29uKCkgewogIHZhciB2aXNpYmxlSWNvbiA9IGdldEljb25zKCkuZmlsdGVyKGZ1bmN0aW9uIChpY29uKSB7CiAgICByZXR1cm4gaXNWaXNpYmxlKGljb24pOwogIH0pOwogIHJldHVybiB2aXNpYmxlSWNvbi5sZW5ndGggPyB2aXNpYmxlSWNvblswXSA6IG51bGw7Cn07CnZhciBnZXRUaXRsZSA9IGZ1bmN0aW9uIGdldFRpdGxlKCkgewogIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy50aXRsZSk7Cn07CnZhciBnZXRDb250ZW50ID0gZnVuY3Rpb24gZ2V0Q29udGVudCgpIHsKICByZXR1cm4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXMuY29udGVudCk7Cn07CnZhciBnZXRJbWFnZSA9IGZ1bmN0aW9uIGdldEltYWdlKCkgewogIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5pbWFnZSk7Cn07CnZhciBnZXRQcm9ncmVzc1N0ZXBzID0gZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NTdGVwcygpIHsKICByZXR1cm4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXNbJ3Byb2dyZXNzLXN0ZXBzJ10pOwp9Owp2YXIgZ2V0VmFsaWRhdGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiBnZXRWYWxpZGF0aW9uTWVzc2FnZSgpIHsKICByZXR1cm4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXNbJ3ZhbGlkYXRpb24tbWVzc2FnZSddKTsKfTsKdmFyIGdldENvbmZpcm1CdXR0b24gPSBmdW5jdGlvbiBnZXRDb25maXJtQnV0dG9uKCkgewogIHJldHVybiBlbGVtZW50QnlTZWxlY3RvcignLicgKyBzd2FsQ2xhc3Nlcy5hY3Rpb25zICsgJyAuJyArIHN3YWxDbGFzc2VzLmNvbmZpcm0pOwp9Owp2YXIgZ2V0Q2FuY2VsQnV0dG9uID0gZnVuY3Rpb24gZ2V0Q2FuY2VsQnV0dG9uKCkgewogIHJldHVybiBlbGVtZW50QnlTZWxlY3RvcignLicgKyBzd2FsQ2xhc3Nlcy5hY3Rpb25zICsgJyAuJyArIHN3YWxDbGFzc2VzLmNhbmNlbCk7Cn07CnZhciBnZXRBY3Rpb25zID0gZnVuY3Rpb24gZ2V0QWN0aW9ucygpIHsKICByZXR1cm4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXMuYWN0aW9ucyk7Cn07CnZhciBnZXRIZWFkZXIgPSBmdW5jdGlvbiBnZXRIZWFkZXIoKSB7CiAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmhlYWRlcik7Cn07CnZhciBnZXRGb290ZXIgPSBmdW5jdGlvbiBnZXRGb290ZXIoKSB7CiAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmZvb3Rlcik7Cn07CnZhciBnZXRDbG9zZUJ1dHRvbiA9IGZ1bmN0aW9uIGdldENsb3NlQnV0dG9uKCkgewogIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5jbG9zZSk7Cn07CnZhciBnZXRGb2N1c2FibGVFbGVtZW50cyA9IGZ1bmN0aW9uIGdldEZvY3VzYWJsZUVsZW1lbnRzKCkgewogIHZhciBmb2N1c2FibGVFbGVtZW50c1dpdGhUYWJpbmRleCA9IHRvQXJyYXkoZ2V0UG9wdXAoKS5xdWVyeVNlbGVjdG9yQWxsKCdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9Ii0xIl0pOm5vdChbdGFiaW5kZXg9IjAiXSknKSkgLy8gc29ydCBhY2NvcmRpbmcgdG8gdGFiaW5kZXgKICAuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgYSA9IHBhcnNlSW50KGEuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpKTsKICAgIGIgPSBwYXJzZUludChiLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSk7CgogICAgaWYgKGEgPiBiKSB7CiAgICAgIHJldHVybiAxOwogICAgfSBlbHNlIGlmIChhIDwgYikgewogICAgICByZXR1cm4gLTE7CiAgICB9CgogICAgcmV0dXJuIDA7CiAgfSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qa3VwL2ZvY3VzYWJsZS9ibG9iL21hc3Rlci9pbmRleC5qcwoKICB2YXIgb3RoZXJGb2N1c2FibGVFbGVtZW50cyA9IHRvQXJyYXkoZ2V0UG9wdXAoKS5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCBbdGFiaW5kZXg9IjAiXSwgW2NvbnRlbnRlZGl0YWJsZV0sIGF1ZGlvW2NvbnRyb2xzXSwgdmlkZW9bY29udHJvbHNdJykpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsKICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgIT09ICctMSc7CiAgfSk7CiAgcmV0dXJuIHVuaXF1ZUFycmF5KGZvY3VzYWJsZUVsZW1lbnRzV2l0aFRhYmluZGV4LmNvbmNhdChvdGhlckZvY3VzYWJsZUVsZW1lbnRzKSkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgewogICAgcmV0dXJuIGlzVmlzaWJsZShlbCk7CiAgfSk7Cn07CnZhciBpc01vZGFsID0gZnVuY3Rpb24gaXNNb2RhbCgpIHsKICByZXR1cm4gIWlzVG9hc3QoKSAmJiAhZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoc3dhbENsYXNzZXNbJ25vLWJhY2tkcm9wJ10pOwp9Owp2YXIgaXNUb2FzdCA9IGZ1bmN0aW9uIGlzVG9hc3QoKSB7CiAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKHN3YWxDbGFzc2VzWyd0b2FzdC1zaG93biddKTsKfTsKdmFyIGlzTG9hZGluZyA9IGZ1bmN0aW9uIGlzTG9hZGluZygpIHsKICByZXR1cm4gZ2V0UG9wdXAoKS5oYXNBdHRyaWJ1dGUoJ2RhdGEtbG9hZGluZycpOwp9OwoKLy8gRGV0ZWN0IE5vZGUgZW52CnZhciBpc05vZGVFbnYgPSBmdW5jdGlvbiBpc05vZGVFbnYoKSB7CiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7Cn07Cgp2YXIgc3dlZXRIVE1MID0gIlxuIDxkaXYgYXJpYS1sYWJlbGxlZGJ5PVwiIi5jb25jYXQoc3dhbENsYXNzZXMudGl0bGUsICJcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmNvbnRlbnQsICJcIiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5wb3B1cCwgIlwiIHRhYmluZGV4PVwiLTFcIj5cbiAgIDxkaXYgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuaGVhZGVyLCAiXCI+XG4gICAgIDx1bCBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlc1sncHJvZ3Jlc3Mtc3RlcHMnXSwgIlwiPjwvdWw+XG4gICAgIDxkaXYgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuaWNvbiwgIiAiKS5jb25jYXQoaWNvblR5cGVzLmVycm9yLCAiXCI+XG4gICAgICAgPHNwYW4gY2xhc3M9XCJzd2FsMi14LW1hcmtcIj48c3BhbiBjbGFzcz1cInN3YWwyLXgtbWFyay1saW5lLWxlZnRcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJzd2FsMi14LW1hcmstbGluZS1yaWdodFwiPjwvc3Bhbj48L3NwYW4+XG4gICAgIDwvZGl2PlxuICAgICA8ZGl2IGNsYXNzPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmljb24sICIgIikuY29uY2F0KGljb25UeXBlcy5xdWVzdGlvbiwgIlwiPjwvZGl2PlxuICAgICA8ZGl2IGNsYXNzPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmljb24sICIgIikuY29uY2F0KGljb25UeXBlcy53YXJuaW5nLCAiXCI+PC9kaXY+XG4gICAgIDxkaXYgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuaWNvbiwgIiAiKS5jb25jYXQoaWNvblR5cGVzLmluZm8sICJcIj48L2Rpdj5cbiAgICAgPGRpdiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5pY29uLCAiICIpLmNvbmNhdChpY29uVHlwZXMuc3VjY2VzcywgIlwiPlxuICAgICAgIDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmUtbGVmdFwiPjwvZGl2PlxuICAgICAgIDxzcGFuIGNsYXNzPVwic3dhbDItc3VjY2Vzcy1saW5lLXRpcFwiPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWxpbmUtbG9uZ1wiPjwvc3Bhbj5cbiAgICAgICA8ZGl2IGNsYXNzPVwic3dhbDItc3VjY2Vzcy1yaW5nXCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWZpeFwiPjwvZGl2PlxuICAgICAgIDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmUtcmlnaHRcIj48L2Rpdj5cbiAgICAgPC9kaXY+XG4gICAgIDxpbWcgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuaW1hZ2UsICJcIiAvPlxuICAgICA8aDIgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMudGl0bGUsICJcIiBpZD1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy50aXRsZSwgIlwiPjwvaDI+XG4gICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmNsb3NlLCAiXCI+PC9idXR0b24+XG4gICA8L2Rpdj5cbiAgIDxkaXYgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuY29udGVudCwgIlwiPlxuICAgICA8ZGl2IGlkPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmNvbnRlbnQsICJcIj48L2Rpdj5cbiAgICAgPGlucHV0IGNsYXNzPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmlucHV0LCAiXCIgLz5cbiAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuZmlsZSwgIlwiIC8+XG4gICAgIDxkaXYgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMucmFuZ2UsICJcIj5cbiAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgLz5cbiAgICAgICA8b3V0cHV0Pjwvb3V0cHV0PlxuICAgICA8L2Rpdj5cbiAgICAgPHNlbGVjdCBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5zZWxlY3QsICJcIj48L3NlbGVjdD5cbiAgICAgPGRpdiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5yYWRpbywgIlwiPjwvZGl2PlxuICAgICA8bGFiZWwgZm9yPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmNoZWNrYm94LCAiXCIgY2xhc3M9XCIiKS5jb25jYXQoc3dhbENsYXNzZXMuY2hlY2tib3gsICJcIj5cbiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgLz5cbiAgICAgICA8c3BhbiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5sYWJlbCwgIlwiPjwvc3Bhbj5cbiAgICAgPC9sYWJlbD5cbiAgICAgPHRleHRhcmVhIGNsYXNzPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLnRleHRhcmVhLCAiXCI+PC90ZXh0YXJlYT5cbiAgICAgPGRpdiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlc1sndmFsaWRhdGlvbi1tZXNzYWdlJ10sICJcIiBpZD1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlc1sndmFsaWRhdGlvbi1tZXNzYWdlJ10sICJcIj48L2Rpdj5cbiAgIDwvZGl2PlxuICAgPGRpdiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5hY3Rpb25zLCAiXCI+XG4gICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiIikuY29uY2F0KHN3YWxDbGFzc2VzLmNvbmZpcm0sICJcIj5PSzwvYnV0dG9uPlxuICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5jYW5jZWwsICJcIj5DYW5jZWw8L2J1dHRvbj5cbiAgIDwvZGl2PlxuICAgPGRpdiBjbGFzcz1cIiIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5mb290ZXIsICJcIj5cbiAgIDwvZGl2PlxuIDwvZGl2PlxuIikucmVwbGFjZSgvKF58XG4pXHMqL2csICcnKTsKCnZhciByZXNldE9sZENvbnRhaW5lciA9IGZ1bmN0aW9uIHJlc2V0T2xkQ29udGFpbmVyKCkgewogIHZhciBvbGRDb250YWluZXIgPSBnZXRDb250YWluZXIoKTsKCiAgaWYgKCFvbGRDb250YWluZXIpIHsKICAgIHJldHVybjsKICB9CgogIG9sZENvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZENvbnRhaW5lcik7CiAgcmVtb3ZlQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIFtzd2FsQ2xhc3Nlc1snbm8tYmFja2Ryb3AnXSwgc3dhbENsYXNzZXNbJ3RvYXN0LXNob3duJ10sIHN3YWxDbGFzc2VzWydoYXMtY29sdW1uJ11dKTsKfTsKCnZhciBvbGRJbnB1dFZhbDsgLy8gSUUxMSB3b3JrYXJvdW5kLCBzZWUgIzExMDkgZm9yIGRldGFpbHMKCnZhciByZXNldFZhbGlkYXRpb25NZXNzYWdlID0gZnVuY3Rpb24gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZShlKSB7CiAgaWYgKFN3YWwuaXNWaXNpYmxlKCkgJiYgb2xkSW5wdXRWYWwgIT09IGUudGFyZ2V0LnZhbHVlKSB7CiAgICBTd2FsLnJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UoKTsKICB9CgogIG9sZElucHV0VmFsID0gZS50YXJnZXQudmFsdWU7Cn07Cgp2YXIgYWRkSW5wdXRDaGFuZ2VMaXN0ZW5lcnMgPSBmdW5jdGlvbiBhZGRJbnB1dENoYW5nZUxpc3RlbmVycygpIHsKICB2YXIgY29udGVudCA9IGdldENvbnRlbnQoKTsKICB2YXIgaW5wdXQgPSBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXMuaW5wdXQpOwogIHZhciBmaWxlID0gZ2V0Q2hpbGRCeUNsYXNzKGNvbnRlbnQsIHN3YWxDbGFzc2VzLmZpbGUpOwogIHZhciByYW5nZSA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcigiLiIuY29uY2F0KHN3YWxDbGFzc2VzLnJhbmdlLCAiIGlucHV0IikpOwogIHZhciByYW5nZU91dHB1dCA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcigiLiIuY29uY2F0KHN3YWxDbGFzc2VzLnJhbmdlLCAiIG91dHB1dCIpKTsKICB2YXIgc2VsZWN0ID0gZ2V0Q2hpbGRCeUNsYXNzKGNvbnRlbnQsIHN3YWxDbGFzc2VzLnNlbGVjdCk7CiAgdmFyIGNoZWNrYm94ID0gY29udGVudC5xdWVyeVNlbGVjdG9yKCIuIi5jb25jYXQoc3dhbENsYXNzZXMuY2hlY2tib3gsICIgaW5wdXQiKSk7CiAgdmFyIHRleHRhcmVhID0gZ2V0Q2hpbGRCeUNsYXNzKGNvbnRlbnQsIHN3YWxDbGFzc2VzLnRleHRhcmVhKTsKICBpbnB1dC5vbmlucHV0ID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZTsKICBmaWxlLm9uY2hhbmdlID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZTsKICBzZWxlY3Qub25jaGFuZ2UgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlOwogIGNoZWNrYm94Lm9uY2hhbmdlID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZTsKICB0ZXh0YXJlYS5vbmlucHV0ID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZTsKCiAgcmFuZ2Uub25pbnB1dCA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXNldFZhbGlkYXRpb25NZXNzYWdlKGUpOwogICAgcmFuZ2VPdXRwdXQudmFsdWUgPSByYW5nZS52YWx1ZTsKICB9OwoKICByYW5nZS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXNldFZhbGlkYXRpb25NZXNzYWdlKGUpOwogICAgcmFuZ2UubmV4dFNpYmxpbmcudmFsdWUgPSByYW5nZS52YWx1ZTsKICB9Owp9OwoKdmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHsKICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCkgOiB0YXJnZXQ7Cn07Cgp2YXIgc2V0dXBBY2Nlc3NpYmlsaXR5ID0gZnVuY3Rpb24gc2V0dXBBY2Nlc3NpYmlsaXR5KHBhcmFtcykgewogIHZhciBwb3B1cCA9IGdldFBvcHVwKCk7CiAgcG9wdXAuc2V0QXR0cmlidXRlKCdyb2xlJywgcGFyYW1zLnRvYXN0ID8gJ2FsZXJ0JyA6ICdkaWFsb2cnKTsKICBwb3B1cC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIHBhcmFtcy50b2FzdCA/ICdwb2xpdGUnIDogJ2Fzc2VydGl2ZScpOwoKICBpZiAoIXBhcmFtcy50b2FzdCkgewogICAgcG9wdXAuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgJ3RydWUnKTsKICB9Cn07Cgp2YXIgc2V0dXBSVEwgPSBmdW5jdGlvbiBzZXR1cFJUTCh0YXJnZXRFbGVtZW50KSB7CiAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhcmdldEVsZW1lbnQpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHsKICAgIGFkZENsYXNzKGdldENvbnRhaW5lcigpLCBzd2FsQ2xhc3Nlcy5ydGwpOwogIH0KfTsKLyoKICogQWRkIG1vZGFsICsgYmFja2Ryb3AgdG8gRE9NCiAqLwoKCnZhciBpbml0ID0gZnVuY3Rpb24gaW5pdChwYXJhbXMpIHsKICAvLyBDbGVhbiB1cCB0aGUgb2xkIHBvcHVwIGNvbnRhaW5lciBpZiBpdCBleGlzdHMKICByZXNldE9sZENvbnRhaW5lcigpOwogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICBpZiAoaXNOb2RlRW52KCkpIHsKICAgIGVycm9yKCdTd2VldEFsZXJ0MiByZXF1aXJlcyBkb2N1bWVudCB0byBpbml0aWFsaXplJyk7CiAgICByZXR1cm47CiAgfQoKICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgY29udGFpbmVyLmNsYXNzTmFtZSA9IHN3YWxDbGFzc2VzLmNvbnRhaW5lcjsKICBjb250YWluZXIuaW5uZXJIVE1MID0gc3dlZXRIVE1MOwogIHZhciB0YXJnZXRFbGVtZW50ID0gZ2V0VGFyZ2V0KHBhcmFtcy50YXJnZXQpOwogIHRhcmdldEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKICBzZXR1cEFjY2Vzc2liaWxpdHkocGFyYW1zKTsKICBzZXR1cFJUTCh0YXJnZXRFbGVtZW50KTsKICBhZGRJbnB1dENoYW5nZUxpc3RlbmVycygpOwp9OwoKdmFyIHBhcnNlSHRtbFRvQ29udGFpbmVyID0gZnVuY3Rpb24gcGFyc2VIdG1sVG9Db250YWluZXIocGFyYW0sIHRhcmdldCkgewogIC8vIERPTSBlbGVtZW50CiAgaWYgKHBhcmFtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHsKICAgIHRhcmdldC5hcHBlbmRDaGlsZChwYXJhbSk7IC8vIEpRdWVyeSBlbGVtZW50KHMpCiAgfSBlbHNlIGlmIChfdHlwZW9mKHBhcmFtKSA9PT0gJ29iamVjdCcpIHsKICAgIGhhbmRsZUpxdWVyeUVsZW0odGFyZ2V0LCBwYXJhbSk7IC8vIFBsYWluIHN0cmluZwogIH0gZWxzZSBpZiAocGFyYW0pIHsKICAgIHRhcmdldC5pbm5lckhUTUwgPSBwYXJhbTsKICB9Cn07Cgp2YXIgaGFuZGxlSnF1ZXJ5RWxlbSA9IGZ1bmN0aW9uIGhhbmRsZUpxdWVyeUVsZW0odGFyZ2V0LCBlbGVtKSB7CiAgdGFyZ2V0LmlubmVySFRNTCA9ICcnOwoKICBpZiAoMCBpbiBlbGVtKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSBpbiBlbGVtOyBpKyspIHsKICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsZW1baV0uY2xvbmVOb2RlKHRydWUpKTsKICAgIH0KICB9IGVsc2UgewogICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsZW0uY2xvbmVOb2RlKHRydWUpKTsKICB9Cn07Cgp2YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSBmdW5jdGlvbiAoKSB7CiAgLy8gUHJldmVudCBydW4gaW4gTm9kZSBlbnYKCiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgaWYgKGlzTm9kZUVudigpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgdGVzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHsKICAgIFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsCiAgICBPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCBvYW5pbWF0aW9uZW5kJywKICAgIGFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcKICB9OwoKICBmb3IgKHZhciBpIGluIHRyYW5zRW5kRXZlbnROYW1lcykgewogICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0cmFuc0VuZEV2ZW50TmFtZXMsIGkpICYmIHR5cGVvZiB0ZXN0RWwuc3R5bGVbaV0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHJldHVybiB0cmFuc0VuZEV2ZW50TmFtZXNbaV07CiAgICB9CiAgfQoKICByZXR1cm4gZmFsc2U7Cn0oKTsKCi8vIE1lYXN1cmUgd2lkdGggb2Ygc2Nyb2xsYmFyCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9qcy9tb2RhbC5qcyNMMjc5LUwyODYKdmFyIG1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiBtZWFzdXJlU2Nyb2xsYmFyKCkgewogIHZhciBzdXBwb3J0c1RvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzOwoKICBpZiAoc3VwcG9ydHNUb3VjaCkgewogICAgcmV0dXJuIDA7CiAgfQoKICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzUwcHgnOwogIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnNTBweCc7CiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7CiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpOwogIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDsKICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7CiAgcmV0dXJuIHNjcm9sbGJhcldpZHRoOwp9OwoKZnVuY3Rpb24gaGFuZGxlQnV0dG9uc1N0eWxpbmcoY29uZmlybUJ1dHRvbiwgY2FuY2VsQnV0dG9uLCBwYXJhbXMpIHsKICBhZGRDbGFzcyhbY29uZmlybUJ1dHRvbiwgY2FuY2VsQnV0dG9uXSwgc3dhbENsYXNzZXMuc3R5bGVkKTsgLy8gQnV0dG9ucyBiYWNrZ3JvdW5kIGNvbG9ycwoKICBpZiAocGFyYW1zLmNvbmZpcm1CdXR0b25Db2xvcikgewogICAgY29uZmlybUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuY29uZmlybUJ1dHRvbkNvbG9yOwogIH0KCiAgaWYgKHBhcmFtcy5jYW5jZWxCdXR0b25Db2xvcikgewogICAgY2FuY2VsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHBhcmFtcy5jYW5jZWxCdXR0b25Db2xvcjsKICB9IC8vIExvYWRpbmcgc3RhdGUKCgogIHZhciBjb25maXJtQnV0dG9uQmFja2dyb3VuZENvbG9yID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY29uZmlybUJ1dHRvbikuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1jb2xvcicpOwogIGNvbmZpcm1CdXR0b24uc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gY29uZmlybUJ1dHRvbkJhY2tncm91bmRDb2xvcjsKICBjb25maXJtQnV0dG9uLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3IgPSBjb25maXJtQnV0dG9uQmFja2dyb3VuZENvbG9yOwp9CgpmdW5jdGlvbiByZW5kZXJCdXR0b24oYnV0dG9uLCBidXR0b25UeXBlLCBwYXJhbXMpIHsKICB0b2dnbGUoYnV0dG9uLCBwYXJhbXNbJ3Nob3dDJyArIGJ1dHRvblR5cGUuc3Vic3RyaW5nKDEpICsgJ0J1dHRvbiddLCAnaW5saW5lLWJsb2NrJyk7CiAgYnV0dG9uLmlubmVySFRNTCA9IHBhcmFtc1tidXR0b25UeXBlICsgJ0J1dHRvblRleHQnXTsgLy8gU2V0IGNhcHRpb24gdGV4dAoKICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgcGFyYW1zW2J1dHRvblR5cGUgKyAnQnV0dG9uQXJpYUxhYmVsJ10pOyAvLyBBUklBIGxhYmVsCiAgLy8gQWRkIGJ1dHRvbnMgY3VzdG9tIGNsYXNzZXMKCiAgYnV0dG9uLmNsYXNzTmFtZSA9IHN3YWxDbGFzc2VzW2J1dHRvblR5cGVdOwogIGFwcGx5Q3VzdG9tQ2xhc3MoYnV0dG9uLCBwYXJhbXMuY3VzdG9tQ2xhc3MsIGJ1dHRvblR5cGUgKyAnQnV0dG9uJyk7CiAgYWRkQ2xhc3MoYnV0dG9uLCBwYXJhbXNbYnV0dG9uVHlwZSArICdCdXR0b25DbGFzcyddKTsKfQoKdmFyIHJlbmRlckFjdGlvbnMgPSBmdW5jdGlvbiByZW5kZXJBY3Rpb25zKGluc3RhbmNlLCBwYXJhbXMpIHsKICB2YXIgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTsKICB2YXIgY29uZmlybUJ1dHRvbiA9IGdldENvbmZpcm1CdXR0b24oKTsKICB2YXIgY2FuY2VsQnV0dG9uID0gZ2V0Q2FuY2VsQnV0dG9uKCk7IC8vIEFjdGlvbnMgKGJ1dHRvbnMpIHdyYXBwZXIKCiAgaWYgKCFwYXJhbXMuc2hvd0NvbmZpcm1CdXR0b24gJiYgIXBhcmFtcy5zaG93Q2FuY2VsQnV0dG9uKSB7CiAgICBoaWRlKGFjdGlvbnMpOwogIH0gZWxzZSB7CiAgICBzaG93KGFjdGlvbnMpOwogIH0gLy8gQ3VzdG9tIGNsYXNzCgoKICBhcHBseUN1c3RvbUNsYXNzKGFjdGlvbnMsIHBhcmFtcy5jdXN0b21DbGFzcywgJ2FjdGlvbnMnKTsgLy8gUmVuZGVyIGNvbmZpcm0gYnV0dG9uCgogIHJlbmRlckJ1dHRvbihjb25maXJtQnV0dG9uLCAnY29uZmlybScsIHBhcmFtcyk7IC8vIHJlbmRlciBDYW5jZWwgQnV0dG9uCgogIHJlbmRlckJ1dHRvbihjYW5jZWxCdXR0b24sICdjYW5jZWwnLCBwYXJhbXMpOwoKICBpZiAocGFyYW1zLmJ1dHRvbnNTdHlsaW5nKSB7CiAgICBoYW5kbGVCdXR0b25zU3R5bGluZyhjb25maXJtQnV0dG9uLCBjYW5jZWxCdXR0b24sIHBhcmFtcyk7CiAgfSBlbHNlIHsKICAgIHJlbW92ZUNsYXNzKFtjb25maXJtQnV0dG9uLCBjYW5jZWxCdXR0b25dLCBzd2FsQ2xhc3Nlcy5zdHlsZWQpOwogICAgY29uZmlybUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb25maXJtQnV0dG9uLnN0eWxlLmJvcmRlckxlZnRDb2xvciA9IGNvbmZpcm1CdXR0b24uc3R5bGUuYm9yZGVyUmlnaHRDb2xvciA9ICcnOwogICAgY2FuY2VsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNhbmNlbEJ1dHRvbi5zdHlsZS5ib3JkZXJMZWZ0Q29sb3IgPSBjYW5jZWxCdXR0b24uc3R5bGUuYm9yZGVyUmlnaHRDb2xvciA9ICcnOwogIH0KfTsKCmZ1bmN0aW9uIGhhbmRsZUJhY2tkcm9wUGFyYW0oY29udGFpbmVyLCBiYWNrZHJvcCkgewogIGlmICh0eXBlb2YgYmFja2Ryb3AgPT09ICdzdHJpbmcnKSB7CiAgICBjb250YWluZXIuc3R5bGUuYmFja2dyb3VuZCA9IGJhY2tkcm9wOwogIH0gZWxzZSBpZiAoIWJhY2tkcm9wKSB7CiAgICBhZGRDbGFzcyhbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudC5ib2R5XSwgc3dhbENsYXNzZXNbJ25vLWJhY2tkcm9wJ10pOwogIH0KfQoKZnVuY3Rpb24gaGFuZGxlUG9zaXRpb25QYXJhbShjb250YWluZXIsIHBvc2l0aW9uKSB7CiAgaWYgKHBvc2l0aW9uIGluIHN3YWxDbGFzc2VzKSB7CiAgICBhZGRDbGFzcyhjb250YWluZXIsIHN3YWxDbGFzc2VzW3Bvc2l0aW9uXSk7CiAgfSBlbHNlIHsKICAgIHdhcm4oJ1RoZSAicG9zaXRpb24iIHBhcmFtZXRlciBpcyBub3QgdmFsaWQsIGRlZmF1bHRpbmcgdG8gImNlbnRlciInKTsKICAgIGFkZENsYXNzKGNvbnRhaW5lciwgc3dhbENsYXNzZXMuY2VudGVyKTsKICB9Cn0KCmZ1bmN0aW9uIGhhbmRsZUdyb3dQYXJhbShjb250YWluZXIsIGdyb3cpIHsKICBpZiAoZ3JvdyAmJiB0eXBlb2YgZ3JvdyA9PT0gJ3N0cmluZycpIHsKICAgIHZhciBncm93Q2xhc3MgPSAnZ3Jvdy0nICsgZ3JvdzsKCiAgICBpZiAoZ3Jvd0NsYXNzIGluIHN3YWxDbGFzc2VzKSB7CiAgICAgIGFkZENsYXNzKGNvbnRhaW5lciwgc3dhbENsYXNzZXNbZ3Jvd0NsYXNzXSk7CiAgICB9CiAgfQp9Cgp2YXIgcmVuZGVyQ29udGFpbmVyID0gZnVuY3Rpb24gcmVuZGVyQ29udGFpbmVyKGluc3RhbmNlLCBwYXJhbXMpIHsKICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7CgogIGlmICghY29udGFpbmVyKSB7CiAgICByZXR1cm47CiAgfQoKICBoYW5kbGVCYWNrZHJvcFBhcmFtKGNvbnRhaW5lciwgcGFyYW1zLmJhY2tkcm9wKTsKCiAgaWYgKCFwYXJhbXMuYmFja2Ryb3AgJiYgcGFyYW1zLmFsbG93T3V0c2lkZUNsaWNrKSB7CiAgICB3YXJuKCciYWxsb3dPdXRzaWRlQ2xpY2siIHBhcmFtZXRlciByZXF1aXJlcyBgYmFja2Ryb3BgIHBhcmFtZXRlciB0byBiZSBzZXQgdG8gYHRydWVgJyk7CiAgfQoKICBoYW5kbGVQb3NpdGlvblBhcmFtKGNvbnRhaW5lciwgcGFyYW1zLnBvc2l0aW9uKTsKICBoYW5kbGVHcm93UGFyYW0oY29udGFpbmVyLCBwYXJhbXMuZ3Jvdyk7IC8vIEN1c3RvbSBjbGFzcwoKICBhcHBseUN1c3RvbUNsYXNzKGNvbnRhaW5lciwgcGFyYW1zLmN1c3RvbUNsYXNzLCAnY29udGFpbmVyJyk7CgogIGlmIChwYXJhbXMuY3VzdG9tQ29udGFpbmVyQ2xhc3MpIHsKICAgIC8vIEBkZXByZWNhdGVkCiAgICBhZGRDbGFzcyhjb250YWluZXIsIHBhcmFtcy5jdXN0b21Db250YWluZXJDbGFzcyk7CiAgfQp9OwoKLyoqCiAqIFRoaXMgbW9kdWxlIGNvbnRhaW50cyBgV2Vha01hcGBzIGZvciBlYWNoIGVmZmVjdGl2ZWx5LSJwcml2YXRlICBwcm9wZXJ0eSIgdGhhdCBhIGBTd2FsYCBoYXMuCiAqIEZvciBleGFtcGxlLCB0byBzZXQgdGhlIHByaXZhdGUgcHJvcGVydHkgImZvbyIgb2YgYHRoaXNgIHRvICJiYXIiLCB5b3UgY2FuIGBwcml2YXRlUHJvcHMuZm9vLnNldCh0aGlzLCAnYmFyJylgCiAqIFRoaXMgaXMgdGhlIGFwcHJvYWNoIHRoYXQgQmFiZWwgd2lsbCBwcm9iYWJseSB0YWtlIHRvIGltcGxlbWVudCBwcml2YXRlIG1ldGhvZHMvZmllbGRzCiAqICAgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJpdmF0ZS1tZXRob2RzCiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL3B1bGwvNzU1NQogKiBPbmNlIHdlIGhhdmUgdGhlIGNoYW5nZXMgZnJvbSB0aGF0IFBSIGluIEJhYmVsLCBhbmQgb3VyIGNvcmUgY2xhc3MgZml0cyByZWFzb25hYmxlIGluICpvbmUgbW9kdWxlKgogKiAgIHRoZW4gd2UgY2FuIHVzZSB0aGF0IGxhbmd1YWdlIGZlYXR1cmUuCiAqLwp2YXIgcHJpdmF0ZVByb3BzID0gewogIHByb21pc2U6IG5ldyBXZWFrTWFwKCksCiAgaW5uZXJQYXJhbXM6IG5ldyBXZWFrTWFwKCksCiAgZG9tQ2FjaGU6IG5ldyBXZWFrTWFwKCkKfTsKCnZhciBpbnB1dFR5cGVzID0gWydpbnB1dCcsICdmaWxlJywgJ3JhbmdlJywgJ3NlbGVjdCcsICdyYWRpbycsICdjaGVja2JveCcsICd0ZXh0YXJlYSddOwp2YXIgcmVuZGVySW5wdXQgPSBmdW5jdGlvbiByZW5kZXJJbnB1dChpbnN0YW5jZSwgcGFyYW1zKSB7CiAgdmFyIGNvbnRlbnQgPSBnZXRDb250ZW50KCk7CiAgdmFyIGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7CiAgdmFyIHJlcmVuZGVyID0gIWlubmVyUGFyYW1zIHx8IHBhcmFtcy5pbnB1dCAhPT0gaW5uZXJQYXJhbXMuaW5wdXQ7CiAgaW5wdXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dFR5cGUpIHsKICAgIHZhciBpbnB1dENsYXNzID0gc3dhbENsYXNzZXNbaW5wdXRUeXBlXTsKICAgIHZhciBpbnB1dENvbnRhaW5lciA9IGdldENoaWxkQnlDbGFzcyhjb250ZW50LCBpbnB1dENsYXNzKTsgLy8gc2V0IGF0dHJpYnV0ZXMKCiAgICBzZXRBdHRyaWJ1dGVzKGlucHV0VHlwZSwgcGFyYW1zLmlucHV0QXR0cmlidXRlcyk7IC8vIHNldCBjbGFzcwoKICAgIHNldENsYXNzKGlucHV0Q29udGFpbmVyLCBpbnB1dENsYXNzLCBwYXJhbXMpOwoKICAgIGlmIChyZXJlbmRlcikgewogICAgICBoaWRlKGlucHV0Q29udGFpbmVyKTsKICAgIH0KICB9KTsKCiAgaWYgKHBhcmFtcy5pbnB1dCAmJiByZXJlbmRlcikgewogICAgc2hvd0lucHV0KHBhcmFtcyk7CiAgfQp9OwoKdmFyIHNob3dJbnB1dCA9IGZ1bmN0aW9uIHNob3dJbnB1dChwYXJhbXMpIHsKICBpZiAoIXJlbmRlcklucHV0VHlwZVtwYXJhbXMuaW5wdXRdKSB7CiAgICByZXR1cm4gZXJyb3IoIlVuZXhwZWN0ZWQgdHlwZSBvZiBpbnB1dCEgRXhwZWN0ZWQgXCJ0ZXh0XCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcIm51bWJlclwiLCBcInRlbFwiLCBcInNlbGVjdFwiLCBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiwgXCJ0ZXh0YXJlYVwiLCBcImZpbGVcIiBvciBcInVybFwiLCBnb3QgXCIiLmNvbmNhdChwYXJhbXMuaW5wdXQsICJcIiIpKTsKICB9CgogIHZhciBpbnB1dCA9IHJlbmRlcklucHV0VHlwZVtwYXJhbXMuaW5wdXRdKHBhcmFtcyk7CiAgc2hvdyhpbnB1dCk7Cn07Cgp2YXIgcmVtb3ZlQXR0cmlidXRlcyA9IGZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZXMoaW5wdXQpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0LmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBhdHRyTmFtZSA9IGlucHV0LmF0dHJpYnV0ZXNbaV0ubmFtZTsKCiAgICBpZiAoIShbJ3R5cGUnLCAndmFsdWUnLCAnc3R5bGUnXS5pbmRleE9mKGF0dHJOYW1lKSAhPT0gLTEpKSB7CiAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7CiAgICB9CiAgfQp9OwoKdmFyIHNldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGlucHV0VHlwZSwgaW5wdXRBdHRyaWJ1dGVzKSB7CiAgdmFyIGlucHV0ID0gZ2V0SW5wdXQoZ2V0Q29udGVudCgpLCBpbnB1dFR5cGUpOwoKICBpZiAoIWlucHV0KSB7CiAgICByZXR1cm47CiAgfQoKICByZW1vdmVBdHRyaWJ1dGVzKGlucHV0KTsKCiAgZm9yICh2YXIgYXR0ciBpbiBpbnB1dEF0dHJpYnV0ZXMpIHsKICAgIC8vIERvIG5vdCBzZXQgYSBwbGFjZWhvbGRlciBmb3IgPGlucHV0IHR5cGU9InJhbmdlIj4KICAgIC8vIGl0J2xsIGNyYXNoIEVkZ2UsICMxMjk4CiAgICBpZiAoaW5wdXRUeXBlID09PSAncmFuZ2UnICYmIGF0dHIgPT09ICdwbGFjZWhvbGRlcicpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaW5wdXQuc2V0QXR0cmlidXRlKGF0dHIsIGlucHV0QXR0cmlidXRlc1thdHRyXSk7CiAgfQp9OwoKdmFyIHNldENsYXNzID0gZnVuY3Rpb24gc2V0Q2xhc3MoaW5wdXRDb250YWluZXIsIGlucHV0Q2xhc3MsIHBhcmFtcykgewogIGlucHV0Q29udGFpbmVyLmNsYXNzTmFtZSA9IGlucHV0Q2xhc3M7CgogIGlmIChwYXJhbXMuaW5wdXRDbGFzcykgewogICAgYWRkQ2xhc3MoaW5wdXRDb250YWluZXIsIHBhcmFtcy5pbnB1dENsYXNzKTsKICB9CgogIGlmIChwYXJhbXMuY3VzdG9tQ2xhc3MpIHsKICAgIGFkZENsYXNzKGlucHV0Q29udGFpbmVyLCBwYXJhbXMuY3VzdG9tQ2xhc3MuaW5wdXQpOwogIH0KfTsKCnZhciBzZXRJbnB1dFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gc2V0SW5wdXRQbGFjZWhvbGRlcihpbnB1dCwgcGFyYW1zKSB7CiAgaWYgKCFpbnB1dC5wbGFjZWhvbGRlciB8fCBwYXJhbXMuaW5wdXRQbGFjZWhvbGRlcikgewogICAgaW5wdXQucGxhY2Vob2xkZXIgPSBwYXJhbXMuaW5wdXRQbGFjZWhvbGRlcjsKICB9Cn07Cgp2YXIgcmVuZGVySW5wdXRUeXBlID0ge307CgpyZW5kZXJJbnB1dFR5cGUudGV4dCA9IHJlbmRlcklucHV0VHlwZS5lbWFpbCA9IHJlbmRlcklucHV0VHlwZS5wYXNzd29yZCA9IHJlbmRlcklucHV0VHlwZS5udW1iZXIgPSByZW5kZXJJbnB1dFR5cGUudGVsID0gcmVuZGVySW5wdXRUeXBlLnVybCA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICB2YXIgaW5wdXQgPSBnZXRDaGlsZEJ5Q2xhc3MoZ2V0Q29udGVudCgpLCBzd2FsQ2xhc3Nlcy5pbnB1dCk7CgogIGlmICh0eXBlb2YgcGFyYW1zLmlucHV0VmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBwYXJhbXMuaW5wdXRWYWx1ZSA9PT0gJ251bWJlcicpIHsKICAgIGlucHV0LnZhbHVlID0gcGFyYW1zLmlucHV0VmFsdWU7CiAgfSBlbHNlIGlmICghaXNQcm9taXNlKHBhcmFtcy5pbnB1dFZhbHVlKSkgewogICAgd2FybigiVW5leHBlY3RlZCB0eXBlIG9mIGlucHV0VmFsdWUhIEV4cGVjdGVkIFwic3RyaW5nXCIsIFwibnVtYmVyXCIgb3IgXCJQcm9taXNlXCIsIGdvdCBcIiIuY29uY2F0KF90eXBlb2YocGFyYW1zLmlucHV0VmFsdWUpLCAiXCIiKSk7CiAgfQoKICBzZXRJbnB1dFBsYWNlaG9sZGVyKGlucHV0LCBwYXJhbXMpOwogIGlucHV0LnR5cGUgPSBwYXJhbXMuaW5wdXQ7CiAgcmV0dXJuIGlucHV0Owp9OwoKcmVuZGVySW5wdXRUeXBlLmZpbGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7CiAgdmFyIGlucHV0ID0gZ2V0Q2hpbGRCeUNsYXNzKGdldENvbnRlbnQoKSwgc3dhbENsYXNzZXMuZmlsZSk7CiAgc2V0SW5wdXRQbGFjZWhvbGRlcihpbnB1dCwgcGFyYW1zKTsKICBpbnB1dC50eXBlID0gcGFyYW1zLmlucHV0OwogIHJldHVybiBpbnB1dDsKfTsKCnJlbmRlcklucHV0VHlwZS5yYW5nZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICB2YXIgcmFuZ2UgPSBnZXRDaGlsZEJ5Q2xhc3MoZ2V0Q29udGVudCgpLCBzd2FsQ2xhc3Nlcy5yYW5nZSk7CiAgdmFyIHJhbmdlSW5wdXQgPSByYW5nZS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpOwogIHZhciByYW5nZU91dHB1dCA9IHJhbmdlLnF1ZXJ5U2VsZWN0b3IoJ291dHB1dCcpOwogIHJhbmdlSW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTsKICByYW5nZUlucHV0LnR5cGUgPSBwYXJhbXMuaW5wdXQ7CiAgcmFuZ2VPdXRwdXQudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTsKICByZXR1cm4gcmFuZ2U7Cn07CgpyZW5kZXJJbnB1dFR5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHBhcmFtcykgewogIHZhciBzZWxlY3QgPSBnZXRDaGlsZEJ5Q2xhc3MoZ2V0Q29udGVudCgpLCBzd2FsQ2xhc3Nlcy5zZWxlY3QpOwogIHNlbGVjdC5pbm5lckhUTUwgPSAnJzsKCiAgaWYgKHBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyKSB7CiAgICB2YXIgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTsKICAgIHBsYWNlaG9sZGVyLmlubmVySFRNTCA9IHBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyOwogICAgcGxhY2Vob2xkZXIudmFsdWUgPSAnJzsKICAgIHBsYWNlaG9sZGVyLmRpc2FibGVkID0gdHJ1ZTsKICAgIHBsYWNlaG9sZGVyLnNlbGVjdGVkID0gdHJ1ZTsKICAgIHNlbGVjdC5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7CiAgfQoKICByZXR1cm4gc2VsZWN0Owp9OwoKcmVuZGVySW5wdXRUeXBlLnJhZGlvID0gZnVuY3Rpb24gKCkgewogIHZhciByYWRpbyA9IGdldENoaWxkQnlDbGFzcyhnZXRDb250ZW50KCksIHN3YWxDbGFzc2VzLnJhZGlvKTsKICByYWRpby5pbm5lckhUTUwgPSAnJzsKICByZXR1cm4gcmFkaW87Cn07CgpyZW5kZXJJbnB1dFR5cGUuY2hlY2tib3ggPSBmdW5jdGlvbiAocGFyYW1zKSB7CiAgdmFyIGNoZWNrYm94ID0gZ2V0Q2hpbGRCeUNsYXNzKGdldENvbnRlbnQoKSwgc3dhbENsYXNzZXMuY2hlY2tib3gpOwogIHZhciBjaGVja2JveElucHV0ID0gZ2V0SW5wdXQoZ2V0Q29udGVudCgpLCAnY2hlY2tib3gnKTsKICBjaGVja2JveElucHV0LnR5cGUgPSAnY2hlY2tib3gnOwogIGNoZWNrYm94SW5wdXQudmFsdWUgPSAxOwogIGNoZWNrYm94SW5wdXQuaWQgPSBzd2FsQ2xhc3Nlcy5jaGVja2JveDsKICBjaGVja2JveElucHV0LmNoZWNrZWQgPSBCb29sZWFuKHBhcmFtcy5pbnB1dFZhbHVlKTsKICB2YXIgbGFiZWwgPSBjaGVja2JveC5xdWVyeVNlbGVjdG9yKCdzcGFuJyk7CiAgbGFiZWwuaW5uZXJIVE1MID0gcGFyYW1zLmlucHV0UGxhY2Vob2xkZXI7CiAgcmV0dXJuIGNoZWNrYm94Owp9OwoKcmVuZGVySW5wdXRUeXBlLnRleHRhcmVhID0gZnVuY3Rpb24gKHBhcmFtcykgewogIHZhciB0ZXh0YXJlYSA9IGdldENoaWxkQnlDbGFzcyhnZXRDb250ZW50KCksIHN3YWxDbGFzc2VzLnRleHRhcmVhKTsKICB0ZXh0YXJlYS52YWx1ZSA9IHBhcmFtcy5pbnB1dFZhbHVlOwogIHNldElucHV0UGxhY2Vob2xkZXIodGV4dGFyZWEsIHBhcmFtcyk7CiAgcmV0dXJuIHRleHRhcmVhOwp9OwoKdmFyIHJlbmRlckNvbnRlbnQgPSBmdW5jdGlvbiByZW5kZXJDb250ZW50KGluc3RhbmNlLCBwYXJhbXMpIHsKICB2YXIgY29udGVudCA9IGdldENvbnRlbnQoKS5xdWVyeVNlbGVjdG9yKCcjJyArIHN3YWxDbGFzc2VzLmNvbnRlbnQpOyAvLyBDb250ZW50IGFzIEhUTUwKCiAgaWYgKHBhcmFtcy5odG1sKSB7CiAgICBwYXJzZUh0bWxUb0NvbnRhaW5lcihwYXJhbXMuaHRtbCwgY29udGVudCk7CiAgICBzaG93KGNvbnRlbnQsICdibG9jaycpOyAvLyBDb250ZW50IGFzIHBsYWluIHRleHQKICB9IGVsc2UgaWYgKHBhcmFtcy50ZXh0KSB7CiAgICBjb250ZW50LnRleHRDb250ZW50ID0gcGFyYW1zLnRleHQ7CiAgICBzaG93KGNvbnRlbnQsICdibG9jaycpOyAvLyBObyBjb250ZW50CiAgfSBlbHNlIHsKICAgIGhpZGUoY29udGVudCk7CiAgfQoKICByZW5kZXJJbnB1dChpbnN0YW5jZSwgcGFyYW1zKTsgLy8gQ3VzdG9tIGNsYXNzCgogIGFwcGx5Q3VzdG9tQ2xhc3MoZ2V0Q29udGVudCgpLCBwYXJhbXMuY3VzdG9tQ2xhc3MsICdjb250ZW50Jyk7Cn07Cgp2YXIgcmVuZGVyRm9vdGVyID0gZnVuY3Rpb24gcmVuZGVyRm9vdGVyKGluc3RhbmNlLCBwYXJhbXMpIHsKICB2YXIgZm9vdGVyID0gZ2V0Rm9vdGVyKCk7CiAgdG9nZ2xlKGZvb3RlciwgcGFyYW1zLmZvb3Rlcik7CgogIGlmIChwYXJhbXMuZm9vdGVyKSB7CiAgICBwYXJzZUh0bWxUb0NvbnRhaW5lcihwYXJhbXMuZm9vdGVyLCBmb290ZXIpOwogIH0gLy8gQ3VzdG9tIGNsYXNzCgoKICBhcHBseUN1c3RvbUNsYXNzKGZvb3RlciwgcGFyYW1zLmN1c3RvbUNsYXNzLCAnZm9vdGVyJyk7Cn07Cgp2YXIgcmVuZGVyQ2xvc2VCdXR0b24gPSBmdW5jdGlvbiByZW5kZXJDbG9zZUJ1dHRvbihpbnN0YW5jZSwgcGFyYW1zKSB7CiAgdmFyIGNsb3NlQnV0dG9uID0gZ2V0Q2xvc2VCdXR0b24oKTsKICBjbG9zZUJ1dHRvbi5pbm5lckhUTUwgPSBwYXJhbXMuY2xvc2VCdXR0b25IdG1sOyAvLyBDdXN0b20gY2xhc3MKCiAgYXBwbHlDdXN0b21DbGFzcyhjbG9zZUJ1dHRvbiwgcGFyYW1zLmN1c3RvbUNsYXNzLCAnY2xvc2VCdXR0b24nKTsKICB0b2dnbGUoY2xvc2VCdXR0b24sIHBhcmFtcy5zaG93Q2xvc2VCdXR0b24pOwogIGNsb3NlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHBhcmFtcy5jbG9zZUJ1dHRvbkFyaWFMYWJlbCk7Cn07Cgp2YXIgcmVuZGVySWNvbiA9IGZ1bmN0aW9uIHJlbmRlckljb24oaW5zdGFuY2UsIHBhcmFtcykgewogIHZhciBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UpOyAvLyBpZiB0aGUgaWNvbiB3aXRoIHRoZSBnaXZlbiB0eXBlIGFscmVhZHkgcmVuZGVyZWQsCiAgLy8gYXBwbHkgdGhlIGN1c3RvbSBjbGFzcyB3aXRob3V0IHJlLXJlbmRlcmluZyB0aGUgaWNvbgoKICBpZiAoaW5uZXJQYXJhbXMgJiYgcGFyYW1zLnR5cGUgPT09IGlubmVyUGFyYW1zLnR5cGUgJiYgZ2V0SWNvbigpKSB7CiAgICBhcHBseUN1c3RvbUNsYXNzKGdldEljb24oKSwgcGFyYW1zLmN1c3RvbUNsYXNzLCAnaWNvbicpOwogICAgcmV0dXJuOwogIH0KCiAgaGlkZUFsbEljb25zKCk7CgogIGlmICghcGFyYW1zLnR5cGUpIHsKICAgIHJldHVybjsKICB9CgogIGFkanVzdFN1Y2Nlc3NJY29uQmFja2dvdW5kQ29sb3IoKTsKCiAgaWYgKE9iamVjdC5rZXlzKGljb25UeXBlcykuaW5kZXhPZihwYXJhbXMudHlwZSkgIT09IC0xKSB7CiAgICB2YXIgaWNvbiA9IGVsZW1lbnRCeVNlbGVjdG9yKCIuIi5jb25jYXQoc3dhbENsYXNzZXMuaWNvbiwgIi4iKS5jb25jYXQoaWNvblR5cGVzW3BhcmFtcy50eXBlXSkpOwogICAgc2hvdyhpY29uKTsgLy8gQ3VzdG9tIGNsYXNzCgogICAgYXBwbHlDdXN0b21DbGFzcyhpY29uLCBwYXJhbXMuY3VzdG9tQ2xhc3MsICdpY29uJyk7IC8vIEFuaW1hdGUgaWNvbgoKICAgIHRvZ2dsZUNsYXNzKGljb24sICJzd2FsMi1hbmltYXRlLSIuY29uY2F0KHBhcmFtcy50eXBlLCAiLWljb24iKSwgcGFyYW1zLmFuaW1hdGlvbik7CiAgfSBlbHNlIHsKICAgIGVycm9yKCJVbmtub3duIHR5cGUhIEV4cGVjdGVkIFwic3VjY2Vzc1wiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiBvciBcInF1ZXN0aW9uXCIsIGdvdCBcIiIuY29uY2F0KHBhcmFtcy50eXBlLCAiXCIiKSk7CiAgfQp9OwoKdmFyIGhpZGVBbGxJY29ucyA9IGZ1bmN0aW9uIGhpZGVBbGxJY29ucygpIHsKICB2YXIgaWNvbnMgPSBnZXRJY29ucygpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGljb25zLmxlbmd0aDsgaSsrKSB7CiAgICBoaWRlKGljb25zW2ldKTsKICB9Cn07IC8vIEFkanVzdCBzdWNjZXNzIGljb24gYmFja2dyb3VuZCBjb2xvciB0byBtYXRjaCB0aGUgcG9wdXAgYmFja2dyb3VuZCBjb2xvcgoKCnZhciBhZGp1c3RTdWNjZXNzSWNvbkJhY2tnb3VuZENvbG9yID0gZnVuY3Rpb24gYWRqdXN0U3VjY2Vzc0ljb25CYWNrZ291bmRDb2xvcigpIHsKICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpOwogIHZhciBwb3B1cEJhY2tncm91bmRDb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBvcHVwKS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWNvbG9yJyk7CiAgdmFyIHN1Y2Nlc3NJY29uUGFydHMgPSBwb3B1cC5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV0sIC5zd2FsMi1zdWNjZXNzLWZpeCcpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Y2Nlc3NJY29uUGFydHMubGVuZ3RoOyBpKyspIHsKICAgIHN1Y2Nlc3NJY29uUGFydHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcG9wdXBCYWNrZ3JvdW5kQ29sb3I7CiAgfQp9OwoKdmFyIHJlbmRlckltYWdlID0gZnVuY3Rpb24gcmVuZGVySW1hZ2UoaW5zdGFuY2UsIHBhcmFtcykgewogIHZhciBpbWFnZSA9IGdldEltYWdlKCk7CgogIGlmICghcGFyYW1zLmltYWdlVXJsKSB7CiAgICByZXR1cm4gaGlkZShpbWFnZSk7CiAgfQoKICBzaG93KGltYWdlKTsgLy8gU3JjLCBhbHQKCiAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCBwYXJhbXMuaW1hZ2VVcmwpOwogIGltYWdlLnNldEF0dHJpYnV0ZSgnYWx0JywgcGFyYW1zLmltYWdlQWx0KTsgLy8gV2lkdGgsIGhlaWdodAoKICBhcHBseU51bWVyaWNhbFN0eWxlKGltYWdlLCAnd2lkdGgnLCBwYXJhbXMuaW1hZ2VXaWR0aCk7CiAgYXBwbHlOdW1lcmljYWxTdHlsZShpbWFnZSwgJ2hlaWdodCcsIHBhcmFtcy5pbWFnZUhlaWdodCk7IC8vIENsYXNzCgogIGltYWdlLmNsYXNzTmFtZSA9IHN3YWxDbGFzc2VzLmltYWdlOwogIGFwcGx5Q3VzdG9tQ2xhc3MoaW1hZ2UsIHBhcmFtcy5jdXN0b21DbGFzcywgJ2ltYWdlJyk7CgogIGlmIChwYXJhbXMuaW1hZ2VDbGFzcykgewogICAgYWRkQ2xhc3MoaW1hZ2UsIHBhcmFtcy5pbWFnZUNsYXNzKTsKICB9Cn07Cgp2YXIgY3JlYXRlU3RlcEVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVTdGVwRWxlbWVudChzdGVwKSB7CiAgdmFyIHN0ZXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgYWRkQ2xhc3Moc3RlcEVsLCBzd2FsQ2xhc3Nlc1sncHJvZ3Jlc3Mtc3RlcCddKTsKICBzdGVwRWwuaW5uZXJIVE1MID0gc3RlcDsKICByZXR1cm4gc3RlcEVsOwp9OwoKdmFyIGNyZWF0ZUxpbmVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlTGluZUVsZW1lbnQocGFyYW1zKSB7CiAgdmFyIGxpbmVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgYWRkQ2xhc3MobGluZUVsLCBzd2FsQ2xhc3Nlc1sncHJvZ3Jlc3Mtc3RlcC1saW5lJ10pOwoKICBpZiAocGFyYW1zLnByb2dyZXNzU3RlcHNEaXN0YW5jZSkgewogICAgbGluZUVsLnN0eWxlLndpZHRoID0gcGFyYW1zLnByb2dyZXNzU3RlcHNEaXN0YW5jZTsKICB9CgogIHJldHVybiBsaW5lRWw7Cn07Cgp2YXIgcmVuZGVyUHJvZ3Jlc3NTdGVwcyA9IGZ1bmN0aW9uIHJlbmRlclByb2dyZXNzU3RlcHMoaW5zdGFuY2UsIHBhcmFtcykgewogIHZhciBwcm9ncmVzc1N0ZXBzQ29udGFpbmVyID0gZ2V0UHJvZ3Jlc3NTdGVwcygpOwoKICBpZiAoIXBhcmFtcy5wcm9ncmVzc1N0ZXBzIHx8IHBhcmFtcy5wcm9ncmVzc1N0ZXBzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIGhpZGUocHJvZ3Jlc3NTdGVwc0NvbnRhaW5lcik7CiAgfQoKICBzaG93KHByb2dyZXNzU3RlcHNDb250YWluZXIpOwogIHByb2dyZXNzU3RlcHNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7CiAgdmFyIGN1cnJlbnRQcm9ncmVzc1N0ZXAgPSBwYXJzZUludChwYXJhbXMuY3VycmVudFByb2dyZXNzU3RlcCA9PT0gbnVsbCA/IFN3YWwuZ2V0UXVldWVTdGVwKCkgOiBwYXJhbXMuY3VycmVudFByb2dyZXNzU3RlcCk7CgogIGlmIChjdXJyZW50UHJvZ3Jlc3NTdGVwID49IHBhcmFtcy5wcm9ncmVzc1N0ZXBzLmxlbmd0aCkgewogICAgd2FybignSW52YWxpZCBjdXJyZW50UHJvZ3Jlc3NTdGVwIHBhcmFtZXRlciwgaXQgc2hvdWxkIGJlIGxlc3MgdGhhbiBwcm9ncmVzc1N0ZXBzLmxlbmd0aCAnICsgJyhjdXJyZW50UHJvZ3Jlc3NTdGVwIGxpa2UgSlMgYXJyYXlzIHN0YXJ0cyBmcm9tIDApJyk7CiAgfQoKICBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkgewogICAgdmFyIHN0ZXBFbCA9IGNyZWF0ZVN0ZXBFbGVtZW50KHN0ZXApOwogICAgcHJvZ3Jlc3NTdGVwc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzdGVwRWwpOwoKICAgIGlmIChpbmRleCA9PT0gY3VycmVudFByb2dyZXNzU3RlcCkgewogICAgICBhZGRDbGFzcyhzdGVwRWwsIHN3YWxDbGFzc2VzWydhY3RpdmUtcHJvZ3Jlc3Mtc3RlcCddKTsKICAgIH0KCiAgICBpZiAoaW5kZXggIT09IHBhcmFtcy5wcm9ncmVzc1N0ZXBzLmxlbmd0aCAtIDEpIHsKICAgICAgdmFyIGxpbmVFbCA9IGNyZWF0ZUxpbmVFbGVtZW50KHN0ZXApOwogICAgICBwcm9ncmVzc1N0ZXBzQ29udGFpbmVyLmFwcGVuZENoaWxkKGxpbmVFbCk7CiAgICB9CiAgfSk7Cn07Cgp2YXIgcmVuZGVyVGl0bGUgPSBmdW5jdGlvbiByZW5kZXJUaXRsZShpbnN0YW5jZSwgcGFyYW1zKSB7CiAgdmFyIHRpdGxlID0gZ2V0VGl0bGUoKTsKICB0b2dnbGUodGl0bGUsIHBhcmFtcy50aXRsZSB8fCBwYXJhbXMudGl0bGVUZXh0KTsKCiAgaWYgKHBhcmFtcy50aXRsZSkgewogICAgcGFyc2VIdG1sVG9Db250YWluZXIocGFyYW1zLnRpdGxlLCB0aXRsZSk7CiAgfQoKICBpZiAocGFyYW1zLnRpdGxlVGV4dCkgewogICAgdGl0bGUuaW5uZXJUZXh0ID0gcGFyYW1zLnRpdGxlVGV4dDsKICB9IC8vIEN1c3RvbSBjbGFzcwoKCiAgYXBwbHlDdXN0b21DbGFzcyh0aXRsZSwgcGFyYW1zLmN1c3RvbUNsYXNzLCAndGl0bGUnKTsKfTsKCnZhciByZW5kZXJIZWFkZXIgPSBmdW5jdGlvbiByZW5kZXJIZWFkZXIoaW5zdGFuY2UsIHBhcmFtcykgewogIHZhciBoZWFkZXIgPSBnZXRIZWFkZXIoKTsgLy8gQ3VzdG9tIGNsYXNzCgogIGFwcGx5Q3VzdG9tQ2xhc3MoaGVhZGVyLCBwYXJhbXMuY3VzdG9tQ2xhc3MsICdoZWFkZXInKTsgLy8gUHJvZ3Jlc3Mgc3RlcHMKCiAgcmVuZGVyUHJvZ3Jlc3NTdGVwcyhpbnN0YW5jZSwgcGFyYW1zKTsgLy8gSWNvbgoKICByZW5kZXJJY29uKGluc3RhbmNlLCBwYXJhbXMpOyAvLyBJbWFnZQoKICByZW5kZXJJbWFnZShpbnN0YW5jZSwgcGFyYW1zKTsgLy8gVGl0bGUKCiAgcmVuZGVyVGl0bGUoaW5zdGFuY2UsIHBhcmFtcyk7IC8vIENsb3NlIGJ1dHRvbgoKICByZW5kZXJDbG9zZUJ1dHRvbihpbnN0YW5jZSwgcGFyYW1zKTsKfTsKCnZhciByZW5kZXJQb3B1cCA9IGZ1bmN0aW9uIHJlbmRlclBvcHVwKGluc3RhbmNlLCBwYXJhbXMpIHsKICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpOyAvLyBXaWR0aAoKICBhcHBseU51bWVyaWNhbFN0eWxlKHBvcHVwLCAnd2lkdGgnLCBwYXJhbXMud2lkdGgpOyAvLyBQYWRkaW5nCgogIGFwcGx5TnVtZXJpY2FsU3R5bGUocG9wdXAsICdwYWRkaW5nJywgcGFyYW1zLnBhZGRpbmcpOyAvLyBCYWNrZ3JvdW5kCgogIGlmIChwYXJhbXMuYmFja2dyb3VuZCkgewogICAgcG9wdXAuc3R5bGUuYmFja2dyb3VuZCA9IHBhcmFtcy5iYWNrZ3JvdW5kOwogIH0gLy8gRGVmYXVsdCBDbGFzcwoKCiAgcG9wdXAuY2xhc3NOYW1lID0gc3dhbENsYXNzZXMucG9wdXA7CgogIGlmIChwYXJhbXMudG9hc3QpIHsKICAgIGFkZENsYXNzKFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHldLCBzd2FsQ2xhc3Nlc1sndG9hc3Qtc2hvd24nXSk7CiAgICBhZGRDbGFzcyhwb3B1cCwgc3dhbENsYXNzZXMudG9hc3QpOwogIH0gZWxzZSB7CiAgICBhZGRDbGFzcyhwb3B1cCwgc3dhbENsYXNzZXMubW9kYWwpOwogIH0gLy8gQ3VzdG9tIGNsYXNzCgoKICBhcHBseUN1c3RvbUNsYXNzKHBvcHVwLCBwYXJhbXMuY3VzdG9tQ2xhc3MsICdwb3B1cCcpOwoKICBpZiAodHlwZW9mIHBhcmFtcy5jdXN0b21DbGFzcyA9PT0gJ3N0cmluZycpIHsKICAgIGFkZENsYXNzKHBvcHVwLCBwYXJhbXMuY3VzdG9tQ2xhc3MpOwogIH0gLy8gQ1NTIGFuaW1hdGlvbgoKCiAgdG9nZ2xlQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLm5vYW5pbWF0aW9uLCAhcGFyYW1zLmFuaW1hdGlvbik7Cn07Cgp2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGluc3RhbmNlLCBwYXJhbXMpIHsKICByZW5kZXJQb3B1cChpbnN0YW5jZSwgcGFyYW1zKTsKICByZW5kZXJDb250YWluZXIoaW5zdGFuY2UsIHBhcmFtcyk7CiAgcmVuZGVySGVhZGVyKGluc3RhbmNlLCBwYXJhbXMpOwogIHJlbmRlckNvbnRlbnQoaW5zdGFuY2UsIHBhcmFtcyk7CiAgcmVuZGVyQWN0aW9ucyhpbnN0YW5jZSwgcGFyYW1zKTsKICByZW5kZXJGb290ZXIoaW5zdGFuY2UsIHBhcmFtcyk7Cn07CgovKgogKiBHbG9iYWwgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIFN3ZWV0QWxlcnQyIHBvcHVwIGlzIHNob3duCiAqLwoKdmFyIGlzVmlzaWJsZSQxID0gZnVuY3Rpb24gaXNWaXNpYmxlJCQxKCkgewogIHJldHVybiBpc1Zpc2libGUoZ2V0UG9wdXAoKSk7Cn07Ci8qCiAqIEdsb2JhbCBmdW5jdGlvbiB0byBjbGljayAnQ29uZmlybScgYnV0dG9uCiAqLwoKdmFyIGNsaWNrQ29uZmlybSA9IGZ1bmN0aW9uIGNsaWNrQ29uZmlybSgpIHsKICByZXR1cm4gZ2V0Q29uZmlybUJ1dHRvbigpICYmIGdldENvbmZpcm1CdXR0b24oKS5jbGljaygpOwp9OwovKgogKiBHbG9iYWwgZnVuY3Rpb24gdG8gY2xpY2sgJ0NhbmNlbCcgYnV0dG9uCiAqLwoKdmFyIGNsaWNrQ2FuY2VsID0gZnVuY3Rpb24gY2xpY2tDYW5jZWwoKSB7CiAgcmV0dXJuIGdldENhbmNlbEJ1dHRvbigpICYmIGdldENhbmNlbEJ1dHRvbigpLmNsaWNrKCk7Cn07CgpmdW5jdGlvbiBmaXJlKCkgewogIHZhciBTd2FsID0gdGhpczsKCiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogIH0KCiAgcmV0dXJuIF9jb25zdHJ1Y3QoU3dhbCwgYXJncyk7Cn0KCi8qKgogKiBSZXR1cm5zIGFuIGV4dGVuZGVkIHZlcnNpb24gb2YgYFN3YWxgIGNvbnRhaW5pbmcgYHBhcmFtc2AgYXMgZGVmYXVsdHMuCiAqIFVzZWZ1bCBmb3IgcmV1c2luZyBTd2FsIGNvbmZpZ3VyYXRpb24uCiAqCiAqIEZvciBleGFtcGxlOgogKgogKiBCZWZvcmU6CiAqIGNvbnN0IHRleHRQcm9tcHRPcHRpb25zID0geyBpbnB1dDogJ3RleHQnLCBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlIH0KICogY29uc3Qge3ZhbHVlOiBmaXJzdE5hbWV9ID0gYXdhaXQgU3dhbC5maXJlKHsgLi4udGV4dFByb21wdE9wdGlvbnMsIHRpdGxlOiAnV2hhdCBpcyB5b3VyIGZpcnN0IG5hbWU/JyB9KQogKiBjb25zdCB7dmFsdWU6IGxhc3ROYW1lfSA9IGF3YWl0IFN3YWwuZmlyZSh7IC4uLnRleHRQcm9tcHRPcHRpb25zLCB0aXRsZTogJ1doYXQgaXMgeW91ciBsYXN0IG5hbWU/JyB9KQogKgogKiBBZnRlcjoKICogY29uc3QgVGV4dFByb21wdCA9IFN3YWwubWl4aW4oeyBpbnB1dDogJ3RleHQnLCBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlIH0pCiAqIGNvbnN0IHt2YWx1ZTogZmlyc3ROYW1lfSA9IGF3YWl0IFRleHRQcm9tcHQoJ1doYXQgaXMgeW91ciBmaXJzdCBuYW1lPycpCiAqIGNvbnN0IHt2YWx1ZTogbGFzdE5hbWV9ID0gYXdhaXQgVGV4dFByb21wdCgnV2hhdCBpcyB5b3VyIGxhc3QgbmFtZT8nKQogKgogKiBAcGFyYW0gbWl4aW5QYXJhbXMKICovCmZ1bmN0aW9uIG1peGluKG1peGluUGFyYW1zKSB7CiAgdmFyIE1peGluU3dhbCA9CiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uIChfdGhpcykgewogICAgX2luaGVyaXRzKE1peGluU3dhbCwgX3RoaXMpOwoKICAgIGZ1bmN0aW9uIE1peGluU3dhbCgpIHsKICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1peGluU3dhbCk7CgogICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1peGluU3dhbCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICB9CgogICAgX2NyZWF0ZUNsYXNzKE1peGluU3dhbCwgW3sKICAgICAga2V5OiAiX21haW4iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX21haW4ocGFyYW1zKSB7CiAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1peGluU3dhbC5wcm90b3R5cGUpLCAiX21haW4iLCB0aGlzKS5jYWxsKHRoaXMsIF9leHRlbmRzKHt9LCBtaXhpblBhcmFtcywgcGFyYW1zKSk7CiAgICAgIH0KICAgIH1dKTsKCiAgICByZXR1cm4gTWl4aW5Td2FsOwogIH0odGhpcyk7CgogIHJldHVybiBNaXhpblN3YWw7Cn0KCi8vIHByaXZhdGUgZ2xvYmFsIHN0YXRlIGZvciB0aGUgcXVldWUgZmVhdHVyZQp2YXIgY3VycmVudFN0ZXBzID0gW107Ci8qCiAqIEdsb2JhbCBmdW5jdGlvbiBmb3IgY2hhaW5pbmcgc3dlZXRBbGVydCBwb3B1cHMKICovCgp2YXIgcXVldWUgPSBmdW5jdGlvbiBxdWV1ZShzdGVwcykgewogIHZhciBTd2FsID0gdGhpczsKICBjdXJyZW50U3RlcHMgPSBzdGVwczsKCiAgdmFyIHJlc2V0QW5kUmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc2V0QW5kUmVzb2x2ZShyZXNvbHZlLCB2YWx1ZSkgewogICAgY3VycmVudFN0ZXBzID0gW107CiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2FsMi1xdWV1ZS1zdGVwJyk7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9OwoKICB2YXIgcXVldWVSZXN1bHQgPSBbXTsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgIChmdW5jdGlvbiBzdGVwKGksIGNhbGxiYWNrKSB7CiAgICAgIGlmIChpIDwgY3VycmVudFN0ZXBzLmxlbmd0aCkgewogICAgICAgIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdkYXRhLXN3YWwyLXF1ZXVlLXN0ZXAnLCBpKTsKICAgICAgICBTd2FsLmZpcmUoY3VycmVudFN0ZXBzW2ldKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0LnZhbHVlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBxdWV1ZVJlc3VsdC5wdXNoKHJlc3VsdC52YWx1ZSk7CiAgICAgICAgICAgIHN0ZXAoaSArIDEsIGNhbGxiYWNrKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc2V0QW5kUmVzb2x2ZShyZXNvbHZlLCB7CiAgICAgICAgICAgICAgZGlzbWlzczogcmVzdWx0LmRpc21pc3MKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzZXRBbmRSZXNvbHZlKHJlc29sdmUsIHsKICAgICAgICAgIHZhbHVlOiBxdWV1ZVJlc3VsdAogICAgICAgIH0pOwogICAgICB9CiAgICB9KSgwKTsKICB9KTsKfTsKLyoKICogR2xvYmFsIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBpbmRleCBvZiBjdXJyZW50IHBvcHVwIGluIHF1ZXVlCiAqLwoKdmFyIGdldFF1ZXVlU3RlcCA9IGZ1bmN0aW9uIGdldFF1ZXVlU3RlcCgpIHsKICByZXR1cm4gZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dhbDItcXVldWUtc3RlcCcpOwp9OwovKgogKiBHbG9iYWwgZnVuY3Rpb24gZm9yIGluc2VydGluZyBhIHBvcHVwIHRvIHRoZSBxdWV1ZQogKi8KCnZhciBpbnNlcnRRdWV1ZVN0ZXAgPSBmdW5jdGlvbiBpbnNlcnRRdWV1ZVN0ZXAoc3RlcCwgaW5kZXgpIHsKICBpZiAoaW5kZXggJiYgaW5kZXggPCBjdXJyZW50U3RlcHMubGVuZ3RoKSB7CiAgICByZXR1cm4gY3VycmVudFN0ZXBzLnNwbGljZShpbmRleCwgMCwgc3RlcCk7CiAgfQoKICByZXR1cm4gY3VycmVudFN0ZXBzLnB1c2goc3RlcCk7Cn07Ci8qCiAqIEdsb2JhbCBmdW5jdGlvbiBmb3IgZGVsZXRpbmcgYSBwb3B1cCBmcm9tIHRoZSBxdWV1ZQogKi8KCnZhciBkZWxldGVRdWV1ZVN0ZXAgPSBmdW5jdGlvbiBkZWxldGVRdWV1ZVN0ZXAoaW5kZXgpIHsKICBpZiAodHlwZW9mIGN1cnJlbnRTdGVwc1tpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7CiAgICBjdXJyZW50U3RlcHMuc3BsaWNlKGluZGV4LCAxKTsKICB9Cn07CgovKioKICogU2hvdyBzcGlubmVyIGluc3RlYWQgb2YgQ29uZmlybSBidXR0b24gYW5kIGRpc2FibGUgQ2FuY2VsIGJ1dHRvbgogKi8KCnZhciBzaG93TG9hZGluZyA9IGZ1bmN0aW9uIHNob3dMb2FkaW5nKCkgewogIHZhciBwb3B1cCA9IGdldFBvcHVwKCk7CgogIGlmICghcG9wdXApIHsKICAgIFN3YWwuZmlyZSgnJyk7CiAgfQoKICBwb3B1cCA9IGdldFBvcHVwKCk7CiAgdmFyIGFjdGlvbnMgPSBnZXRBY3Rpb25zKCk7CiAgdmFyIGNvbmZpcm1CdXR0b24gPSBnZXRDb25maXJtQnV0dG9uKCk7CiAgdmFyIGNhbmNlbEJ1dHRvbiA9IGdldENhbmNlbEJ1dHRvbigpOwogIHNob3coYWN0aW9ucyk7CiAgc2hvdyhjb25maXJtQnV0dG9uKTsKICBhZGRDbGFzcyhbcG9wdXAsIGFjdGlvbnNdLCBzd2FsQ2xhc3Nlcy5sb2FkaW5nKTsKICBjb25maXJtQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTsKICBjYW5jZWxCdXR0b24uZGlzYWJsZWQgPSB0cnVlOwogIHBvcHVwLnNldEF0dHJpYnV0ZSgnZGF0YS1sb2FkaW5nJywgdHJ1ZSk7CiAgcG9wdXAuc2V0QXR0cmlidXRlKCdhcmlhLWJ1c3knLCB0cnVlKTsKICBwb3B1cC5mb2N1cygpOwp9OwoKdmFyIFJFU1RPUkVfRk9DVVNfVElNRU9VVCA9IDEwMDsKCnZhciBnbG9iYWxTdGF0ZSA9IHt9Owp2YXIgZm9jdXNQcmV2aW91c0FjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiBmb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCgpIHsKICBpZiAoZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50ICYmIGdsb2JhbFN0YXRlLnByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cykgewogICAgZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50LmZvY3VzKCk7CiAgICBnbG9iYWxTdGF0ZS5wcmV2aW91c0FjdGl2ZUVsZW1lbnQgPSBudWxsOwogIH0gZWxzZSBpZiAoZG9jdW1lbnQuYm9keSkgewogICAgZG9jdW1lbnQuYm9keS5mb2N1cygpOwogIH0KfTsgLy8gUmVzdG9yZSBwcmV2aW91cyBhY3RpdmUgKGZvY3VzZWQpIGVsZW1lbnQKCgp2YXIgcmVzdG9yZUFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiByZXN0b3JlQWN0aXZlRWxlbWVudCgpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgIHZhciB4ID0gd2luZG93LnNjcm9sbFg7CiAgICB2YXIgeSA9IHdpbmRvdy5zY3JvbGxZOwogICAgZ2xvYmFsU3RhdGUucmVzdG9yZUZvY3VzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBmb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCgpOwogICAgICByZXNvbHZlKCk7CiAgICB9LCBSRVNUT1JFX0ZPQ1VTX1RJTUVPVVQpOyAvLyBpc3N1ZXMvOTAwCgogICAgaWYgKHR5cGVvZiB4ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgeSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgLy8gSUUgZG9lc24ndCBoYXZlIHNjcm9sbFgvc2Nyb2xsWSBzdXBwb3J0CiAgICAgIHdpbmRvdy5zY3JvbGxUbyh4LCB5KTsKICAgIH0KICB9KTsKfTsKCi8qKgogKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpcyBzZXQsIHJldHVybnMgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBvZiB0aW1lciByZW1haW5lZC4KICogT3RoZXJ3aXNlLCByZXR1cm5zIHVuZGVmaW5lZC4KICovCgp2YXIgZ2V0VGltZXJMZWZ0ID0gZnVuY3Rpb24gZ2V0VGltZXJMZWZ0KCkgewogIHJldHVybiBnbG9iYWxTdGF0ZS50aW1lb3V0ICYmIGdsb2JhbFN0YXRlLnRpbWVvdXQuZ2V0VGltZXJMZWZ0KCk7Cn07Ci8qKgogKiBTdG9wIHRpbWVyLiBSZXR1cm5zIG51bWJlciBvZiBtaWxsaXNlY29uZHMgb2YgdGltZXIgcmVtYWluZWQuCiAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWQuCiAqLwoKdmFyIHN0b3BUaW1lciA9IGZ1bmN0aW9uIHN0b3BUaW1lcigpIHsKICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dCAmJiBnbG9iYWxTdGF0ZS50aW1lb3V0LnN0b3AoKTsKfTsKLyoqCiAqIFJlc3VtZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIHRpbWVyIHJlbWFpbmVkLgogKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpc24ndCBzZXQsIHJldHVybnMgdW5kZWZpbmVkLgogKi8KCnZhciByZXN1bWVUaW1lciA9IGZ1bmN0aW9uIHJlc3VtZVRpbWVyKCkgewogIHJldHVybiBnbG9iYWxTdGF0ZS50aW1lb3V0ICYmIGdsb2JhbFN0YXRlLnRpbWVvdXQuc3RhcnQoKTsKfTsKLyoqCiAqIFJlc3VtZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIHRpbWVyIHJlbWFpbmVkLgogKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpc24ndCBzZXQsIHJldHVybnMgdW5kZWZpbmVkLgogKi8KCnZhciB0b2dnbGVUaW1lciA9IGZ1bmN0aW9uIHRvZ2dsZVRpbWVyKCkgewogIHZhciB0aW1lciA9IGdsb2JhbFN0YXRlLnRpbWVvdXQ7CiAgcmV0dXJuIHRpbWVyICYmICh0aW1lci5ydW5uaW5nID8gdGltZXIuc3RvcCgpIDogdGltZXIuc3RhcnQoKSk7Cn07Ci8qKgogKiBJbmNyZWFzZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIGFuIHVwZGF0ZWQgdGltZXIuCiAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWQuCiAqLwoKdmFyIGluY3JlYXNlVGltZXIgPSBmdW5jdGlvbiBpbmNyZWFzZVRpbWVyKG4pIHsKICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dCAmJiBnbG9iYWxTdGF0ZS50aW1lb3V0LmluY3JlYXNlKG4pOwp9OwovKioKICogQ2hlY2sgaWYgdGltZXIgaXMgcnVubmluZy4gUmV0dXJucyB0cnVlIGlmIHRpbWVyIGlzIHJ1bm5pbmcKICogb3IgZmFsc2UgaWYgdGltZXIgaXMgcGF1c2VkIG9yIHN0b3BwZWQuCiAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWQKICovCgp2YXIgaXNUaW1lclJ1bm5pbmcgPSBmdW5jdGlvbiBpc1RpbWVyUnVubmluZygpIHsKICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dCAmJiBnbG9iYWxTdGF0ZS50aW1lb3V0LmlzUnVubmluZygpOwp9OwoKdmFyIGRlZmF1bHRQYXJhbXMgPSB7CiAgdGl0bGU6ICcnLAogIHRpdGxlVGV4dDogJycsCiAgdGV4dDogJycsCiAgaHRtbDogJycsCiAgZm9vdGVyOiAnJywKICB0eXBlOiBudWxsLAogIHRvYXN0OiBmYWxzZSwKICBjdXN0b21DbGFzczogJycsCiAgY3VzdG9tQ29udGFpbmVyQ2xhc3M6ICcnLAogIHRhcmdldDogJ2JvZHknLAogIGJhY2tkcm9wOiB0cnVlLAogIGFuaW1hdGlvbjogdHJ1ZSwKICBoZWlnaHRBdXRvOiB0cnVlLAogIGFsbG93T3V0c2lkZUNsaWNrOiB0cnVlLAogIGFsbG93RXNjYXBlS2V5OiB0cnVlLAogIGFsbG93RW50ZXJLZXk6IHRydWUsCiAgc3RvcEtleWRvd25Qcm9wYWdhdGlvbjogdHJ1ZSwKICBrZXlkb3duTGlzdGVuZXJDYXB0dXJlOiBmYWxzZSwKICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSwKICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICBwcmVDb25maXJtOiBudWxsLAogIGNvbmZpcm1CdXR0b25UZXh0OiAnT0snLAogIGNvbmZpcm1CdXR0b25BcmlhTGFiZWw6ICcnLAogIGNvbmZpcm1CdXR0b25Db2xvcjogbnVsbCwKICBjb25maXJtQnV0dG9uQ2xhc3M6ICcnLAogIGNhbmNlbEJ1dHRvblRleHQ6ICdDYW5jZWwnLAogIGNhbmNlbEJ1dHRvbkFyaWFMYWJlbDogJycsCiAgY2FuY2VsQnV0dG9uQ29sb3I6IG51bGwsCiAgY2FuY2VsQnV0dG9uQ2xhc3M6ICcnLAogIGJ1dHRvbnNTdHlsaW5nOiB0cnVlLAogIHJldmVyc2VCdXR0b25zOiBmYWxzZSwKICBmb2N1c0NvbmZpcm06IHRydWUsCiAgZm9jdXNDYW5jZWw6IGZhbHNlLAogIHNob3dDbG9zZUJ1dHRvbjogZmFsc2UsCiAgY2xvc2VCdXR0b25IdG1sOiAnJnRpbWVzOycsCiAgY2xvc2VCdXR0b25BcmlhTGFiZWw6ICdDbG9zZSB0aGlzIGRpYWxvZycsCiAgc2hvd0xvYWRlck9uQ29uZmlybTogZmFsc2UsCiAgaW1hZ2VVcmw6IG51bGwsCiAgaW1hZ2VXaWR0aDogbnVsbCwKICBpbWFnZUhlaWdodDogbnVsbCwKICBpbWFnZUFsdDogJycsCiAgaW1hZ2VDbGFzczogJycsCiAgdGltZXI6IG51bGwsCiAgd2lkdGg6IG51bGwsCiAgcGFkZGluZzogbnVsbCwKICBiYWNrZ3JvdW5kOiBudWxsLAogIGlucHV0OiBudWxsLAogIGlucHV0UGxhY2Vob2xkZXI6ICcnLAogIGlucHV0VmFsdWU6ICcnLAogIGlucHV0T3B0aW9uczoge30sCiAgaW5wdXRBdXRvVHJpbTogdHJ1ZSwKICBpbnB1dENsYXNzOiAnJywKICBpbnB1dEF0dHJpYnV0ZXM6IHt9LAogIGlucHV0VmFsaWRhdG9yOiBudWxsLAogIHZhbGlkYXRpb25NZXNzYWdlOiBudWxsLAogIGdyb3c6IGZhbHNlLAogIHBvc2l0aW9uOiAnY2VudGVyJywKICBwcm9ncmVzc1N0ZXBzOiBbXSwKICBjdXJyZW50UHJvZ3Jlc3NTdGVwOiBudWxsLAogIHByb2dyZXNzU3RlcHNEaXN0YW5jZTogbnVsbCwKICBvbkJlZm9yZU9wZW46IG51bGwsCiAgb25BZnRlckNsb3NlOiBudWxsLAogIG9uT3BlbjogbnVsbCwKICBvbkNsb3NlOiBudWxsLAogIHNjcm9sbGJhclBhZGRpbmc6IHRydWUKfTsKdmFyIHVwZGF0YWJsZVBhcmFtcyA9IFsndGl0bGUnLCAndGl0bGVUZXh0JywgJ3RleHQnLCAnaHRtbCcsICd0eXBlJywgJ2N1c3RvbUNsYXNzJywgJ3Nob3dDb25maXJtQnV0dG9uJywgJ3Nob3dDYW5jZWxCdXR0b24nLCAnY29uZmlybUJ1dHRvblRleHQnLCAnY29uZmlybUJ1dHRvbkFyaWFMYWJlbCcsICdjb25maXJtQnV0dG9uQ29sb3InLCAnY29uZmlybUJ1dHRvbkNsYXNzJywgJ2NhbmNlbEJ1dHRvblRleHQnLCAnY2FuY2VsQnV0dG9uQXJpYUxhYmVsJywgJ2NhbmNlbEJ1dHRvbkNvbG9yJywgJ2NhbmNlbEJ1dHRvbkNsYXNzJywgJ2J1dHRvbnNTdHlsaW5nJywgJ3JldmVyc2VCdXR0b25zJywgJ2ltYWdlVXJsJywgJ2ltYWdlV2lkdGgnLCAnaW1hZ2VIZWlndGgnLCAnaW1hZ2VBbHQnLCAnaW1hZ2VDbGFzcycsICdwcm9ncmVzc1N0ZXBzJywgJ2N1cnJlbnRQcm9ncmVzc1N0ZXAnXTsKdmFyIGRlcHJlY2F0ZWRQYXJhbXMgPSB7CiAgY3VzdG9tQ29udGFpbmVyQ2xhc3M6ICdjdXN0b21DbGFzcycsCiAgY29uZmlybUJ1dHRvbkNsYXNzOiAnY3VzdG9tQ2xhc3MnLAogIGNhbmNlbEJ1dHRvbkNsYXNzOiAnY3VzdG9tQ2xhc3MnLAogIGltYWdlQ2xhc3M6ICdjdXN0b21DbGFzcycsCiAgaW5wdXRDbGFzczogJ2N1c3RvbUNsYXNzJwp9Owp2YXIgdG9hc3RJbmNvbXBhdGlibGVQYXJhbXMgPSBbJ2FsbG93T3V0c2lkZUNsaWNrJywgJ2FsbG93RW50ZXJLZXknLCAnYmFja2Ryb3AnLCAnZm9jdXNDb25maXJtJywgJ2ZvY3VzQ2FuY2VsJywgJ2hlaWdodEF1dG8nLCAna2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSddOwovKioKICogSXMgdmFsaWQgcGFyYW1ldGVyCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbU5hbWUKICovCgp2YXIgaXNWYWxpZFBhcmFtZXRlciA9IGZ1bmN0aW9uIGlzVmFsaWRQYXJhbWV0ZXIocGFyYW1OYW1lKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZWZhdWx0UGFyYW1zLCBwYXJhbU5hbWUpOwp9OwovKioKICogSXMgdmFsaWQgcGFyYW1ldGVyIGZvciBTd2FsLnVwZGF0ZSgpIG1ldGhvZAogKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1OYW1lCiAqLwoKdmFyIGlzVXBkYXRhYmxlUGFyYW1ldGVyID0gZnVuY3Rpb24gaXNVcGRhdGFibGVQYXJhbWV0ZXIocGFyYW1OYW1lKSB7CiAgcmV0dXJuIHVwZGF0YWJsZVBhcmFtcy5pbmRleE9mKHBhcmFtTmFtZSkgIT09IC0xOwp9OwovKioKICogSXMgZGVwcmVjYXRlZCBwYXJhbWV0ZXIKICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtTmFtZQogKi8KCnZhciBpc0RlcHJlY2F0ZWRQYXJhbWV0ZXIgPSBmdW5jdGlvbiBpc0RlcHJlY2F0ZWRQYXJhbWV0ZXIocGFyYW1OYW1lKSB7CiAgcmV0dXJuIGRlcHJlY2F0ZWRQYXJhbXNbcGFyYW1OYW1lXTsKfTsKCnZhciBjaGVja0lmUGFyYW1Jc1ZhbGlkID0gZnVuY3Rpb24gY2hlY2tJZlBhcmFtSXNWYWxpZChwYXJhbSkgewogIGlmICghaXNWYWxpZFBhcmFtZXRlcihwYXJhbSkpIHsKICAgIHdhcm4oIlVua25vd24gcGFyYW1ldGVyIFwiIi5jb25jYXQocGFyYW0sICJcIiIpKTsKICB9Cn07Cgp2YXIgY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkID0gZnVuY3Rpb24gY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkKHBhcmFtKSB7CiAgaWYgKHRvYXN0SW5jb21wYXRpYmxlUGFyYW1zLmluZGV4T2YocGFyYW0pICE9PSAtMSkgewogICAgd2FybigiVGhlIHBhcmFtZXRlciBcIiIuY29uY2F0KHBhcmFtLCAiXCIgaXMgaW5jb21wYXRpYmxlIHdpdGggdG9hc3RzIikpOwogIH0KfTsKCnZhciBjaGVja0lmUGFyYW1Jc0RlcHJlY2F0ZWQgPSBmdW5jdGlvbiBjaGVja0lmUGFyYW1Jc0RlcHJlY2F0ZWQocGFyYW0pIHsKICBpZiAoaXNEZXByZWNhdGVkUGFyYW1ldGVyKHBhcmFtKSkgewogICAgd2FybkFib3V0RGVwcmVhdGlvbihwYXJhbSwgaXNEZXByZWNhdGVkUGFyYW1ldGVyKHBhcmFtKSk7CiAgfQp9OwovKioKICogU2hvdyByZWxldmFudCB3YXJuaW5ncyBmb3IgZ2l2ZW4gcGFyYW1zCiAqCiAqIEBwYXJhbSBwYXJhbXMKICovCgoKdmFyIHNob3dXYXJuaW5nc0ZvclBhcmFtcyA9IGZ1bmN0aW9uIHNob3dXYXJuaW5nc0ZvclBhcmFtcyhwYXJhbXMpIHsKICBmb3IgKHZhciBwYXJhbSBpbiBwYXJhbXMpIHsKICAgIGNoZWNrSWZQYXJhbUlzVmFsaWQocGFyYW0pOwoKICAgIGlmIChwYXJhbXMudG9hc3QpIHsKICAgICAgY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkKHBhcmFtKTsKICAgIH0KCiAgICBjaGVja0lmUGFyYW1Jc0RlcHJlY2F0ZWQoKTsKICB9Cn07CgoKCnZhciBzdGF0aWNNZXRob2RzID0gT2JqZWN0LmZyZWV6ZSh7Cglpc1ZhbGlkUGFyYW1ldGVyOiBpc1ZhbGlkUGFyYW1ldGVyLAoJaXNVcGRhdGFibGVQYXJhbWV0ZXI6IGlzVXBkYXRhYmxlUGFyYW1ldGVyLAoJaXNEZXByZWNhdGVkUGFyYW1ldGVyOiBpc0RlcHJlY2F0ZWRQYXJhbWV0ZXIsCglhcmdzVG9QYXJhbXM6IGFyZ3NUb1BhcmFtcywKCWlzVmlzaWJsZTogaXNWaXNpYmxlJDEsCgljbGlja0NvbmZpcm06IGNsaWNrQ29uZmlybSwKCWNsaWNrQ2FuY2VsOiBjbGlja0NhbmNlbCwKCWdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyLAoJZ2V0UG9wdXA6IGdldFBvcHVwLAoJZ2V0VGl0bGU6IGdldFRpdGxlLAoJZ2V0Q29udGVudDogZ2V0Q29udGVudCwKCWdldEltYWdlOiBnZXRJbWFnZSwKCWdldEljb246IGdldEljb24sCglnZXRJY29uczogZ2V0SWNvbnMsCglnZXRDbG9zZUJ1dHRvbjogZ2V0Q2xvc2VCdXR0b24sCglnZXRBY3Rpb25zOiBnZXRBY3Rpb25zLAoJZ2V0Q29uZmlybUJ1dHRvbjogZ2V0Q29uZmlybUJ1dHRvbiwKCWdldENhbmNlbEJ1dHRvbjogZ2V0Q2FuY2VsQnV0dG9uLAoJZ2V0SGVhZGVyOiBnZXRIZWFkZXIsCglnZXRGb290ZXI6IGdldEZvb3RlciwKCWdldEZvY3VzYWJsZUVsZW1lbnRzOiBnZXRGb2N1c2FibGVFbGVtZW50cywKCWdldFZhbGlkYXRpb25NZXNzYWdlOiBnZXRWYWxpZGF0aW9uTWVzc2FnZSwKCWlzTG9hZGluZzogaXNMb2FkaW5nLAoJZmlyZTogZmlyZSwKCW1peGluOiBtaXhpbiwKCXF1ZXVlOiBxdWV1ZSwKCWdldFF1ZXVlU3RlcDogZ2V0UXVldWVTdGVwLAoJaW5zZXJ0UXVldWVTdGVwOiBpbnNlcnRRdWV1ZVN0ZXAsCglkZWxldGVRdWV1ZVN0ZXA6IGRlbGV0ZVF1ZXVlU3RlcCwKCXNob3dMb2FkaW5nOiBzaG93TG9hZGluZywKCWVuYWJsZUxvYWRpbmc6IHNob3dMb2FkaW5nLAoJZ2V0VGltZXJMZWZ0OiBnZXRUaW1lckxlZnQsCglzdG9wVGltZXI6IHN0b3BUaW1lciwKCXJlc3VtZVRpbWVyOiByZXN1bWVUaW1lciwKCXRvZ2dsZVRpbWVyOiB0b2dnbGVUaW1lciwKCWluY3JlYXNlVGltZXI6IGluY3JlYXNlVGltZXIsCglpc1RpbWVyUnVubmluZzogaXNUaW1lclJ1bm5pbmcKfSk7CgovKioKICogRW5hYmxlcyBidXR0b25zIGFuZCBoaWRlIGxvYWRlci4KICovCgpmdW5jdGlvbiBoaWRlTG9hZGluZygpIHsKICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpOwogIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQodGhpcyk7CgogIGlmICghaW5uZXJQYXJhbXMuc2hvd0NvbmZpcm1CdXR0b24pIHsKICAgIGhpZGUoZG9tQ2FjaGUuY29uZmlybUJ1dHRvbik7CgogICAgaWYgKCFpbm5lclBhcmFtcy5zaG93Q2FuY2VsQnV0dG9uKSB7CiAgICAgIGhpZGUoZG9tQ2FjaGUuYWN0aW9ucyk7CiAgICB9CiAgfQoKICByZW1vdmVDbGFzcyhbZG9tQ2FjaGUucG9wdXAsIGRvbUNhY2hlLmFjdGlvbnNdLCBzd2FsQ2xhc3Nlcy5sb2FkaW5nKTsKICBkb21DYWNoZS5wb3B1cC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtYnVzeScpOwogIGRvbUNhY2hlLnBvcHVwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1sb2FkaW5nJyk7CiAgZG9tQ2FjaGUuY29uZmlybUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlOwogIGRvbUNhY2hlLmNhbmNlbEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlOwp9CgpmdW5jdGlvbiBnZXRJbnB1dCQxKGluc3RhbmNlKSB7CiAgdmFyIGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSB8fCB0aGlzKTsKICB2YXIgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KGluc3RhbmNlIHx8IHRoaXMpOwoKICBpZiAoIWRvbUNhY2hlKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHJldHVybiBnZXRJbnB1dChkb21DYWNoZS5jb250ZW50LCBpbm5lclBhcmFtcy5pbnB1dCk7Cn0KCnZhciBmaXhTY3JvbGxiYXIgPSBmdW5jdGlvbiBmaXhTY3JvbGxiYXIoKSB7CiAgLy8gZm9yIHF1ZXVlcywgZG8gbm90IGRvIHRoaXMgbW9yZSB0aGFuIG9uY2UKICBpZiAoc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgIT09IG51bGwpIHsKICAgIHJldHVybjsKICB9IC8vIGlmIHRoZSBib2R5IGhhcyBvdmVyZmxvdwoKCiAgaWYgKGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KSB7CiAgICAvLyBhZGQgcGFkZGluZyBzbyB0aGUgY29udGVudCBkb2Vzbid0IHNoaWZ0IGFmdGVyIHJlbW92YWwgb2Ygc2Nyb2xsYmFyCiAgICBzdGF0ZXMucHJldmlvdXNCb2R5UGFkZGluZyA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSk7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHN0YXRlcy5wcmV2aW91c0JvZHlQYWRkaW5nICsgbWVhc3VyZVNjcm9sbGJhcigpICsgJ3B4JzsKICB9Cn07CnZhciB1bmRvU2Nyb2xsYmFyID0gZnVuY3Rpb24gdW5kb1Njcm9sbGJhcigpIHsKICBpZiAoc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgIT09IG51bGwpIHsKICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgKyAncHgnOwogICAgc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgPSBudWxsOwogIH0KfTsKCi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgp2YXIgaU9TZml4ID0gZnVuY3Rpb24gaU9TZml4KCkgewogIHZhciBpT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtOwoKICBpZiAoaU9TICYmICFoYXNDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlcy5pb3NmaXgpKSB7CiAgICB2YXIgb2Zmc2V0ID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IG9mZnNldCAqIC0xICsgJ3B4JzsKICAgIGFkZENsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzLmlvc2ZpeCk7CiAgICBsb2NrQm9keVNjcm9sbCgpOwogIH0KfTsKCnZhciBsb2NrQm9keVNjcm9sbCA9IGZ1bmN0aW9uIGxvY2tCb2R5U2Nyb2xsKCkgewogIC8vICMxMjQ2CiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpOwogIHZhciBwcmV2ZW50VG91Y2hNb3ZlOwoKICBjb250YWluZXIub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGUpIHsKICAgIHByZXZlbnRUb3VjaE1vdmUgPSBlLnRhcmdldCA9PT0gY29udGFpbmVyIHx8ICFpc1Njcm9sbGFibGUoY29udGFpbmVyKSAmJiBlLnRhcmdldC50YWdOYW1lICE9PSAnSU5QVVQnIC8vICMxNjAzCiAgICA7CiAgfTsKCiAgY29udGFpbmVyLm9udG91Y2htb3ZlID0gZnVuY3Rpb24gKGUpIHsKICAgIGlmIChwcmV2ZW50VG91Y2hNb3ZlKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgIH0KICB9Owp9OwovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCnZhciB1bmRvSU9TZml4ID0gZnVuY3Rpb24gdW5kb0lPU2ZpeCgpIHsKICBpZiAoaGFzQ2xhc3MoZG9jdW1lbnQuYm9keSwgc3dhbENsYXNzZXMuaW9zZml4KSkgewogICAgdmFyIG9mZnNldCA9IHBhcnNlSW50KGRvY3VtZW50LmJvZHkuc3R5bGUudG9wLCAxMCk7CiAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlcy5pb3NmaXgpOwogICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSAnJzsKICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gb2Zmc2V0ICogLTE7CiAgfQp9OwoKdmFyIGlzSUUxMSA9IGZ1bmN0aW9uIGlzSUUxMSgpIHsKICByZXR1cm4gISF3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgISFkb2N1bWVudC5kb2N1bWVudE1vZGU7Cn07IC8vIEZpeCBJRTExIGNlbnRlcmluZyBzd2VldGFsZXJ0Mi9pc3N1ZXMvOTMzCgovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCnZhciBmaXhWZXJ0aWNhbFBvc2l0aW9uSUUgPSBmdW5jdGlvbiBmaXhWZXJ0aWNhbFBvc2l0aW9uSUUoKSB7CiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpOwogIHZhciBwb3B1cCA9IGdldFBvcHVwKCk7CiAgY29udGFpbmVyLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdhbGlnbi1pdGVtcycpOwoKICBpZiAocG9wdXAub2Zmc2V0VG9wIDwgMCkgewogICAgY29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSAnZmxleC1zdGFydCc7CiAgfQp9OwovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCnZhciBJRWZpeCA9IGZ1bmN0aW9uIElFZml4KCkgewogIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBpc0lFMTEoKSkgewogICAgZml4VmVydGljYWxQb3NpdGlvbklFKCk7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZml4VmVydGljYWxQb3NpdGlvbklFKTsKICB9Cn07Ci8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgp2YXIgdW5kb0lFZml4ID0gZnVuY3Rpb24gdW5kb0lFZml4KCkgewogIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBpc0lFMTEoKSkgewogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZpeFZlcnRpY2FsUG9zaXRpb25JRSk7CiAgfQp9OwoKLy8gQWRkaW5nIGFyaWEtaGlkZGVuPSJ0cnVlIiB0byBlbGVtZW50cyBvdXRzaWRlIG9mIHRoZSBhY3RpdmUgbW9kYWwgZGlhbG9nIGVuc3VyZXMgdGhhdAovLyBlbGVtZW50cyBub3Qgd2l0aGluIHRoZSBhY3RpdmUgbW9kYWwgZGlhbG9nIHdpbGwgbm90IGJlIHN1cmZhY2VkIGlmIGEgdXNlciBvcGVucyBhIHNjcmVlbgovLyByZWFkZXLigJlzIGxpc3Qgb2YgZWxlbWVudHMgKGhlYWRpbmdzLCBmb3JtIGNvbnRyb2xzLCBsYW5kbWFya3MsIGV0Yy4pIGluIHRoZSBkb2N1bWVudC4KCnZhciBzZXRBcmlhSGlkZGVuID0gZnVuY3Rpb24gc2V0QXJpYUhpZGRlbigpIHsKICB2YXIgYm9keUNoaWxkcmVuID0gdG9BcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTsKICBib2R5Q2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsKICAgIGlmIChlbCA9PT0gZ2V0Q29udGFpbmVyKCkgfHwgY29udGFpbnMoZWwsIGdldENvbnRhaW5lcigpKSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSkgewogICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJldmlvdXMtYXJpYS1oaWRkZW4nLCBlbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykpOwogICAgfQoKICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpOwogIH0pOwp9Owp2YXIgdW5zZXRBcmlhSGlkZGVuID0gZnVuY3Rpb24gdW5zZXRBcmlhSGlkZGVuKCkgewogIHZhciBib2R5Q2hpbGRyZW4gPSB0b0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pOwogIGJvZHlDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1wcmV2aW91cy1hcmlhLWhpZGRlbicpKSB7CiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJldmlvdXMtYXJpYS1oaWRkZW4nKSk7CiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcmV2aW91cy1hcmlhLWhpZGRlbicpOwogICAgfSBlbHNlIHsKICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpOwogICAgfQogIH0pOwp9OwoKLyoqCiAqIFRoaXMgbW9kdWxlIGNvbnRhaW50cyBgV2Vha01hcGBzIGZvciBlYWNoIGVmZmVjdGl2ZWx5LSJwcml2YXRlICBwcm9wZXJ0eSIgdGhhdCBhIGBTd2FsYCBoYXMuCiAqIEZvciBleGFtcGxlLCB0byBzZXQgdGhlIHByaXZhdGUgcHJvcGVydHkgImZvbyIgb2YgYHRoaXNgIHRvICJiYXIiLCB5b3UgY2FuIGBwcml2YXRlUHJvcHMuZm9vLnNldCh0aGlzLCAnYmFyJylgCiAqIFRoaXMgaXMgdGhlIGFwcHJvYWNoIHRoYXQgQmFiZWwgd2lsbCBwcm9iYWJseSB0YWtlIHRvIGltcGxlbWVudCBwcml2YXRlIG1ldGhvZHMvZmllbGRzCiAqICAgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJpdmF0ZS1tZXRob2RzCiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL3B1bGwvNzU1NQogKiBPbmNlIHdlIGhhdmUgdGhlIGNoYW5nZXMgZnJvbSB0aGF0IFBSIGluIEJhYmVsLCBhbmQgb3VyIGNvcmUgY2xhc3MgZml0cyByZWFzb25hYmxlIGluICpvbmUgbW9kdWxlKgogKiAgIHRoZW4gd2UgY2FuIHVzZSB0aGF0IGxhbmd1YWdlIGZlYXR1cmUuCiAqLwp2YXIgcHJpdmF0ZU1ldGhvZHMgPSB7CiAgc3dhbFByb21pc2VSZXNvbHZlOiBuZXcgV2Vha01hcCgpCn07CgovKgogKiBJbnN0YW5jZSBtZXRob2QgdG8gY2xvc2Ugc3dlZXRBbGVydAogKi8KCmZ1bmN0aW9uIHJlbW92ZVBvcHVwQW5kUmVzZXRTdGF0ZShpbnN0YW5jZSwgY29udGFpbmVyLCBpc1RvYXN0LCBvbkFmdGVyQ2xvc2UpIHsKICBpZiAoaXNUb2FzdCkgewogICAgdHJpZ2dlck9uQWZ0ZXJDbG9zZUFuZERpc3Bvc2UoaW5zdGFuY2UsIG9uQWZ0ZXJDbG9zZSk7CiAgfSBlbHNlIHsKICAgIHJlc3RvcmVBY3RpdmVFbGVtZW50KCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0cmlnZ2VyT25BZnRlckNsb3NlQW5kRGlzcG9zZShpbnN0YW5jZSwgb25BZnRlckNsb3NlKTsKICAgIH0pOwogICAgZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXIsIHsKICAgICAgY2FwdHVyZTogZ2xvYmFsU3RhdGUua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZQogICAgfSk7CiAgICBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlckFkZGVkID0gZmFsc2U7CiAgfQoKICBpZiAoY29udGFpbmVyLnBhcmVudE5vZGUpIHsKICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7CiAgfQoKICBpZiAoaXNNb2RhbCgpKSB7CiAgICB1bmRvU2Nyb2xsYmFyKCk7CiAgICB1bmRvSU9TZml4KCk7CiAgICB1bmRvSUVmaXgoKTsKICAgIHVuc2V0QXJpYUhpZGRlbigpOwogIH0KCiAgcmVtb3ZlQm9keUNsYXNzZXMoKTsKfQoKZnVuY3Rpb24gcmVtb3ZlQm9keUNsYXNzZXMoKSB7CiAgcmVtb3ZlQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIFtzd2FsQ2xhc3Nlcy5zaG93biwgc3dhbENsYXNzZXNbJ2hlaWdodC1hdXRvJ10sIHN3YWxDbGFzc2VzWyduby1iYWNrZHJvcCddLCBzd2FsQ2xhc3Nlc1sndG9hc3Qtc2hvd24nXSwgc3dhbENsYXNzZXNbJ3RvYXN0LWNvbHVtbiddXSk7Cn0KCmZ1bmN0aW9uIGRpc3Bvc2VTd2FsKGluc3RhbmNlKSB7CiAgLy8gVW5zZXQgdGhpcy5wYXJhbXMgc28gR0Mgd2lsbCBkaXNwb3NlIGl0ICgjMTU2OSkKICBkZWxldGUgaW5zdGFuY2UucGFyYW1zOyAvLyBVbnNldCBnbG9iYWxTdGF0ZSBwcm9wcyBzbyBHQyB3aWxsIGRpc3Bvc2UgZ2xvYmFsU3RhdGUgKCMxNTY5KQoKICBkZWxldGUgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXI7CiAgZGVsZXRlIGdsb2JhbFN0YXRlLmtleWRvd25UYXJnZXQ7IC8vIFVuc2V0IFdlYWtNYXBzIHNvIEdDIHdpbGwgYmUgYWJsZSB0byBkaXNwb3NlIHRoZW0gKCMxNTY5KQoKICB1bnNldFdlYWtNYXBzKHByaXZhdGVQcm9wcyk7CiAgdW5zZXRXZWFrTWFwcyhwcml2YXRlTWV0aG9kcyk7Cn0KCmZ1bmN0aW9uIGNsb3NlKHJlc29sdmVWYWx1ZSkgewogIHZhciBwb3B1cCA9IGdldFBvcHVwKCk7CgogIGlmICghcG9wdXAgfHwgaGFzQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLmhpZGUpKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpOwoKICBpZiAoIWlubmVyUGFyYW1zKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgc3dhbFByb21pc2VSZXNvbHZlID0gcHJpdmF0ZU1ldGhvZHMuc3dhbFByb21pc2VSZXNvbHZlLmdldCh0aGlzKTsKICByZW1vdmVDbGFzcyhwb3B1cCwgc3dhbENsYXNzZXMuc2hvdyk7CiAgYWRkQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLmhpZGUpOwogIGhhbmRsZVBvcHVwQW5pbWF0aW9uKHRoaXMsIHBvcHVwLCBpbm5lclBhcmFtcyk7IC8vIFJlc29sdmUgU3dhbCBwcm9taXNlCgogIHN3YWxQcm9taXNlUmVzb2x2ZShyZXNvbHZlVmFsdWUgfHwge30pOwp9Cgp2YXIgaGFuZGxlUG9wdXBBbmltYXRpb24gPSBmdW5jdGlvbiBoYW5kbGVQb3B1cEFuaW1hdGlvbihpbnN0YW5jZSwgcG9wdXAsIGlubmVyUGFyYW1zKSB7CiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpOyAvLyBJZiBhbmltYXRpb24gaXMgc3VwcG9ydGVkLCBhbmltYXRlCgogIHZhciBhbmltYXRpb25Jc1N1cHBvcnRlZCA9IGFuaW1hdGlvbkVuZEV2ZW50ICYmIGhhc0Nzc0FuaW1hdGlvbihwb3B1cCk7CiAgdmFyIG9uQ2xvc2UgPSBpbm5lclBhcmFtcy5vbkNsb3NlLAogICAgICBvbkFmdGVyQ2xvc2UgPSBpbm5lclBhcmFtcy5vbkFmdGVyQ2xvc2U7CgogIGlmIChvbkNsb3NlICE9PSBudWxsICYmIHR5cGVvZiBvbkNsb3NlID09PSAnZnVuY3Rpb24nKSB7CiAgICBvbkNsb3NlKHBvcHVwKTsKICB9CgogIGlmIChhbmltYXRpb25Jc1N1cHBvcnRlZCkgewogICAgYW5pbWF0ZVBvcHVwKGluc3RhbmNlLCBwb3B1cCwgY29udGFpbmVyLCBvbkFmdGVyQ2xvc2UpOwogIH0gZWxzZSB7CiAgICAvLyBPdGhlcndpc2UsIHJlbW92ZSBpbW1lZGlhdGVseQogICAgcmVtb3ZlUG9wdXBBbmRSZXNldFN0YXRlKGluc3RhbmNlLCBjb250YWluZXIsIGlzVG9hc3QoKSwgb25BZnRlckNsb3NlKTsKICB9Cn07Cgp2YXIgYW5pbWF0ZVBvcHVwID0gZnVuY3Rpb24gYW5pbWF0ZVBvcHVwKGluc3RhbmNlLCBwb3B1cCwgY29udGFpbmVyLCBvbkFmdGVyQ2xvc2UpIHsKICBnbG9iYWxTdGF0ZS5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2sgPSByZW1vdmVQb3B1cEFuZFJlc2V0U3RhdGUuYmluZChudWxsLCBpbnN0YW5jZSwgY29udGFpbmVyLCBpc1RvYXN0KCksIG9uQWZ0ZXJDbG9zZSk7CiAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgZnVuY3Rpb24gKGUpIHsKICAgIGlmIChlLnRhcmdldCA9PT0gcG9wdXApIHsKICAgICAgZ2xvYmFsU3RhdGUuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrKCk7CiAgICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2s7CiAgICB9CiAgfSk7Cn07Cgp2YXIgdW5zZXRXZWFrTWFwcyA9IGZ1bmN0aW9uIHVuc2V0V2Vha01hcHMob2JqKSB7CiAgZm9yICh2YXIgaSBpbiBvYmopIHsKICAgIG9ialtpXSA9IG5ldyBXZWFrTWFwKCk7CiAgfQp9OwoKdmFyIHRyaWdnZXJPbkFmdGVyQ2xvc2VBbmREaXNwb3NlID0gZnVuY3Rpb24gdHJpZ2dlck9uQWZ0ZXJDbG9zZUFuZERpc3Bvc2UoaW5zdGFuY2UsIG9uQWZ0ZXJDbG9zZSkgewogIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgaWYgKG9uQWZ0ZXJDbG9zZSAhPT0gbnVsbCAmJiB0eXBlb2Ygb25BZnRlckNsb3NlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIG9uQWZ0ZXJDbG9zZSgpOwogICAgfQoKICAgIGlmICghZ2V0UG9wdXAoKSkgewogICAgICBkaXNwb3NlU3dhbChpbnN0YW5jZSk7CiAgICB9CiAgfSk7Cn07CgpmdW5jdGlvbiBzZXRCdXR0b25zRGlzYWJsZWQoaW5zdGFuY2UsIGJ1dHRvbnMsIGRpc2FibGVkKSB7CiAgdmFyIGRvbUNhY2hlID0gcHJpdmF0ZVByb3BzLmRvbUNhY2hlLmdldChpbnN0YW5jZSk7CiAgYnV0dG9ucy5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24pIHsKICAgIGRvbUNhY2hlW2J1dHRvbl0uZGlzYWJsZWQgPSBkaXNhYmxlZDsKICB9KTsKfQoKZnVuY3Rpb24gc2V0SW5wdXREaXNhYmxlZChpbnB1dCwgZGlzYWJsZWQpIHsKICBpZiAoIWlucHV0KSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykgewogICAgdmFyIHJhZGlvc0NvbnRhaW5lciA9IGlucHV0LnBhcmVudE5vZGUucGFyZW50Tm9kZTsKICAgIHZhciByYWRpb3MgPSByYWRpb3NDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhZGlvcy5sZW5ndGg7IGkrKykgewogICAgICByYWRpb3NbaV0uZGlzYWJsZWQgPSBkaXNhYmxlZDsKICAgIH0KICB9IGVsc2UgewogICAgaW5wdXQuZGlzYWJsZWQgPSBkaXNhYmxlZDsKICB9Cn0KCmZ1bmN0aW9uIGVuYWJsZUJ1dHRvbnMoKSB7CiAgc2V0QnV0dG9uc0Rpc2FibGVkKHRoaXMsIFsnY29uZmlybUJ1dHRvbicsICdjYW5jZWxCdXR0b24nXSwgZmFsc2UpOwp9CmZ1bmN0aW9uIGRpc2FibGVCdXR0b25zKCkgewogIHNldEJ1dHRvbnNEaXNhYmxlZCh0aGlzLCBbJ2NvbmZpcm1CdXR0b24nLCAnY2FuY2VsQnV0dG9uJ10sIHRydWUpOwp9IC8vIEBkZXByZWNhdGVkCgpmdW5jdGlvbiBlbmFibGVDb25maXJtQnV0dG9uKCkgewogIHdhcm5BYm91dERlcHJlYXRpb24oJ1N3YWwuZGlzYWJsZUNvbmZpcm1CdXR0b24oKScsICJTd2FsLmdldENvbmZpcm1CdXR0b24oKS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJykiKTsKICBzZXRCdXR0b25zRGlzYWJsZWQodGhpcywgWydjb25maXJtQnV0dG9uJ10sIGZhbHNlKTsKfSAvLyBAZGVwcmVjYXRlZAoKZnVuY3Rpb24gZGlzYWJsZUNvbmZpcm1CdXR0b24oKSB7CiAgd2FybkFib3V0RGVwcmVhdGlvbignU3dhbC5lbmFibGVDb25maXJtQnV0dG9uKCknLCAiU3dhbC5nZXRDb25maXJtQnV0dG9uKCkuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKSIpOwogIHNldEJ1dHRvbnNEaXNhYmxlZCh0aGlzLCBbJ2NvbmZpcm1CdXR0b24nXSwgdHJ1ZSk7Cn0KZnVuY3Rpb24gZW5hYmxlSW5wdXQoKSB7CiAgcmV0dXJuIHNldElucHV0RGlzYWJsZWQodGhpcy5nZXRJbnB1dCgpLCBmYWxzZSk7Cn0KZnVuY3Rpb24gZGlzYWJsZUlucHV0KCkgewogIHJldHVybiBzZXRJbnB1dERpc2FibGVkKHRoaXMuZ2V0SW5wdXQoKSwgdHJ1ZSk7Cn0KCmZ1bmN0aW9uIHNob3dWYWxpZGF0aW9uTWVzc2FnZShlcnJvcikgewogIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQodGhpcyk7CiAgZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UuaW5uZXJIVE1MID0gZXJyb3I7CiAgdmFyIHBvcHVwQ29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvbUNhY2hlLnBvcHVwKTsKICBkb21DYWNoZS52YWxpZGF0aW9uTWVzc2FnZS5zdHlsZS5tYXJnaW5MZWZ0ID0gIi0iLmNvbmNhdChwb3B1cENvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1sZWZ0JykpOwogIGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlLnN0eWxlLm1hcmdpblJpZ2h0ID0gIi0iLmNvbmNhdChwb3B1cENvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpKTsKICBzaG93KGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlKTsKICB2YXIgaW5wdXQgPSB0aGlzLmdldElucHV0KCk7CgogIGlmIChpbnB1dCkgewogICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnLCB0cnVlKTsKICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRCeScsIHN3YWxDbGFzc2VzWyd2YWxpZGF0aW9uLW1lc3NhZ2UnXSk7CiAgICBmb2N1c0lucHV0KGlucHV0KTsKICAgIGFkZENsYXNzKGlucHV0LCBzd2FsQ2xhc3Nlcy5pbnB1dGVycm9yKTsKICB9Cn0gLy8gSGlkZSBibG9jayB3aXRoIHZhbGlkYXRpb24gbWVzc2FnZQoKZnVuY3Rpb24gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSQxKCkgewogIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQodGhpcyk7CgogIGlmIChkb21DYWNoZS52YWxpZGF0aW9uTWVzc2FnZSkgewogICAgaGlkZShkb21DYWNoZS52YWxpZGF0aW9uTWVzc2FnZSk7CiAgfQoKICB2YXIgaW5wdXQgPSB0aGlzLmdldElucHV0KCk7CgogIGlmIChpbnB1dCkgewogICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWludmFsaWQnKTsKICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRCeScpOwogICAgcmVtb3ZlQ2xhc3MoaW5wdXQsIHN3YWxDbGFzc2VzLmlucHV0ZXJyb3IpOwogIH0KfQoKZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NTdGVwcyQxKCkgewogIHdhcm5BYm91dERlcHJlYXRpb24oJ1N3YWwuZ2V0UHJvZ3Jlc3NTdGVwcygpJywgImNvbnN0IHN3YWxJbnN0YW5jZSA9IFN3YWwuZmlyZSh7cHJvZ3Jlc3NTdGVwczogWycxJywgJzInLCAnMyddfSk7IGNvbnN0IHByb2dyZXNzU3RlcHMgPSBzd2FsSW5zdGFuY2UucGFyYW1zLnByb2dyZXNzU3RlcHMiKTsKICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpOwogIHJldHVybiBpbm5lclBhcmFtcy5wcm9ncmVzc1N0ZXBzOwp9CmZ1bmN0aW9uIHNldFByb2dyZXNzU3RlcHMocHJvZ3Jlc3NTdGVwcykgewogIHdhcm5BYm91dERlcHJlYXRpb24oJ1N3YWwuc2V0UHJvZ3Jlc3NTdGVwcygpJywgJ1N3YWwudXBkYXRlKCknKTsKICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpOwoKICB2YXIgdXBkYXRlZFBhcmFtcyA9IF9leHRlbmRzKHt9LCBpbm5lclBhcmFtcywgewogICAgcHJvZ3Jlc3NTdGVwczogcHJvZ3Jlc3NTdGVwcwogIH0pOwoKICByZW5kZXJQcm9ncmVzc1N0ZXBzKHRoaXMsIHVwZGF0ZWRQYXJhbXMpOwogIHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5zZXQodGhpcywgdXBkYXRlZFBhcmFtcyk7Cn0KZnVuY3Rpb24gc2hvd1Byb2dyZXNzU3RlcHMoKSB7CiAgdmFyIGRvbUNhY2hlID0gcHJpdmF0ZVByb3BzLmRvbUNhY2hlLmdldCh0aGlzKTsKICBzaG93KGRvbUNhY2hlLnByb2dyZXNzU3RlcHMpOwp9CmZ1bmN0aW9uIGhpZGVQcm9ncmVzc1N0ZXBzKCkgewogIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQodGhpcyk7CiAgaGlkZShkb21DYWNoZS5wcm9ncmVzc1N0ZXBzKTsKfQoKdmFyIFRpbWVyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gVGltZXIoY2FsbGJhY2ssIGRlbGF5KSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXIpOwoKICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjazsKICAgIHRoaXMucmVtYWluaW5nID0gZGVsYXk7CiAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTsKICAgIHRoaXMuc3RhcnQoKTsKICB9CgogIF9jcmVhdGVDbGFzcyhUaW1lciwgW3sKICAgIGtleTogInN0YXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHsKICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHsKICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlOwogICAgICAgIHRoaXMuc3RhcnRlZCA9IG5ldyBEYXRlKCk7CiAgICAgICAgdGhpcy5pZCA9IHNldFRpbWVvdXQodGhpcy5jYWxsYmFjaywgdGhpcy5yZW1haW5pbmcpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5yZW1haW5pbmc7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RvcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHsKICAgICAgaWYgKHRoaXMucnVubmluZykgewogICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlOwogICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmlkKTsKICAgICAgICB0aGlzLnJlbWFpbmluZyAtPSBuZXcgRGF0ZSgpIC0gdGhpcy5zdGFydGVkOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5yZW1haW5pbmc7CiAgICB9CiAgfSwgewogICAga2V5OiAiaW5jcmVhc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluY3JlYXNlKG4pIHsKICAgICAgdmFyIHJ1bm5pbmcgPSB0aGlzLnJ1bm5pbmc7CgogICAgICBpZiAocnVubmluZykgewogICAgICAgIHRoaXMuc3RvcCgpOwogICAgICB9CgogICAgICB0aGlzLnJlbWFpbmluZyArPSBuOwoKICAgICAgaWYgKHJ1bm5pbmcpIHsKICAgICAgICB0aGlzLnN0YXJ0KCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnJlbWFpbmluZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRUaW1lckxlZnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRpbWVyTGVmdCgpIHsKICAgICAgaWYgKHRoaXMucnVubmluZykgewogICAgICAgIHRoaXMuc3RvcCgpOwogICAgICAgIHRoaXMuc3RhcnQoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucmVtYWluaW5nOwogICAgfQogIH0sIHsKICAgIGtleTogImlzUnVubmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNSdW5uaW5nKCkgewogICAgICByZXR1cm4gdGhpcy5ydW5uaW5nOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRpbWVyOwp9KCk7Cgp2YXIgZGVmYXVsdElucHV0VmFsaWRhdG9ycyA9IHsKICBlbWFpbDogZnVuY3Rpb24gZW1haWwoc3RyaW5nLCB2YWxpZGF0aW9uTWVzc2FnZSkgewogICAgcmV0dXJuIC9eW2EtekEtWjAtOS4rXy1dK0BbYS16QS1aMC05Li1dK1wuW2EtekEtWjAtOS1dezIsMjR9JC8udGVzdChzdHJpbmcpID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBQcm9taXNlLnJlc29sdmUodmFsaWRhdGlvbk1lc3NhZ2UgfHwgJ0ludmFsaWQgZW1haWwgYWRkcmVzcycpOwogIH0sCiAgdXJsOiBmdW5jdGlvbiB1cmwoc3RyaW5nLCB2YWxpZGF0aW9uTWVzc2FnZSkgewogICAgLy8gdGFrZW4gZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzgwOTQzNSB3aXRoIGEgc21hbGwgY2hhbmdlIGZyb20gIzEzMDYKICAgIHJldHVybiAvXmh0dHBzPzpcL1wvKHd3d1wuKT9bLWEtekEtWjAtOUA6JS5fK34jPV17MiwyNTZ9XC5bYS16XXsyLDYzfVxiKFstYS16QS1aMC05QDolXysufiM/Ji89XSopJC8udGVzdChzdHJpbmcpID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBQcm9taXNlLnJlc29sdmUodmFsaWRhdGlvbk1lc3NhZ2UgfHwgJ0ludmFsaWQgVVJMJyk7CiAgfQp9OwoKZnVuY3Rpb24gc2V0RGVmYXVsdElucHV0VmFsaWRhdG9ycyhwYXJhbXMpIHsKICAvLyBVc2UgZGVmYXVsdCBgaW5wdXRWYWxpZGF0b3JgIGZvciBzdXBwb3J0ZWQgaW5wdXQgdHlwZXMgaWYgbm90IHByb3ZpZGVkCiAgaWYgKCFwYXJhbXMuaW5wdXRWYWxpZGF0b3IpIHsKICAgIE9iamVjdC5rZXlzKGRlZmF1bHRJbnB1dFZhbGlkYXRvcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICBpZiAocGFyYW1zLmlucHV0ID09PSBrZXkpIHsKICAgICAgICBwYXJhbXMuaW5wdXRWYWxpZGF0b3IgPSBkZWZhdWx0SW5wdXRWYWxpZGF0b3JzW2tleV07CiAgICAgIH0KICAgIH0pOwogIH0KfQoKZnVuY3Rpb24gdmFsaWRhdGVDdXN0b21UYXJnZXRFbGVtZW50KHBhcmFtcykgewogIC8vIERldGVybWluZSBpZiB0aGUgY3VzdG9tIHRhcmdldCBlbGVtZW50IGlzIHZhbGlkCiAgaWYgKCFwYXJhbXMudGFyZ2V0IHx8IHR5cGVvZiBwYXJhbXMudGFyZ2V0ID09PSAnc3RyaW5nJyAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMudGFyZ2V0KSB8fCB0eXBlb2YgcGFyYW1zLnRhcmdldCAhPT0gJ3N0cmluZycgJiYgIXBhcmFtcy50YXJnZXQuYXBwZW5kQ2hpbGQpIHsKICAgIHdhcm4oJ1RhcmdldCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkLCBkZWZhdWx0aW5nIHRvICJib2R5IicpOwogICAgcGFyYW1zLnRhcmdldCA9ICdib2R5JzsKICB9Cn0KLyoqCiAqIFNldCB0eXBlLCB0ZXh0IGFuZCBhY3Rpb25zIG9uIHBvcHVwCiAqCiAqIEBwYXJhbSBwYXJhbXMKICogQHJldHVybnMge2Jvb2xlYW59CiAqLwoKCmZ1bmN0aW9uIHNldFBhcmFtZXRlcnMocGFyYW1zKSB7CiAgc2V0RGVmYXVsdElucHV0VmFsaWRhdG9ycyhwYXJhbXMpOyAvLyBzaG93TG9hZGVyT25Db25maXJtICYmIHByZUNvbmZpcm0KCiAgaWYgKHBhcmFtcy5zaG93TG9hZGVyT25Db25maXJtICYmICFwYXJhbXMucHJlQ29uZmlybSkgewogICAgd2Fybignc2hvd0xvYWRlck9uQ29uZmlybSBpcyBzZXQgdG8gdHJ1ZSwgYnV0IHByZUNvbmZpcm0gaXMgbm90IGRlZmluZWQuXG4nICsgJ3Nob3dMb2FkZXJPbkNvbmZpcm0gc2hvdWxkIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCBwcmVDb25maXJtLCBzZWUgdXNhZ2UgZXhhbXBsZTpcbicgKyAnaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vI2FqYXgtcmVxdWVzdCcpOwogIH0gLy8gcGFyYW1zLmFuaW1hdGlvbiB3aWxsIGJlIGFjdHVhbGx5IHVzZWQgaW4gcmVuZGVyUG9wdXAuanMKICAvLyBidXQgaW4gY2FzZSB3aGVuIHBhcmFtcy5hbmltYXRpb24gaXMgYSBmdW5jdGlvbiwgd2UgbmVlZCB0byBjYWxsIHRoYXQgZnVuY3Rpb24KICAvLyBiZWZvcmUgcG9wdXAgKHJlKWluaXRpYWxpemF0aW9uLCBzbyBpdCdsbCBiZSBwb3NzaWJsZSB0byBjaGVjayBTd2FsLmlzVmlzaWJsZSgpCiAgLy8gaW5zaWRlIHRoZSBwYXJhbXMuYW5pbWF0aW9uIGZ1bmN0aW9uCgoKICBwYXJhbXMuYW5pbWF0aW9uID0gY2FsbElmRnVuY3Rpb24ocGFyYW1zLmFuaW1hdGlvbik7CiAgdmFsaWRhdGVDdXN0b21UYXJnZXRFbGVtZW50KHBhcmFtcyk7IC8vIFJlcGxhY2UgbmV3bGluZXMgd2l0aCA8YnI+IGluIHRpdGxlCgogIGlmICh0eXBlb2YgcGFyYW1zLnRpdGxlID09PSAnc3RyaW5nJykgewogICAgcGFyYW1zLnRpdGxlID0gcGFyYW1zLnRpdGxlLnNwbGl0KCdcbicpLmpvaW4oJzxiciAvPicpOwogIH0KCiAgaW5pdChwYXJhbXMpOwp9CgpmdW5jdGlvbiBzd2FsT3BlbkFuaW1hdGlvbkZpbmlzaGVkKHBvcHVwLCBjb250YWluZXIpIHsKICBwb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZEV2ZW50LCBzd2FsT3BlbkFuaW1hdGlvbkZpbmlzaGVkKTsKICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3dZID0gJ2F1dG8nOwp9Ci8qKgogKiBPcGVuIHBvcHVwLCBhZGQgbmVjZXNzYXJ5IGNsYXNzZXMgYW5kIHN0eWxlcywgZml4IHNjcm9sbGJhcgogKgogKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMKICovCgoKdmFyIG9wZW5Qb3B1cCA9IGZ1bmN0aW9uIG9wZW5Qb3B1cChwYXJhbXMpIHsKICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7CiAgdmFyIHBvcHVwID0gZ2V0UG9wdXAoKTsKCiAgaWYgKHR5cGVvZiBwYXJhbXMub25CZWZvcmVPcGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICBwYXJhbXMub25CZWZvcmVPcGVuKHBvcHVwKTsKICB9CgogIGFkZENsYXNzZXMoY29udGFpbmVyLCBwb3B1cCwgcGFyYW1zKTsgLy8gc2Nyb2xsaW5nIGlzICdoaWRkZW4nIHVudGlsIGFuaW1hdGlvbiBpcyBkb25lLCBhZnRlciB0aGF0ICdhdXRvJwoKICBzZXRTY3JvbGxpbmdWaXNpYmlsaXR5KGNvbnRhaW5lciwgcG9wdXApOwoKICBpZiAoaXNNb2RhbCgpKSB7CiAgICBmaXhTY3JvbGxDb250YWluZXIoY29udGFpbmVyLCBwYXJhbXMuc2Nyb2xsYmFyUGFkZGluZyk7CiAgfQoKICBpZiAoIWlzVG9hc3QoKSAmJiAhZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50KSB7CiAgICBnbG9iYWxTdGF0ZS5wcmV2aW91c0FjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50OwogIH0KCiAgaWYgKHR5cGVvZiBwYXJhbXMub25PcGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHBhcmFtcy5vbk9wZW4ocG9wdXApOwogICAgfSk7CiAgfQp9OwoKdmFyIHNldFNjcm9sbGluZ1Zpc2liaWxpdHkgPSBmdW5jdGlvbiBzZXRTY3JvbGxpbmdWaXNpYmlsaXR5KGNvbnRhaW5lciwgcG9wdXApIHsKICBpZiAoYW5pbWF0aW9uRW5kRXZlbnQgJiYgaGFzQ3NzQW5pbWF0aW9uKHBvcHVwKSkgewogICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nOwogICAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgc3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZC5iaW5kKG51bGwsIHBvcHVwLCBjb250YWluZXIpKTsKICB9IGVsc2UgewogICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJzsKICB9Cn07Cgp2YXIgZml4U2Nyb2xsQ29udGFpbmVyID0gZnVuY3Rpb24gZml4U2Nyb2xsQ29udGFpbmVyKGNvbnRhaW5lciwgc2Nyb2xsYmFyUGFkZGluZykgewogIGlPU2ZpeCgpOwogIElFZml4KCk7CiAgc2V0QXJpYUhpZGRlbigpOwoKICBpZiAoc2Nyb2xsYmFyUGFkZGluZykgewogICAgZml4U2Nyb2xsYmFyKCk7CiAgfSAvLyBzd2VldGFsZXJ0Mi9pc3N1ZXMvMTI0NwoKCiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gMDsKICB9KTsKfTsKCnZhciBhZGRDbGFzc2VzID0gZnVuY3Rpb24gYWRkQ2xhc3Nlcyhjb250YWluZXIsIHBvcHVwLCBwYXJhbXMpIHsKICBpZiAocGFyYW1zLmFuaW1hdGlvbikgewogICAgYWRkQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLnNob3cpOwogICAgYWRkQ2xhc3MoY29udGFpbmVyLCBzd2FsQ2xhc3Nlcy5mYWRlKTsKICB9CgogIHNob3cocG9wdXApOwogIGFkZENsYXNzKFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHksIGNvbnRhaW5lcl0sIHN3YWxDbGFzc2VzLnNob3duKTsKCiAgaWYgKHBhcmFtcy5oZWlnaHRBdXRvICYmIHBhcmFtcy5iYWNrZHJvcCAmJiAhcGFyYW1zLnRvYXN0KSB7CiAgICBhZGRDbGFzcyhbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudC5ib2R5XSwgc3dhbENsYXNzZXNbJ2hlaWdodC1hdXRvJ10pOwogIH0KfTsKCnZhciBoYW5kbGVJbnB1dE9wdGlvbnMgPSBmdW5jdGlvbiBoYW5kbGVJbnB1dE9wdGlvbnMoaW5zdGFuY2UsIHBhcmFtcykgewogIHZhciBjb250ZW50ID0gZ2V0Q29udGVudCgpOwoKICB2YXIgcHJvY2Vzc0lucHV0T3B0aW9ucyA9IGZ1bmN0aW9uIHByb2Nlc3NJbnB1dE9wdGlvbnMoaW5wdXRPcHRpb25zKSB7CiAgICByZXR1cm4gcG9wdWxhdGVJbnB1dE9wdGlvbnNbcGFyYW1zLmlucHV0XShjb250ZW50LCBmb3JtYXRJbnB1dE9wdGlvbnMoaW5wdXRPcHRpb25zKSwgcGFyYW1zKTsKICB9OwoKICBpZiAoaXNQcm9taXNlKHBhcmFtcy5pbnB1dE9wdGlvbnMpKSB7CiAgICBzaG93TG9hZGluZygpOwogICAgcGFyYW1zLmlucHV0T3B0aW9ucy50aGVuKGZ1bmN0aW9uIChpbnB1dE9wdGlvbnMpIHsKICAgICAgaW5zdGFuY2UuaGlkZUxvYWRpbmcoKTsKICAgICAgcHJvY2Vzc0lucHV0T3B0aW9ucyhpbnB1dE9wdGlvbnMpOwogICAgfSk7CiAgfSBlbHNlIGlmIChfdHlwZW9mKHBhcmFtcy5pbnB1dE9wdGlvbnMpID09PSAnb2JqZWN0JykgewogICAgcHJvY2Vzc0lucHV0T3B0aW9ucyhwYXJhbXMuaW5wdXRPcHRpb25zKTsKICB9IGVsc2UgewogICAgZXJyb3IoIlVuZXhwZWN0ZWQgdHlwZSBvZiBpbnB1dE9wdGlvbnMhIEV4cGVjdGVkIG9iamVjdCwgTWFwIG9yIFByb21pc2UsIGdvdCAiLmNvbmNhdChfdHlwZW9mKHBhcmFtcy5pbnB1dE9wdGlvbnMpKSk7CiAgfQp9Owp2YXIgaGFuZGxlSW5wdXRWYWx1ZSA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0VmFsdWUoaW5zdGFuY2UsIHBhcmFtcykgewogIHZhciBpbnB1dCA9IGluc3RhbmNlLmdldElucHV0KCk7CiAgaGlkZShpbnB1dCk7CiAgcGFyYW1zLmlucHV0VmFsdWUudGhlbihmdW5jdGlvbiAoaW5wdXRWYWx1ZSkgewogICAgaW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXQgPT09ICdudW1iZXInID8gcGFyc2VGbG9hdChpbnB1dFZhbHVlKSB8fCAwIDogaW5wdXRWYWx1ZSArICcnOwogICAgc2hvdyhpbnB1dCk7CiAgICBpbnB1dC5mb2N1cygpOwogICAgaW5zdGFuY2UuaGlkZUxvYWRpbmcoKTsKICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZXJyKSB7CiAgICBlcnJvcignRXJyb3IgaW4gaW5wdXRWYWx1ZSBwcm9taXNlOiAnICsgZXJyKTsKICAgIGlucHV0LnZhbHVlID0gJyc7CiAgICBzaG93KGlucHV0KTsKICAgIGlucHV0LmZvY3VzKCk7CiAgICBpbnN0YW5jZS5oaWRlTG9hZGluZygpOwogIH0pOwp9Owp2YXIgcG9wdWxhdGVJbnB1dE9wdGlvbnMgPSB7CiAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoY29udGVudCwgaW5wdXRPcHRpb25zLCBwYXJhbXMpIHsKICAgIHZhciBzZWxlY3QgPSBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXMuc2VsZWN0KTsKICAgIGlucHV0T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dE9wdGlvbikgewogICAgICB2YXIgb3B0aW9uVmFsdWUgPSBpbnB1dE9wdGlvblswXTsKICAgICAgdmFyIG9wdGlvbkxhYmVsID0gaW5wdXRPcHRpb25bMV07CiAgICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTsKICAgICAgb3B0aW9uLnZhbHVlID0gb3B0aW9uVmFsdWU7CiAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBvcHRpb25MYWJlbDsKCiAgICAgIGlmIChwYXJhbXMuaW5wdXRWYWx1ZS50b1N0cmluZygpID09PSBvcHRpb25WYWx1ZS50b1N0cmluZygpKSB7CiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgfQoKICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7CiAgICB9KTsKICAgIHNlbGVjdC5mb2N1cygpOwogIH0sCiAgcmFkaW86IGZ1bmN0aW9uIHJhZGlvKGNvbnRlbnQsIGlucHV0T3B0aW9ucywgcGFyYW1zKSB7CiAgICB2YXIgcmFkaW8gPSBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXMucmFkaW8pOwogICAgaW5wdXRPcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKGlucHV0T3B0aW9uKSB7CiAgICAgIHZhciByYWRpb1ZhbHVlID0gaW5wdXRPcHRpb25bMF07CiAgICAgIHZhciByYWRpb0xhYmVsID0gaW5wdXRPcHRpb25bMV07CiAgICAgIHZhciByYWRpb0lucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgdmFyIHJhZGlvTGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTsKICAgICAgcmFkaW9JbnB1dC50eXBlID0gJ3JhZGlvJzsKICAgICAgcmFkaW9JbnB1dC5uYW1lID0gc3dhbENsYXNzZXMucmFkaW87CiAgICAgIHJhZGlvSW5wdXQudmFsdWUgPSByYWRpb1ZhbHVlOwoKICAgICAgaWYgKHBhcmFtcy5pbnB1dFZhbHVlLnRvU3RyaW5nKCkgPT09IHJhZGlvVmFsdWUudG9TdHJpbmcoKSkgewogICAgICAgIHJhZGlvSW5wdXQuY2hlY2tlZCA9IHRydWU7CiAgICAgIH0KCiAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgbGFiZWwuaW5uZXJIVE1MID0gcmFkaW9MYWJlbDsKICAgICAgbGFiZWwuY2xhc3NOYW1lID0gc3dhbENsYXNzZXMubGFiZWw7CiAgICAgIHJhZGlvTGFiZWxFbGVtZW50LmFwcGVuZENoaWxkKHJhZGlvSW5wdXQpOwogICAgICByYWRpb0xhYmVsRWxlbWVudC5hcHBlbmRDaGlsZChsYWJlbCk7CiAgICAgIHJhZGlvLmFwcGVuZENoaWxkKHJhZGlvTGFiZWxFbGVtZW50KTsKICAgIH0pOwogICAgdmFyIHJhZGlvcyA9IHJhZGlvLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7CgogICAgaWYgKHJhZGlvcy5sZW5ndGgpIHsKICAgICAgcmFkaW9zWzBdLmZvY3VzKCk7CiAgICB9CiAgfQogIC8qKgogICAqIENvbnZlcnRzIGBpbnB1dE9wdGlvbnNgIGludG8gYW4gYXJyYXkgb2YgYFt2YWx1ZSwgbGFiZWxdYHMKICAgKiBAcGFyYW0gaW5wdXRPcHRpb25zCiAgICovCgp9OwoKdmFyIGZvcm1hdElucHV0T3B0aW9ucyA9IGZ1bmN0aW9uIGZvcm1hdElucHV0T3B0aW9ucyhpbnB1dE9wdGlvbnMpIHsKICB2YXIgcmVzdWx0ID0gW107CgogIGlmICh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dE9wdGlvbnMgaW5zdGFuY2VvZiBNYXApIHsKICAgIGlucHV0T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICAgIHJlc3VsdC5wdXNoKFtrZXksIHZhbHVlXSk7CiAgICB9KTsKICB9IGVsc2UgewogICAgT2JqZWN0LmtleXMoaW5wdXRPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgcmVzdWx0LnB1c2goW2tleSwgaW5wdXRPcHRpb25zW2tleV1dKTsKICAgIH0pOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfTsKCmZ1bmN0aW9uIF9tYWluKHVzZXJQYXJhbXMpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwoKICBzaG93V2FybmluZ3NGb3JQYXJhbXModXNlclBhcmFtcyk7IC8vIENoZWNrIGlmIHRoZXJlIGlzIGFub3RoZXIgU3dhbCBjbG9zaW5nCgogIGlmIChnZXRQb3B1cCgpICYmIGdsb2JhbFN0YXRlLnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaykgewogICAgZ2xvYmFsU3RhdGUuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrKCk7CiAgICBkZWxldGUgZ2xvYmFsU3RhdGUuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrOwogIH0gLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBzd2FsIGRpc3Bvc2FsIGRlZmVyIHRpbWVyCgoKICBpZiAoZ2xvYmFsU3RhdGUuZGVmZXJEaXNwb3NhbFRpbWVyKSB7CiAgICBjbGVhclRpbWVvdXQoZ2xvYmFsU3RhdGUuZGVmZXJEaXNwb3NhbFRpbWVyKTsKICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS5kZWZlckRpc3Bvc2FsVGltZXI7CiAgfQoKICB2YXIgaW5uZXJQYXJhbXMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFBhcmFtcywgdXNlclBhcmFtcyk7CgogIHNldFBhcmFtZXRlcnMoaW5uZXJQYXJhbXMpOwogIE9iamVjdC5mcmVlemUoaW5uZXJQYXJhbXMpOyAvLyBjbGVhciB0aGUgcHJldmlvdXMgdGltZXIKCiAgaWYgKGdsb2JhbFN0YXRlLnRpbWVvdXQpIHsKICAgIGdsb2JhbFN0YXRlLnRpbWVvdXQuc3RvcCgpOwogICAgZGVsZXRlIGdsb2JhbFN0YXRlLnRpbWVvdXQ7CiAgfSAvLyBjbGVhciB0aGUgcmVzdG9yZSBmb2N1cyB0aW1lb3V0CgoKICBjbGVhclRpbWVvdXQoZ2xvYmFsU3RhdGUucmVzdG9yZUZvY3VzVGltZW91dCk7CiAgdmFyIGRvbUNhY2hlID0gewogICAgcG9wdXA6IGdldFBvcHVwKCksCiAgICBjb250YWluZXI6IGdldENvbnRhaW5lcigpLAogICAgY29udGVudDogZ2V0Q29udGVudCgpLAogICAgYWN0aW9uczogZ2V0QWN0aW9ucygpLAogICAgY29uZmlybUJ1dHRvbjogZ2V0Q29uZmlybUJ1dHRvbigpLAogICAgY2FuY2VsQnV0dG9uOiBnZXRDYW5jZWxCdXR0b24oKSwKICAgIGNsb3NlQnV0dG9uOiBnZXRDbG9zZUJ1dHRvbigpLAogICAgdmFsaWRhdGlvbk1lc3NhZ2U6IGdldFZhbGlkYXRpb25NZXNzYWdlKCksCiAgICBwcm9ncmVzc1N0ZXBzOiBnZXRQcm9ncmVzc1N0ZXBzKCkKICB9OwogIHByaXZhdGVQcm9wcy5kb21DYWNoZS5zZXQodGhpcywgZG9tQ2FjaGUpOwogIHJlbmRlcih0aGlzLCBpbm5lclBhcmFtcyk7CiAgcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLnNldCh0aGlzLCBpbm5lclBhcmFtcyk7CiAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgIC8vIGZ1bmN0aW9ucyB0byBoYW5kbGUgYWxsIGNsb3NpbmdzL2Rpc21pc3NhbHMKICAgIHZhciBzdWNjZWVkV2l0aCA9IGZ1bmN0aW9uIHN1Y2NlZWRXaXRoKHZhbHVlKSB7CiAgICAgIF90aGlzLmNsb3NlUG9wdXAoewogICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICB9KTsKICAgIH07CgogICAgdmFyIGRpc21pc3NXaXRoID0gZnVuY3Rpb24gZGlzbWlzc1dpdGgoZGlzbWlzcykgewogICAgICBfdGhpcy5jbG9zZVBvcHVwKHsKICAgICAgICBkaXNtaXNzOiBkaXNtaXNzCiAgICAgIH0pOwogICAgfTsKCiAgICBwcml2YXRlTWV0aG9kcy5zd2FsUHJvbWlzZVJlc29sdmUuc2V0KF90aGlzLCByZXNvbHZlKTsgLy8gQ2xvc2Ugb24gdGltZXIKCiAgICBpZiAoaW5uZXJQYXJhbXMudGltZXIpIHsKICAgICAgZ2xvYmFsU3RhdGUudGltZW91dCA9IG5ldyBUaW1lcihmdW5jdGlvbiAoKSB7CiAgICAgICAgZGlzbWlzc1dpdGgoJ3RpbWVyJyk7CiAgICAgICAgZGVsZXRlIGdsb2JhbFN0YXRlLnRpbWVvdXQ7CiAgICAgIH0sIGlubmVyUGFyYW1zLnRpbWVyKTsKICAgIH0gLy8gR2V0IHRoZSB2YWx1ZSBvZiB0aGUgcG9wdXAgaW5wdXQKCgogICAgdmFyIGdldElucHV0VmFsdWUgPSBmdW5jdGlvbiBnZXRJbnB1dFZhbHVlKCkgewogICAgICB2YXIgaW5wdXQgPSBfdGhpcy5nZXRJbnB1dCgpOwoKICAgICAgaWYgKCFpbnB1dCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICBzd2l0Y2ggKGlubmVyUGFyYW1zLmlucHV0KSB7CiAgICAgICAgY2FzZSAnY2hlY2tib3gnOgogICAgICAgICAgcmV0dXJuIGlucHV0LmNoZWNrZWQgPyAxIDogMDsKCiAgICAgICAgY2FzZSAncmFkaW8nOgogICAgICAgICAgcmV0dXJuIGlucHV0LmNoZWNrZWQgPyBpbnB1dC52YWx1ZSA6IG51bGw7CgogICAgICAgIGNhc2UgJ2ZpbGUnOgogICAgICAgICAgcmV0dXJuIGlucHV0LmZpbGVzLmxlbmd0aCA/IGlucHV0LmZpbGVzWzBdIDogbnVsbDsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBpbm5lclBhcmFtcy5pbnB1dEF1dG9UcmltID8gaW5wdXQudmFsdWUudHJpbSgpIDogaW5wdXQudmFsdWU7CiAgICAgIH0KICAgIH07IC8vIGlucHV0IGF1dG9mb2N1cwoKCiAgICBpZiAoaW5uZXJQYXJhbXMuaW5wdXQpIHsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGlucHV0ID0gX3RoaXMuZ2V0SW5wdXQoKTsKCiAgICAgICAgaWYgKGlucHV0KSB7CiAgICAgICAgICBmb2N1c0lucHV0KGlucHV0KTsKICAgICAgICB9CiAgICAgIH0sIDApOwogICAgfQoKICAgIHZhciBjb25maXJtID0gZnVuY3Rpb24gY29uZmlybSh2YWx1ZSkgewogICAgICBpZiAoaW5uZXJQYXJhbXMuc2hvd0xvYWRlck9uQ29uZmlybSkgewogICAgICAgIGNvbnN0cnVjdG9yLnNob3dMb2FkaW5nKCk7IC8vIFRPRE86IG1ha2Ugc2hvd0xvYWRpbmcgYW4gKmluc3RhbmNlKiBtZXRob2QKICAgICAgfQoKICAgICAgaWYgKGlubmVyUGFyYW1zLnByZUNvbmZpcm0pIHsKICAgICAgICBfdGhpcy5yZXNldFZhbGlkYXRpb25NZXNzYWdlKCk7CgogICAgICAgIHZhciBwcmVDb25maXJtUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIGlubmVyUGFyYW1zLnByZUNvbmZpcm0odmFsdWUsIGlubmVyUGFyYW1zLnZhbGlkYXRpb25NZXNzYWdlKTsKICAgICAgICB9KTsKICAgICAgICBwcmVDb25maXJtUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwcmVDb25maXJtVmFsdWUpIHsKICAgICAgICAgIGlmIChpc1Zpc2libGUoZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UpIHx8IHByZUNvbmZpcm1WYWx1ZSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgX3RoaXMuaGlkZUxvYWRpbmcoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1Y2NlZWRXaXRoKHR5cGVvZiBwcmVDb25maXJtVmFsdWUgPT09ICd1bmRlZmluZWQnID8gdmFsdWUgOiBwcmVDb25maXJtVmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHN1Y2NlZWRXaXRoKHZhbHVlKTsKICAgICAgfQogICAgfTsgLy8gTW91c2UgaW50ZXJhY3Rpb25zCgoKICAgIHZhciBvbkJ1dHRvbkV2ZW50ID0gZnVuY3Rpb24gb25CdXR0b25FdmVudChlKSB7CiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDsKICAgICAgdmFyIGNvbmZpcm1CdXR0b24gPSBkb21DYWNoZS5jb25maXJtQnV0dG9uLAogICAgICAgICAgY2FuY2VsQnV0dG9uID0gZG9tQ2FjaGUuY2FuY2VsQnV0dG9uOwogICAgICB2YXIgdGFyZ2V0ZWRDb25maXJtID0gY29uZmlybUJ1dHRvbiAmJiAoY29uZmlybUJ1dHRvbiA9PT0gdGFyZ2V0IHx8IGNvbmZpcm1CdXR0b24uY29udGFpbnModGFyZ2V0KSk7CiAgICAgIHZhciB0YXJnZXRlZENhbmNlbCA9IGNhbmNlbEJ1dHRvbiAmJiAoY2FuY2VsQnV0dG9uID09PSB0YXJnZXQgfHwgY2FuY2VsQnV0dG9uLmNvbnRhaW5zKHRhcmdldCkpOwoKICAgICAgc3dpdGNoIChlLnR5cGUpIHsKICAgICAgICBjYXNlICdjbGljayc6CiAgICAgICAgICAvLyBDbGlja2VkICdjb25maXJtJwogICAgICAgICAgaWYgKHRhcmdldGVkQ29uZmlybSkgewogICAgICAgICAgICBfdGhpcy5kaXNhYmxlQnV0dG9ucygpOwoKICAgICAgICAgICAgaWYgKGlubmVyUGFyYW1zLmlucHV0KSB7CiAgICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBnZXRJbnB1dFZhbHVlKCk7CgogICAgICAgICAgICAgIGlmIChpbm5lclBhcmFtcy5pbnB1dFZhbGlkYXRvcikgewogICAgICAgICAgICAgICAgX3RoaXMuZGlzYWJsZUlucHV0KCk7CgogICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBpbm5lclBhcmFtcy5pbnB1dFZhbGlkYXRvcihpbnB1dFZhbHVlLCBpbm5lclBhcmFtcy52YWxpZGF0aW9uTWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhbGlkYXRpb25Qcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbGlkYXRpb25NZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLmVuYWJsZUJ1dHRvbnMoKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzLmVuYWJsZUlucHV0KCk7CgogICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbk1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5zaG93VmFsaWRhdGlvbk1lc3NhZ2UodmFsaWRhdGlvbk1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvbmZpcm0oaW5wdXRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLmdldElucHV0KCkuY2hlY2tWYWxpZGl0eSgpKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5lbmFibGVCdXR0b25zKCk7CgogICAgICAgICAgICAgICAgX3RoaXMuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKGlubmVyUGFyYW1zLnZhbGlkYXRpb25NZXNzYWdlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uZmlybShpbnB1dFZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29uZmlybSh0cnVlKTsKICAgICAgICAgICAgfSAvLyBDbGlja2VkICdjYW5jZWwnCgogICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRlZENhbmNlbCkgewogICAgICAgICAgICBfdGhpcy5kaXNhYmxlQnV0dG9ucygpOwoKICAgICAgICAgICAgZGlzbWlzc1dpdGgoY29uc3RydWN0b3IuRGlzbWlzc1JlYXNvbi5jYW5jZWwpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICB9CiAgICB9OwoKICAgIHZhciBidXR0b25zID0gZG9tQ2FjaGUucG9wdXAucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgaSsrKSB7CiAgICAgIGJ1dHRvbnNbaV0ub25jbGljayA9IG9uQnV0dG9uRXZlbnQ7CiAgICAgIGJ1dHRvbnNbaV0ub25tb3VzZW92ZXIgPSBvbkJ1dHRvbkV2ZW50OwogICAgICBidXR0b25zW2ldLm9ubW91c2VvdXQgPSBvbkJ1dHRvbkV2ZW50OwogICAgICBidXR0b25zW2ldLm9ubW91c2Vkb3duID0gb25CdXR0b25FdmVudDsKICAgIH0gLy8gQ2xvc2luZyBwb3B1cCBieSBjbG9zZSBidXR0b24KCgogICAgZG9tQ2FjaGUuY2xvc2VCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHsKICAgICAgZGlzbWlzc1dpdGgoY29uc3RydWN0b3IuRGlzbWlzc1JlYXNvbi5jbG9zZSk7CiAgICB9OwoKICAgIGlmIChpbm5lclBhcmFtcy50b2FzdCkgewogICAgICAvLyBDbG9zaW5nIHBvcHVwIGJ5IGludGVybmFsIGNsaWNrCiAgICAgIGRvbUNhY2hlLnBvcHVwLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKGlubmVyUGFyYW1zLnNob3dDb25maXJtQnV0dG9uIHx8IGlubmVyUGFyYW1zLnNob3dDYW5jZWxCdXR0b24gfHwgaW5uZXJQYXJhbXMuc2hvd0Nsb3NlQnV0dG9uIHx8IGlubmVyUGFyYW1zLmlucHV0KSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBkaXNtaXNzV2l0aChjb25zdHJ1Y3Rvci5EaXNtaXNzUmVhc29uLmNsb3NlKTsKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBpZ25vcmVPdXRzaWRlQ2xpY2sgPSBmYWxzZTsgLy8gSWdub3JlIGNsaWNrIGV2ZW50cyB0aGF0IGhhZCBtb3VzZWRvd24gb24gdGhlIHBvcHVwIGJ1dCBtb3VzZXVwIG9uIHRoZSBjb250YWluZXIKICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gdGhlIHVzZXIgZHJhZ3MgYSBzbGlkZXIKCiAgICAgIGRvbUNhY2hlLnBvcHVwLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKCkgewogICAgICAgIGRvbUNhY2hlLmNvbnRhaW5lci5vbm1vdXNldXAgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgZG9tQ2FjaGUuY29udGFpbmVyLm9ubW91c2V1cCA9IHVuZGVmaW5lZDsgLy8gV2Ugb25seSBjaGVjayBpZiB0aGUgbW91c2V1cCB0YXJnZXQgaXMgdGhlIGNvbnRhaW5lciBiZWNhdXNlIHVzdWFsbHkgaXQgZG9lc24ndAogICAgICAgICAgLy8gaGF2ZSBhbnkgb3RoZXIgZGlyZWN0IGNoaWxkcmVuIGFzaWRlIG9mIHRoZSBwb3B1cAoKICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZG9tQ2FjaGUuY29udGFpbmVyKSB7CiAgICAgICAgICAgIGlnbm9yZU91dHNpZGVDbGljayA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfTsgLy8gSWdub3JlIGNsaWNrIGV2ZW50cyB0aGF0IGhhZCBtb3VzZWRvd24gb24gdGhlIGNvbnRhaW5lciBidXQgbW91c2V1cCBvbiB0aGUgcG9wdXAKCgogICAgICBkb21DYWNoZS5jb250YWluZXIub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgZG9tQ2FjaGUucG9wdXAub25tb3VzZXVwID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGRvbUNhY2hlLnBvcHVwLm9ubW91c2V1cCA9IHVuZGVmaW5lZDsgLy8gV2UgYWxzbyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBtb3VzZXVwIHRhcmdldCBpcyBhIGNoaWxkIG9mIHRoZSBwb3B1cAoKICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZG9tQ2FjaGUucG9wdXAgfHwgZG9tQ2FjaGUucG9wdXAuY29udGFpbnMoZS50YXJnZXQpKSB7CiAgICAgICAgICAgIGlnbm9yZU91dHNpZGVDbGljayA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfTsKCiAgICAgIGRvbUNhY2hlLmNvbnRhaW5lci5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoaWdub3JlT3V0c2lkZUNsaWNrKSB7CiAgICAgICAgICBpZ25vcmVPdXRzaWRlQ2xpY2sgPSBmYWxzZTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChlLnRhcmdldCAhPT0gZG9tQ2FjaGUuY29udGFpbmVyKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoY2FsbElmRnVuY3Rpb24oaW5uZXJQYXJhbXMuYWxsb3dPdXRzaWRlQ2xpY2spKSB7CiAgICAgICAgICBkaXNtaXNzV2l0aChjb25zdHJ1Y3Rvci5EaXNtaXNzUmVhc29uLmJhY2tkcm9wKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9IC8vIFJldmVyc2UgYnV0dG9ucyAoQ29uZmlybSBvbiB0aGUgcmlnaHQgc2lkZSkKCgogICAgaWYgKGlubmVyUGFyYW1zLnJldmVyc2VCdXR0b25zKSB7CiAgICAgIGRvbUNhY2hlLmNvbmZpcm1CdXR0b24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9tQ2FjaGUuY2FuY2VsQnV0dG9uLCBkb21DYWNoZS5jb25maXJtQnV0dG9uKTsKICAgIH0gZWxzZSB7CiAgICAgIGRvbUNhY2hlLmNvbmZpcm1CdXR0b24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9tQ2FjaGUuY29uZmlybUJ1dHRvbiwgZG9tQ2FjaGUuY2FuY2VsQnV0dG9uKTsKICAgIH0gLy8gRm9jdXMgaGFuZGxpbmcKCgogICAgdmFyIHNldEZvY3VzID0gZnVuY3Rpb24gc2V0Rm9jdXMoaW5kZXgsIGluY3JlbWVudCkgewogICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBnZXRGb2N1c2FibGVFbGVtZW50cyhpbm5lclBhcmFtcy5mb2N1c0NhbmNlbCk7IC8vIHNlYXJjaCBmb3IgdmlzaWJsZSBlbGVtZW50cyBhbmQgc2VsZWN0IHRoZSBuZXh0IHBvc3NpYmxlIG1hdGNoCgogICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgaW5kZXggPSBpbmRleCArIGluY3JlbWVudDsgLy8gcm9sbG92ZXIgdG8gZmlyc3QgaXRlbQoKICAgICAgICBpZiAoaW5kZXggPT09IGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCkgewogICAgICAgICAgaW5kZXggPSAwOyAvLyBnbyB0byBsYXN0IGl0ZW0KICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgaW5kZXggPSBmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggLSAxOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZvY3VzYWJsZUVsZW1lbnRzW2luZGV4XS5mb2N1cygpOwogICAgICB9IC8vIG5vIHZpc2libGUgZm9jdXNhYmxlIGVsZW1lbnRzLCBmb2N1cyB0aGUgcG9wdXAKCgogICAgICBkb21DYWNoZS5wb3B1cC5mb2N1cygpOwogICAgfTsKCiAgICB2YXIga2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBrZXlkb3duSGFuZGxlcihlLCBpbm5lclBhcmFtcykgewogICAgICBpZiAoaW5uZXJQYXJhbXMuc3RvcEtleWRvd25Qcm9wYWdhdGlvbikgewogICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIH0KCiAgICAgIHZhciBhcnJvd0tleXMgPSBbJ0Fycm93TGVmdCcsICdBcnJvd1JpZ2h0JywgJ0Fycm93VXAnLCAnQXJyb3dEb3duJywgJ0xlZnQnLCAnUmlnaHQnLCAnVXAnLCAnRG93bicgLy8gSUUxMQogICAgICBdOwoKICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmICFlLmlzQ29tcG9zaW5nKSB7CiAgICAgICAgaWYgKGUudGFyZ2V0ICYmIF90aGlzLmdldElucHV0KCkgJiYgZS50YXJnZXQub3V0ZXJIVE1MID09PSBfdGhpcy5nZXRJbnB1dCgpLm91dGVySFRNTCkgewogICAgICAgICAgaWYgKFsndGV4dGFyZWEnLCAnZmlsZSddLmluZGV4T2YoaW5uZXJQYXJhbXMuaW5wdXQpICE9PSAtMSkgewogICAgICAgICAgICByZXR1cm47IC8vIGRvIG5vdCBzdWJtaXQKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdHJ1Y3Rvci5jbGlja0NvbmZpcm0oKTsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9IC8vIFRBQgoKICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ1RhYicpIHsKICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0OwogICAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50cyA9IGdldEZvY3VzYWJsZUVsZW1lbnRzKGlubmVyUGFyYW1zLmZvY3VzQ2FuY2VsKTsKICAgICAgICB2YXIgYnRuSW5kZXggPSAtMTsKCiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoOyBfaTIrKykgewogICAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQgPT09IGZvY3VzYWJsZUVsZW1lbnRzW19pMl0pIHsKICAgICAgICAgICAgYnRuSW5kZXggPSBfaTI7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCFlLnNoaWZ0S2V5KSB7CiAgICAgICAgICAvLyBDeWNsZSB0byB0aGUgbmV4dCBidXR0b24KICAgICAgICAgIHNldEZvY3VzKGJ0bkluZGV4LCAxKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gQ3ljbGUgdG8gdGhlIHByZXYgYnV0dG9uCiAgICAgICAgICBzZXRGb2N1cyhidG5JbmRleCwgLTEpOwogICAgICAgIH0KCiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIEFSUk9XUyAtIHN3aXRjaCBmb2N1cyBiZXR3ZWVuIGJ1dHRvbnMKICAgICAgfSBlbHNlIGlmIChhcnJvd0tleXMuaW5kZXhPZihlLmtleSkgIT09IC0xKSB7CiAgICAgICAgLy8gZm9jdXMgQ2FuY2VsIGJ1dHRvbiBpZiBDb25maXJtIGJ1dHRvbiBpcyBjdXJyZW50bHkgZm9jdXNlZAogICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBkb21DYWNoZS5jb25maXJtQnV0dG9uICYmIGlzVmlzaWJsZShkb21DYWNoZS5jYW5jZWxCdXR0b24pKSB7CiAgICAgICAgICBkb21DYWNoZS5jYW5jZWxCdXR0b24uZm9jdXMoKTsgLy8gYW5kIHZpY2UgdmVyc2EKICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvbUNhY2hlLmNhbmNlbEJ1dHRvbiAmJiBpc1Zpc2libGUoZG9tQ2FjaGUuY29uZmlybUJ1dHRvbikpIHsKICAgICAgICAgIGRvbUNhY2hlLmNvbmZpcm1CdXR0b24uZm9jdXMoKTsKICAgICAgICB9IC8vIEVTQwoKICAgICAgfSBlbHNlIGlmICgoZS5rZXkgPT09ICdFc2NhcGUnIHx8IGUua2V5ID09PSAnRXNjJykgJiYgY2FsbElmRnVuY3Rpb24oaW5uZXJQYXJhbXMuYWxsb3dFc2NhcGVLZXkpID09PSB0cnVlKSB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGRpc21pc3NXaXRoKGNvbnN0cnVjdG9yLkRpc21pc3NSZWFzb24uZXNjKTsKICAgICAgfQogICAgfTsKCiAgICBpZiAoZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldCAmJiBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlckFkZGVkKSB7CiAgICAgIGdsb2JhbFN0YXRlLmtleWRvd25UYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGdsb2JhbFN0YXRlLmtleWRvd25IYW5kbGVyLCB7CiAgICAgICAgY2FwdHVyZTogZ2xvYmFsU3RhdGUua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZQogICAgICB9KTsKICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXJBZGRlZCA9IGZhbHNlOwogICAgfQoKICAgIGlmICghaW5uZXJQYXJhbXMudG9hc3QpIHsKICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBrZXlkb3duSGFuZGxlcihlLCBpbm5lclBhcmFtcyk7CiAgICAgIH07CgogICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duVGFyZ2V0ID0gaW5uZXJQYXJhbXMua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSA/IHdpbmRvdyA6IGRvbUNhY2hlLnBvcHVwOwogICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duTGlzdGVuZXJDYXB0dXJlID0gaW5uZXJQYXJhbXMua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZTsKICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXIsIHsKICAgICAgICBjYXB0dXJlOiBnbG9iYWxTdGF0ZS5rZXlkb3duTGlzdGVuZXJDYXB0dXJlCiAgICAgIH0pOwogICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlckFkZGVkID0gdHJ1ZTsKICAgIH0KCiAgICBfdGhpcy5lbmFibGVCdXR0b25zKCk7CgogICAgX3RoaXMuaGlkZUxvYWRpbmcoKTsKCiAgICBfdGhpcy5yZXNldFZhbGlkYXRpb25NZXNzYWdlKCk7CgogICAgaWYgKGlubmVyUGFyYW1zLnRvYXN0ICYmIChpbm5lclBhcmFtcy5pbnB1dCB8fCBpbm5lclBhcmFtcy5mb290ZXIgfHwgaW5uZXJQYXJhbXMuc2hvd0Nsb3NlQnV0dG9uKSkgewogICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlc1sndG9hc3QtY29sdW1uJ10pOwogICAgfSBlbHNlIHsKICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgc3dhbENsYXNzZXNbJ3RvYXN0LWNvbHVtbiddKTsKICAgIH0gLy8gaW5wdXRPcHRpb25zLCBpbnB1dFZhbHVlCgoKICAgIGlmIChpbm5lclBhcmFtcy5pbnB1dCA9PT0gJ3NlbGVjdCcgfHwgaW5uZXJQYXJhbXMuaW5wdXQgPT09ICdyYWRpbycpIHsKICAgICAgaGFuZGxlSW5wdXRPcHRpb25zKF90aGlzLCBpbm5lclBhcmFtcyk7CiAgICB9IGVsc2UgaWYgKFsndGV4dCcsICdlbWFpbCcsICdudW1iZXInLCAndGVsJywgJ3RleHRhcmVhJ10uaW5kZXhPZihpbm5lclBhcmFtcy5pbnB1dCkgIT09IC0xICYmIGlzUHJvbWlzZShpbm5lclBhcmFtcy5pbnB1dFZhbHVlKSkgewogICAgICBoYW5kbGVJbnB1dFZhbHVlKF90aGlzLCBpbm5lclBhcmFtcyk7CiAgICB9CgogICAgb3BlblBvcHVwKGlubmVyUGFyYW1zKTsKCiAgICBpZiAoIWlubmVyUGFyYW1zLnRvYXN0KSB7CiAgICAgIGlmICghY2FsbElmRnVuY3Rpb24oaW5uZXJQYXJhbXMuYWxsb3dFbnRlcktleSkpIHsKICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiB0eXBlb2YgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaW5uZXJQYXJhbXMuZm9jdXNDYW5jZWwgJiYgaXNWaXNpYmxlKGRvbUNhY2hlLmNhbmNlbEJ1dHRvbikpIHsKICAgICAgICBkb21DYWNoZS5jYW5jZWxCdXR0b24uZm9jdXMoKTsKICAgICAgfSBlbHNlIGlmIChpbm5lclBhcmFtcy5mb2N1c0NvbmZpcm0gJiYgaXNWaXNpYmxlKGRvbUNhY2hlLmNvbmZpcm1CdXR0b24pKSB7CiAgICAgICAgZG9tQ2FjaGUuY29uZmlybUJ1dHRvbi5mb2N1cygpOwogICAgICB9IGVsc2UgewogICAgICAgIHNldEZvY3VzKC0xLCAxKTsKICAgICAgfQogICAgfSAvLyBmaXggc2Nyb2xsCgoKICAgIGRvbUNhY2hlLmNvbnRhaW5lci5zY3JvbGxUb3AgPSAwOwogIH0pOwp9CgovKioKICogVXBkYXRlcyBwb3B1cCBwYXJhbWV0ZXJzLgogKi8KCmZ1bmN0aW9uIHVwZGF0ZShwYXJhbXMpIHsKICB2YXIgdmFsaWRVcGRhdGFibGVQYXJhbXMgPSB7fTsgLy8gYXNzaWduIHZhbGlkIHBhcmFtcyBmcm9tIGBwYXJhbXNgIHRvIGBkZWZhdWx0c2AKCiAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkgewogICAgaWYgKFN3YWwuaXNVcGRhdGFibGVQYXJhbWV0ZXIocGFyYW0pKSB7CiAgICAgIHZhbGlkVXBkYXRhYmxlUGFyYW1zW3BhcmFtXSA9IHBhcmFtc1twYXJhbV07CiAgICB9IGVsc2UgewogICAgICB3YXJuKCJJbnZhbGlkIHBhcmFtZXRlciB0byB1cGRhdGU6IFwiIi5jb25jYXQocGFyYW0sICJcIi4gVXBkYXRhYmxlIHBhcmFtcyBhcmUgbGlzdGVkIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9ibG9iL21hc3Rlci9zcmMvdXRpbHMvcGFyYW1zLmpzIikpOwogICAgfQogIH0pOwogIHZhciBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQodGhpcyk7CgogIHZhciB1cGRhdGVkUGFyYW1zID0gX2V4dGVuZHMoe30sIGlubmVyUGFyYW1zLCB2YWxpZFVwZGF0YWJsZVBhcmFtcyk7CgogIHJlbmRlcih0aGlzLCB1cGRhdGVkUGFyYW1zKTsKICBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuc2V0KHRoaXMsIHVwZGF0ZWRQYXJhbXMpOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsKICAgIHBhcmFtczogewogICAgICB2YWx1ZTogX2V4dGVuZHMoe30sIHRoaXMucGFyYW1zLCBwYXJhbXMpLAogICAgICB3cml0YWJsZTogZmFsc2UsCiAgICAgIGVudW1lcmFibGU6IHRydWUKICAgIH0KICB9KTsKfQoKCgp2YXIgaW5zdGFuY2VNZXRob2RzID0gT2JqZWN0LmZyZWV6ZSh7CgloaWRlTG9hZGluZzogaGlkZUxvYWRpbmcsCglkaXNhYmxlTG9hZGluZzogaGlkZUxvYWRpbmcsCglnZXRJbnB1dDogZ2V0SW5wdXQkMSwKCWNsb3NlOiBjbG9zZSwKCWNsb3NlUG9wdXA6IGNsb3NlLAoJY2xvc2VNb2RhbDogY2xvc2UsCgljbG9zZVRvYXN0OiBjbG9zZSwKCWVuYWJsZUJ1dHRvbnM6IGVuYWJsZUJ1dHRvbnMsCglkaXNhYmxlQnV0dG9uczogZGlzYWJsZUJ1dHRvbnMsCgllbmFibGVDb25maXJtQnV0dG9uOiBlbmFibGVDb25maXJtQnV0dG9uLAoJZGlzYWJsZUNvbmZpcm1CdXR0b246IGRpc2FibGVDb25maXJtQnV0dG9uLAoJZW5hYmxlSW5wdXQ6IGVuYWJsZUlucHV0LAoJZGlzYWJsZUlucHV0OiBkaXNhYmxlSW5wdXQsCglzaG93VmFsaWRhdGlvbk1lc3NhZ2U6IHNob3dWYWxpZGF0aW9uTWVzc2FnZSwKCXJlc2V0VmFsaWRhdGlvbk1lc3NhZ2U6IHJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UkMSwKCWdldFByb2dyZXNzU3RlcHM6IGdldFByb2dyZXNzU3RlcHMkMSwKCXNldFByb2dyZXNzU3RlcHM6IHNldFByb2dyZXNzU3RlcHMsCglzaG93UHJvZ3Jlc3NTdGVwczogc2hvd1Byb2dyZXNzU3RlcHMsCgloaWRlUHJvZ3Jlc3NTdGVwczogaGlkZVByb2dyZXNzU3RlcHMsCglfbWFpbjogX21haW4sCgl1cGRhdGU6IHVwZGF0ZQp9KTsKCnZhciBjdXJyZW50SW5zdGFuY2U7IC8vIFN3ZWV0QWxlcnQgY29uc3RydWN0b3IKCmZ1bmN0aW9uIFN3ZWV0QWxlcnQoKSB7CiAgLy8gUHJldmVudCBydW4gaW4gTm9kZSBlbnYKCiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7CiAgICByZXR1cm47CiAgfSAvLyBDaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBQcm9taXNlCgogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKCiAgaWYgKHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJykgewogICAgZXJyb3IoJ1RoaXMgcGFja2FnZSByZXF1aXJlcyBhIFByb21pc2UgbGlicmFyeSwgcGxlYXNlIGluY2x1ZGUgYSBzaGltIHRvIGVuYWJsZSBpdCBpbiB0aGlzIGJyb3dzZXIgKFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3N3ZWV0YWxlcnQyL3N3ZWV0YWxlcnQyL3dpa2kvTWlncmF0aW9uLWZyb20tU3dlZXRBbGVydC10by1Td2VldEFsZXJ0MiMxLWllLXN1cHBvcnQpJyk7CiAgfQoKICBjdXJyZW50SW5zdGFuY2UgPSB0aGlzOwoKICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgfQoKICB2YXIgb3V0ZXJQYXJhbXMgPSBPYmplY3QuZnJlZXplKHRoaXMuY29uc3RydWN0b3IuYXJnc1RvUGFyYW1zKGFyZ3MpKTsKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7CiAgICBwYXJhbXM6IHsKICAgICAgdmFsdWU6IG91dGVyUGFyYW1zLAogICAgICB3cml0YWJsZTogZmFsc2UsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwoKICB2YXIgcHJvbWlzZSA9IHRoaXMuX21haW4odGhpcy5wYXJhbXMpOwoKICBwcml2YXRlUHJvcHMucHJvbWlzZS5zZXQodGhpcywgcHJvbWlzZSk7Cn0gLy8gYGNhdGNoYCBjYW5ub3QgYmUgdGhlIG5hbWUgb2YgYSBtb2R1bGUgZXhwb3J0LCBzbyB3ZSBkZWZpbmUgb3VyIHRoZW5hYmxlIG1ldGhvZHMgaGVyZSBpbnN0ZWFkCgoKU3dlZXRBbGVydC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbkZ1bGZpbGxlZCkgewogIHZhciBwcm9taXNlID0gcHJpdmF0ZVByb3BzLnByb21pc2UuZ2V0KHRoaXMpOwogIHJldHVybiBwcm9taXNlLnRoZW4ob25GdWxmaWxsZWQpOwp9OwoKU3dlZXRBbGVydC5wcm90b3R5cGVbImZpbmFsbHkiXSA9IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHsKICB2YXIgcHJvbWlzZSA9IHByaXZhdGVQcm9wcy5wcm9taXNlLmdldCh0aGlzKTsKICByZXR1cm4gcHJvbWlzZVsiZmluYWxseSJdKG9uRmluYWxseSk7Cn07IC8vIEFzc2lnbiBpbnN0YW5jZSBtZXRob2RzIGZyb20gc3JjL2luc3RhbmNlTWV0aG9kcy8qLmpzIHRvIHByb3RvdHlwZQoKCl9leHRlbmRzKFN3ZWV0QWxlcnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpOyAvLyBBc3NpZ24gc3RhdGljIG1ldGhvZHMgZnJvbSBzcmMvc3RhdGljTWV0aG9kcy8qLmpzIHRvIGNvbnN0cnVjdG9yCgoKX2V4dGVuZHMoU3dlZXRBbGVydCwgc3RhdGljTWV0aG9kcyk7IC8vIFByb3h5IHRvIGluc3RhbmNlIG1ldGhvZHMgdG8gY29uc3RydWN0b3IsIGZvciBub3csIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoKCk9iamVjdC5rZXlzKGluc3RhbmNlTWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgU3dlZXRBbGVydFtrZXldID0gZnVuY3Rpb24gKCkgewogICAgaWYgKGN1cnJlbnRJbnN0YW5jZSkgewogICAgICB2YXIgX2N1cnJlbnRJbnN0YW5jZTsKCiAgICAgIHJldHVybiAoX2N1cnJlbnRJbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSlba2V5XS5hcHBseShfY3VycmVudEluc3RhbmNlLCBhcmd1bWVudHMpOwogICAgfQogIH07Cn0pOwpTd2VldEFsZXJ0LkRpc21pc3NSZWFzb24gPSBEaXNtaXNzUmVhc29uOwpTd2VldEFsZXJ0LnZlcnNpb24gPSAnOC4xNC4wJzsKCnZhciBTd2FsID0gU3dlZXRBbGVydDsKU3dhbFsiZGVmYXVsdCJdID0gU3dhbDsKCnJldHVybiBTd2FsOwoKfSkpKTsKaWYgKHR5cGVvZiB0aGlzICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLlN3ZWV0YWxlcnQyKXsgIHRoaXMuc3dhbCA9IHRoaXMuc3dlZXRBbGVydCA9IHRoaXMuU3dhbCA9IHRoaXMuU3dlZXRBbGVydCA9IHRoaXMuU3dlZXRhbGVydDJ9CgoidW5kZWZpbmVkIiE9dHlwZW9mIGRvY3VtZW50JiZmdW5jdGlvbihlLHQpe3ZhciBuPWUuY3JlYXRlRWxlbWVudCgic3R5bGUiKTtpZihlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF0uYXBwZW5kQ2hpbGQobiksbi5zdHlsZVNoZWV0KW4uc3R5bGVTaGVldC5kaXNhYmxlZHx8KG4uc3R5bGVTaGVldC5jc3NUZXh0PXQpO2Vsc2UgdHJ5e24uaW5uZXJIVE1MPXR9Y2F0Y2goZSl7bi5pbm5lclRleHQ9dH19KGRvY3VtZW50LCJAY2hhcnNldCBcIlVURi04XCI7QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLXNob3d7MCV7dHJhbnNmb3JtOnNjYWxlKC43KX00NSV7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTgwJXt0cmFuc2Zvcm06c2NhbGUoLjk1KX0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBzd2FsMi1zaG93ezAle3RyYW5zZm9ybTpzY2FsZSguNyl9NDUle3RyYW5zZm9ybTpzY2FsZSgxLjA1KX04MCV7dHJhbnNmb3JtOnNjYWxlKC45NSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSl9fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi1oaWRlezAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9MTAwJXt0cmFuc2Zvcm06c2NhbGUoLjUpO29wYWNpdHk6MH19QGtleWZyYW1lcyBzd2FsMi1oaWRlezAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9MTAwJXt0cmFuc2Zvcm06c2NhbGUoLjUpO29wYWNpdHk6MH19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcHswJXt0b3A6MS4xODc1ZW07bGVmdDouMDYyNWVtO3dpZHRoOjB9NTQle3RvcDoxLjA2MjVlbTtsZWZ0Oi4xMjVlbTt3aWR0aDowfTcwJXt0b3A6Mi4xODc1ZW07bGVmdDotLjM3NWVtO3dpZHRoOjMuMTI1ZW19ODQle3RvcDozZW07bGVmdDoxLjMxMjVlbTt3aWR0aDoxLjA2MjVlbX0xMDAle3RvcDoyLjgxMjVlbTtsZWZ0Oi44NzVlbTt3aWR0aDoxLjU2MjVlbX19QGtleWZyYW1lcyBzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXB7MCV7dG9wOjEuMTg3NWVtO2xlZnQ6LjA2MjVlbTt3aWR0aDowfTU0JXt0b3A6MS4wNjI1ZW07bGVmdDouMTI1ZW07d2lkdGg6MH03MCV7dG9wOjIuMTg3NWVtO2xlZnQ6LS4zNzVlbTt3aWR0aDozLjEyNWVtfTg0JXt0b3A6M2VtO2xlZnQ6MS4zMTI1ZW07d2lkdGg6MS4wNjI1ZW19MTAwJXt0b3A6Mi44MTI1ZW07bGVmdDouODc1ZW07d2lkdGg6MS41NjI1ZW19fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nezAle3RvcDozLjM3NWVtO3JpZ2h0OjIuODc1ZW07d2lkdGg6MH02NSV7dG9wOjMuMzc1ZW07cmlnaHQ6Mi44NzVlbTt3aWR0aDowfTg0JXt0b3A6Mi4xODc1ZW07cmlnaHQ6MDt3aWR0aDozLjQzNzVlbX0xMDAle3RvcDoyLjM3NWVtO3JpZ2h0Oi41ZW07d2lkdGg6Mi45Mzc1ZW19fUBrZXlmcmFtZXMgc3dhbDItYW5pbWF0ZS1zdWNjZXNzLWxpbmUtbG9uZ3swJXt0b3A6My4zNzVlbTtyaWdodDoyLjg3NWVtO3dpZHRoOjB9NjUle3RvcDozLjM3NWVtO3JpZ2h0OjIuODc1ZW07d2lkdGg6MH04NCV7dG9wOjIuMTg3NWVtO3JpZ2h0OjA7d2lkdGg6My40Mzc1ZW19MTAwJXt0b3A6Mi4zNzVlbTtyaWdodDouNWVtO3dpZHRoOjIuOTM3NWVtfX1ALXdlYmtpdC1rZXlmcmFtZXMgc3dhbDItcm90YXRlLXN1Y2Nlc3MtY2lyY3VsYXItbGluZXswJXt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9NSV7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTEyJXt0cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX19QGtleWZyYW1lcyBzd2FsMi1yb3RhdGUtc3VjY2Vzcy1jaXJjdWxhci1saW5lezAle3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX01JXt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9MTIle3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpfX1ALXdlYmtpdC1rZXlmcmFtZXMgc3dhbDItYW5pbWF0ZS1lcnJvci14LW1hcmt7MCV7bWFyZ2luLXRvcDoxLjYyNWVtO3RyYW5zZm9ybTpzY2FsZSguNCk7b3BhY2l0eTowfTUwJXttYXJnaW4tdG9wOjEuNjI1ZW07dHJhbnNmb3JtOnNjYWxlKC40KTtvcGFjaXR5OjB9ODAle21hcmdpbi10b3A6LS4zNzVlbTt0cmFuc2Zvcm06c2NhbGUoMS4xNSl9MTAwJXttYXJnaW4tdG9wOjA7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX19QGtleWZyYW1lcyBzd2FsMi1hbmltYXRlLWVycm9yLXgtbWFya3swJXttYXJnaW4tdG9wOjEuNjI1ZW07dHJhbnNmb3JtOnNjYWxlKC40KTtvcGFjaXR5OjB9NTAle21hcmdpbi10b3A6MS42MjVlbTt0cmFuc2Zvcm06c2NhbGUoLjQpO29wYWNpdHk6MH04MCV7bWFyZ2luLXRvcDotLjM3NWVtO3RyYW5zZm9ybTpzY2FsZSgxLjE1KX0xMDAle21hcmdpbi10b3A6MDt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgc3dhbDItYW5pbWF0ZS1lcnJvci1pY29uezAle3RyYW5zZm9ybTpyb3RhdGVYKDEwMGRlZyk7b3BhY2l0eTowfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMCk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtZXJyb3ItaWNvbnswJXt0cmFuc2Zvcm06cm90YXRlWCgxMDBkZWcpO29wYWNpdHk6MH0xMDAle3RyYW5zZm9ybTpyb3RhdGVYKDApO29wYWNpdHk6MX19Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLXNob3due2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcHt0b3A6MDtyaWdodDphdXRvO2JvdHRvbTphdXRvO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtZW5kLGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtcmlnaHR7dG9wOjA7cmlnaHQ6MDtib3R0b206YXV0bztsZWZ0OmF1dG99Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1sZWZ0LGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3Atc3RhcnR7dG9wOjA7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OjB9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1sZWZ0LGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItc3RhcnR7dG9wOjUwJTtyaWdodDphdXRvO2JvdHRvbTphdXRvO2xlZnQ6MDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVye3RvcDo1MCU7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSl9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1lbmQsYm9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1yaWdodHt0b3A6NTAlO3JpZ2h0OjA7Ym90dG9tOmF1dG87bGVmdDphdXRvO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXN0YXJ0e3RvcDphdXRvO3JpZ2h0OmF1dG87Ym90dG9tOjA7bGVmdDowfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b217dG9wOmF1dG87cmlnaHQ6YXV0bztib3R0b206MDtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWVuZCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXJpZ2h0e3RvcDphdXRvO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDphdXRvfWJvZHkuc3dhbDItdG9hc3QtY29sdW1uIC5zd2FsMi10b2FzdHtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6c3RyZXRjaH1ib2R5LnN3YWwyLXRvYXN0LWNvbHVtbiAuc3dhbDItdG9hc3QgLnN3YWwyLWFjdGlvbnN7ZmxleDoxO2FsaWduLXNlbGY6c3RyZXRjaDtoZWlnaHQ6Mi4yZW07bWFyZ2luLXRvcDouMzEyNWVtfWJvZHkuc3dhbDItdG9hc3QtY29sdW1uIC5zd2FsMi10b2FzdCAuc3dhbDItbG9hZGluZ3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfWJvZHkuc3dhbDItdG9hc3QtY29sdW1uIC5zd2FsMi10b2FzdCAuc3dhbDItaW5wdXR7aGVpZ2h0OjJlbTttYXJnaW46LjMxMjVlbSBhdXRvO2ZvbnQtc2l6ZToxZW19Ym9keS5zd2FsMi10b2FzdC1jb2x1bW4gLnN3YWwyLXRvYXN0IC5zd2FsMi12YWxpZGF0aW9uLW1lc3NhZ2V7Zm9udC1zaXplOjFlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3R7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDphdXRvO3BhZGRpbmc6LjYyNWVtO292ZXJmbG93LXk6aGlkZGVuO2JveC1zaGFkb3c6MCAwIC42MjVlbSAjZDlkOWQ5fS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaGVhZGVye2ZsZXgtZGlyZWN0aW9uOnJvd30uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXRpdGxle2ZsZXgtZ3JvdzoxO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O21hcmdpbjowIC42ZW07Zm9udC1zaXplOjFlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWZvb3RlcnttYXJnaW46LjVlbSAwIDA7cGFkZGluZzouNWVtIDAgMDtmb250LXNpemU6LjhlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWNsb3Nle3Bvc2l0aW9uOnN0YXRpYzt3aWR0aDouOGVtO2hlaWdodDouOGVtO2xpbmUtaGVpZ2h0Oi44fS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItY29udGVudHtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDtmb250LXNpemU6MWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbnt3aWR0aDoyZW07bWluLXdpZHRoOjJlbTtoZWlnaHQ6MmVtO21hcmdpbjowfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbjo6YmVmb3Jle2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjJlbTtmb250LXdlaWdodDo3MDB9QG1lZGlhIGFsbCBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0Om5vbmUpLCgtbXMtaGlnaC1jb250cmFzdDphY3RpdmUpey5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbjo6YmVmb3Jle2ZvbnQtc2l6ZTouMjVlbX19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtcmluZ3t3aWR0aDoyZW07aGVpZ2h0OjJlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWljb24uc3dhbDItZXJyb3IgW2NsYXNzXj1zd2FsMi14LW1hcmstbGluZV17dG9wOi44NzVlbTt3aWR0aDoxLjM3NWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbi5zd2FsMi1lcnJvciBbY2xhc3NePXN3YWwyLXgtbWFyay1saW5lXVtjbGFzcyQ9bGVmdF17bGVmdDouMzEyNWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbi5zd2FsMi1lcnJvciBbY2xhc3NePXN3YWwyLXgtbWFyay1saW5lXVtjbGFzcyQ9cmlnaHRde3JpZ2h0Oi4zMTI1ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1hY3Rpb25ze2ZsZXgtYmFzaXM6YXV0byFpbXBvcnRhbnQ7d2lkdGg6YXV0bztoZWlnaHQ6YXV0bzttYXJnaW46MCAuMzEyNWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3R5bGVke21hcmdpbjowIC4zMTI1ZW07cGFkZGluZzouMzEyNWVtIC42MjVlbTtmb250LXNpemU6MWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3R5bGVkOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjA2MjVlbSAjZmZmLDAgMCAwIC4xMjVlbSByZ2JhKDUwLDEwMCwxNTAsLjQpfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2Vzc3tib3JkZXItY29sb3I6I2E1ZGM4Nn0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVde3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEuNmVtO2hlaWdodDozZW07dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7Ym9yZGVyLXJhZGl1czo1MCV9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXVtjbGFzcyQ9bGVmdF17dG9wOi0uOGVtO2xlZnQ6LS41ZW07dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybS1vcmlnaW46MmVtIDJlbTtib3JkZXItcmFkaXVzOjRlbSAwIDAgNGVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV1bY2xhc3MkPXJpZ2h0XXt0b3A6LS4yNWVtO2xlZnQ6LjkzNzVlbTt0cmFuc2Zvcm0tb3JpZ2luOjAgMS41ZW07Ym9yZGVyLXJhZGl1czowIDRlbSA0ZW0gMH0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtcmluZ3t3aWR0aDoyZW07aGVpZ2h0OjJlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtZml4e3RvcDowO2xlZnQ6LjQzNzVlbTt3aWR0aDouNDM3NWVtO2hlaWdodDoyLjY4NzVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVde2hlaWdodDouMzEyNWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV1bY2xhc3MkPXRpcF17dG9wOjEuMTI1ZW07bGVmdDouMTg3NWVtO3dpZHRoOi43NWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV1bY2xhc3MkPWxvbmdde3RvcDouOTM3NWVtO3JpZ2h0Oi4xODc1ZW07d2lkdGg6MS4zNzVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3Quc3dhbDItc2hvd3std2Via2l0LWFuaW1hdGlvbjpzd2FsMi10b2FzdC1zaG93IC41czthbmltYXRpb246c3dhbDItdG9hc3Qtc2hvdyAuNXN9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0LnN3YWwyLWhpZGV7LXdlYmtpdC1hbmltYXRpb246c3dhbDItdG9hc3QtaGlkZSAuMXMgZm9yd2FyZHM7YW5pbWF0aW9uOnN3YWwyLXRvYXN0LWhpZGUgLjFzIGZvcndhcmRzfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItYW5pbWF0ZS1zdWNjZXNzLWljb24gLnN3YWwyLXN1Y2Nlc3MtbGluZS10aXB7LXdlYmtpdC1hbmltYXRpb246c3dhbDItdG9hc3QtYW5pbWF0ZS1zdWNjZXNzLWxpbmUtdGlwIC43NXM7YW5pbWF0aW9uOnN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcCAuNzVzfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItYW5pbWF0ZS1zdWNjZXNzLWljb24gLnN3YWwyLXN1Y2Nlc3MtbGluZS1sb25ney13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLWxvbmcgLjc1czthbmltYXRpb246c3dhbDItdG9hc3QtYW5pbWF0ZS1zdWNjZXNzLWxpbmUtbG9uZyAuNzVzfUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi10b2FzdC1zaG93ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0uNjI1ZW0pIHJvdGF0ZVooMmRlZyl9MzMle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApIHJvdGF0ZVooLTJkZWcpfTY2JXt0cmFuc2Zvcm06dHJhbnNsYXRlWSguMzEyNWVtKSByb3RhdGVaKDJkZWcpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgcm90YXRlWigwKX19QGtleWZyYW1lcyBzd2FsMi10b2FzdC1zaG93ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0uNjI1ZW0pIHJvdGF0ZVooMmRlZyl9MzMle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApIHJvdGF0ZVooLTJkZWcpfTY2JXt0cmFuc2Zvcm06dHJhbnNsYXRlWSguMzEyNWVtKSByb3RhdGVaKDJkZWcpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgcm90YXRlWigwKX19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWhpZGV7MTAwJXt0cmFuc2Zvcm06cm90YXRlWigxZGVnKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgc3dhbDItdG9hc3QtaGlkZXsxMDAle3RyYW5zZm9ybTpyb3RhdGVaKDFkZWcpO29wYWNpdHk6MH19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcHswJXt0b3A6LjU2MjVlbTtsZWZ0Oi4wNjI1ZW07d2lkdGg6MH01NCV7dG9wOi4xMjVlbTtsZWZ0Oi4xMjVlbTt3aWR0aDowfTcwJXt0b3A6LjYyNWVtO2xlZnQ6LS4yNWVtO3dpZHRoOjEuNjI1ZW19ODQle3RvcDoxLjA2MjVlbTtsZWZ0Oi43NWVtO3dpZHRoOi41ZW19MTAwJXt0b3A6MS4xMjVlbTtsZWZ0Oi4xODc1ZW07d2lkdGg6Ljc1ZW19fUBrZXlmcmFtZXMgc3dhbDItdG9hc3QtYW5pbWF0ZS1zdWNjZXNzLWxpbmUtdGlwezAle3RvcDouNTYyNWVtO2xlZnQ6LjA2MjVlbTt3aWR0aDowfTU0JXt0b3A6LjEyNWVtO2xlZnQ6LjEyNWVtO3dpZHRoOjB9NzAle3RvcDouNjI1ZW07bGVmdDotLjI1ZW07d2lkdGg6MS42MjVlbX04NCV7dG9wOjEuMDYyNWVtO2xlZnQ6Ljc1ZW07d2lkdGg6LjVlbX0xMDAle3RvcDoxLjEyNWVtO2xlZnQ6LjE4NzVlbTt3aWR0aDouNzVlbX19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLWxvbmd7MCV7dG9wOjEuNjI1ZW07cmlnaHQ6MS4zNzVlbTt3aWR0aDowfTY1JXt0b3A6MS4yNWVtO3JpZ2h0Oi45Mzc1ZW07d2lkdGg6MH04NCV7dG9wOi45Mzc1ZW07cmlnaHQ6MDt3aWR0aDoxLjEyNWVtfTEwMCV7dG9wOi45Mzc1ZW07cmlnaHQ6LjE4NzVlbTt3aWR0aDoxLjM3NWVtfX1Aa2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLWxvbmd7MCV7dG9wOjEuNjI1ZW07cmlnaHQ6MS4zNzVlbTt3aWR0aDowfTY1JXt0b3A6MS4yNWVtO3JpZ2h0Oi45Mzc1ZW07d2lkdGg6MH04NCV7dG9wOi45Mzc1ZW07cmlnaHQ6MDt3aWR0aDoxLjEyNWVtfTEwMCV7dG9wOi45Mzc1ZW07cmlnaHQ6LjE4NzVlbTt3aWR0aDoxLjM3NWVtfX1ib2R5LnN3YWwyLXNob3duOm5vdCguc3dhbDItbm8tYmFja2Ryb3ApOm5vdCguc3dhbDItdG9hc3Qtc2hvd24pe292ZXJmbG93OmhpZGRlbn1ib2R5LnN3YWwyLWhlaWdodC1hdXRve2hlaWdodDphdXRvIWltcG9ydGFudH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bnt0b3A6YXV0bztyaWdodDphdXRvO2JvdHRvbTphdXRvO2xlZnQ6YXV0bzttYXgtd2lkdGg6Y2FsYygxMDAlIC0gLjYyNWVtICogMik7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bj4uc3dhbDItbW9kYWx7Ym94LXNoYWRvdzowIDAgMTBweCByZ2JhKDAsMCwwLC40KX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi10b3B7dG9wOjA7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSl9Ym9keS5zd2FsMi1uby1iYWNrZHJvcCAuc3dhbDItc2hvd24uc3dhbDItdG9wLWxlZnQsYm9keS5zd2FsMi1uby1iYWNrZHJvcCAuc3dhbDItc2hvd24uc3dhbDItdG9wLXN0YXJ0e3RvcDowO2xlZnQ6MH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi10b3AtZW5kLGJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLXNob3duLnN3YWwyLXRvcC1yaWdodHt0b3A6MDtyaWdodDowfWJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLXNob3duLnN3YWwyLWNlbnRlcnt0b3A6NTAlO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi1jZW50ZXItbGVmdCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi1jZW50ZXItc3RhcnR7dG9wOjUwJTtsZWZ0OjA7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSl9Ym9keS5zd2FsMi1uby1iYWNrZHJvcCAuc3dhbDItc2hvd24uc3dhbDItY2VudGVyLWVuZCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi1jZW50ZXItcmlnaHR7dG9wOjUwJTtyaWdodDowO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpfWJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLXNob3duLnN3YWwyLWJvdHRvbXtib3R0b206MDtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi1ib3R0b20tbGVmdCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1zaG93bi5zd2FsMi1ib3R0b20tc3RhcnR7Ym90dG9tOjA7bGVmdDowfWJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLXNob3duLnN3YWwyLWJvdHRvbS1lbmQsYm9keS5zd2FsMi1uby1iYWNrZHJvcCAuc3dhbDItc2hvd24uc3dhbDItYm90dG9tLXJpZ2h0e3JpZ2h0OjA7Ym90dG9tOjB9LnN3YWwyLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxMDYwO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2ZsZXgtZGlyZWN0aW9uOnJvdzthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtwYWRkaW5nOi42MjVlbTtvdmVyZmxvdy14OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNofS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9we2FsaWduLWl0ZW1zOmZsZXgtc3RhcnR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1zdGFydHthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLWVuZCwuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1yaWdodHthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlcnthbGlnbi1pdGVtczpjZW50ZXJ9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1zdGFydHthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItZW5kLC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLXJpZ2h0e2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b217YWxpZ24taXRlbXM6ZmxleC1lbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbS1zdGFydHthbGlnbi1pdGVtczpmbGV4LWVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbS1lbmQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tcmlnaHR7YWxpZ24taXRlbXM6ZmxleC1lbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfS5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWVuZD46Zmlyc3QtY2hpbGQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdD46Zmlyc3QtY2hpbGQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tcmlnaHQ+OmZpcnN0LWNoaWxkLC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXN0YXJ0PjpmaXJzdC1jaGlsZCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbT46Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDphdXRvfS5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1mdWxsc2NyZWVuPi5zd2FsMi1tb2RhbHtkaXNwbGF5OmZsZXghaW1wb3J0YW50O2ZsZXg6MTthbGlnbi1zZWxmOnN0cmV0Y2g7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctcm93Pi5zd2FsMi1tb2RhbHtkaXNwbGF5OmZsZXghaW1wb3J0YW50O2ZsZXg6MTthbGlnbi1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW57ZmxleDoxO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWJvdHRvbSwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWNlbnRlciwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLXRvcHthbGlnbi1pdGVtczpjZW50ZXJ9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi1ib3R0b20tbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWJvdHRvbS1zdGFydCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWNlbnRlci1sZWZ0LC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItY2VudGVyLXN0YXJ0LC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItdG9wLWxlZnQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi10b3Atc3RhcnR7YWxpZ24taXRlbXM6ZmxleC1zdGFydH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWJvdHRvbS1lbmQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi1ib3R0b20tcmlnaHQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi1jZW50ZXItZW5kLC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItY2VudGVyLXJpZ2h0LC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItdG9wLWVuZCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLXRvcC1yaWdodHthbGlnbi1pdGVtczpmbGV4LWVuZH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uPi5zd2FsMi1tb2RhbHtkaXNwbGF5OmZsZXghaW1wb3J0YW50O2ZsZXg6MTthbGlnbi1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zd2FsMi1jb250YWluZXI6bm90KC5zd2FsMi10b3ApOm5vdCguc3dhbDItdG9wLXN0YXJ0KTpub3QoLnN3YWwyLXRvcC1lbmQpOm5vdCguc3dhbDItdG9wLWxlZnQpOm5vdCguc3dhbDItdG9wLXJpZ2h0KTpub3QoLnN3YWwyLWNlbnRlci1zdGFydCk6bm90KC5zd2FsMi1jZW50ZXItZW5kKTpub3QoLnN3YWwyLWNlbnRlci1sZWZ0KTpub3QoLnN3YWwyLWNlbnRlci1yaWdodCk6bm90KC5zd2FsMi1ib3R0b20pOm5vdCguc3dhbDItYm90dG9tLXN0YXJ0KTpub3QoLnN3YWwyLWJvdHRvbS1lbmQpOm5vdCguc3dhbDItYm90dG9tLWxlZnQpOm5vdCguc3dhbDItYm90dG9tLXJpZ2h0KTpub3QoLnN3YWwyLWdyb3ctZnVsbHNjcmVlbik+LnN3YWwyLW1vZGFse21hcmdpbjphdXRvfUBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDpub25lKSwoLW1zLWhpZ2gtY29udHJhc3Q6YWN0aXZlKXsuc3dhbDItY29udGFpbmVyIC5zd2FsMi1tb2RhbHttYXJnaW46MCFpbXBvcnRhbnR9fS5zd2FsMi1jb250YWluZXIuc3dhbDItZmFkZXt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjFzfS5zd2FsMi1jb250YWluZXIuc3dhbDItc2hvd257YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC40KX0uc3dhbDItcG9wdXB7ZGlzcGxheTpub25lO3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDozMmVtO21heC13aWR0aDoxMDAlO3BhZGRpbmc6MS4yNWVtO2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6LjMxMjVlbTtiYWNrZ3JvdW5kOiNmZmY7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6MXJlbX0uc3dhbDItcG9wdXA6Zm9jdXN7b3V0bGluZTowfS5zd2FsMi1wb3B1cC5zd2FsMi1sb2FkaW5ne292ZXJmbG93LXk6aGlkZGVufS5zd2FsMi1oZWFkZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXJ9LnN3YWwyLXRpdGxle3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDoxMDAlO21hcmdpbjowIDAgLjRlbTtwYWRkaW5nOjA7Y29sb3I6IzU5NTk1OTtmb250LXNpemU6MS44NzVlbTtmb250LXdlaWdodDo2MDA7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06bm9uZTt3b3JkLXdyYXA6YnJlYWstd29yZH0uc3dhbDItYWN0aW9uc3t6LWluZGV4OjE7ZmxleC13cmFwOndyYXA7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTttYXJnaW46MS4yNWVtIGF1dG8gMH0uc3dhbDItYWN0aW9uczpub3QoLnN3YWwyLWxvYWRpbmcpIC5zd2FsMi1zdHlsZWRbZGlzYWJsZWRde29wYWNpdHk6LjR9LnN3YWwyLWFjdGlvbnM6bm90KC5zd2FsMi1sb2FkaW5nKSAuc3dhbDItc3R5bGVkOmhvdmVye2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHJnYmEoMCwwLDAsLjEpLHJnYmEoMCwwLDAsLjEpKX0uc3dhbDItYWN0aW9uczpub3QoLnN3YWwyLWxvYWRpbmcpIC5zd2FsMi1zdHlsZWQ6YWN0aXZle2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHJnYmEoMCwwLDAsLjIpLHJnYmEoMCwwLDAsLjIpKX0uc3dhbDItYWN0aW9ucy5zd2FsMi1sb2FkaW5nIC5zd2FsMi1zdHlsZWQuc3dhbDItY29uZmlybXtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6Mi41ZW07aGVpZ2h0OjIuNWVtO21hcmdpbjouNDY4NzVlbTtwYWRkaW5nOjA7LXdlYmtpdC1hbmltYXRpb246c3dhbDItcm90YXRlLWxvYWRpbmcgMS41cyBsaW5lYXIgMHMgaW5maW5pdGUgbm9ybWFsO2FuaW1hdGlvbjpzd2FsMi1yb3RhdGUtbG9hZGluZyAxLjVzIGxpbmVhciAwcyBpbmZpbml0ZSBub3JtYWw7Ym9yZGVyOi4yNWVtIHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6MTAwJTtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Y29sb3I6dHJhbnNwYXJlbnQ7Y3Vyc29yOmRlZmF1bHQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5zd2FsMi1hY3Rpb25zLnN3YWwyLWxvYWRpbmcgLnN3YWwyLXN0eWxlZC5zd2FsMi1jYW5jZWx7bWFyZ2luLXJpZ2h0OjMwcHg7bWFyZ2luLWxlZnQ6MzBweH0uc3dhbDItYWN0aW9ucy5zd2FsMi1sb2FkaW5nIDpub3QoLnN3YWwyLXN0eWxlZCkuc3dhbDItY29uZmlybTo6YWZ0ZXJ7Y29udGVudDpcIlwiO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjE1cHg7aGVpZ2h0OjE1cHg7bWFyZ2luLWxlZnQ6NXB4Oy13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLXJvdGF0ZS1sb2FkaW5nIDEuNXMgbGluZWFyIDBzIGluZmluaXRlIG5vcm1hbDthbmltYXRpb246c3dhbDItcm90YXRlLWxvYWRpbmcgMS41cyBsaW5lYXIgMHMgaW5maW5pdGUgbm9ybWFsO2JvcmRlcjozcHggc29saWQgIzk5OTtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItcmlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7Ym94LXNoYWRvdzoxcHggMXB4IDFweCAjZmZmfS5zd2FsMi1zdHlsZWR7bWFyZ2luOi4zMTI1ZW07cGFkZGluZzouNjI1ZW0gMmVtO2JveC1zaGFkb3c6bm9uZTtmb250LXdlaWdodDo1MDB9LnN3YWwyLXN0eWxlZDpub3QoW2Rpc2FibGVkXSl7Y3Vyc29yOnBvaW50ZXJ9LnN3YWwyLXN0eWxlZC5zd2FsMi1jb25maXJte2JvcmRlcjowO2JvcmRlci1yYWRpdXM6LjI1ZW07YmFja2dyb3VuZDppbml0aWFsO2JhY2tncm91bmQtY29sb3I6IzMwODVkNjtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxLjA2MjVlbX0uc3dhbDItc3R5bGVkLnN3YWwyLWNhbmNlbHtib3JkZXI6MDtib3JkZXItcmFkaXVzOi4yNWVtO2JhY2tncm91bmQ6aW5pdGlhbDtiYWNrZ3JvdW5kLWNvbG9yOiNhYWE7Y29sb3I6I2ZmZjtmb250LXNpemU6MS4wNjI1ZW19LnN3YWwyLXN0eWxlZDpmb2N1c3tvdXRsaW5lOjA7Ym94LXNoYWRvdzowIDAgMCAycHggI2ZmZiwwIDAgMCA0cHggcmdiYSg1MCwxMDAsMTUwLC40KX0uc3dhbDItc3R5bGVkOjotbW96LWZvY3VzLWlubmVye2JvcmRlcjowfS5zd2FsMi1mb290ZXJ7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MS4yNWVtIDAgMDtwYWRkaW5nOjFlbSAwIDA7Ym9yZGVyLXRvcDoxcHggc29saWQgI2VlZTtjb2xvcjojNTQ1NDU0O2ZvbnQtc2l6ZToxZW19LnN3YWwyLWltYWdle21heC13aWR0aDoxMDAlO21hcmdpbjoxLjI1ZW0gYXV0b30uc3dhbDItY2xvc2V7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyO3RvcDowO3JpZ2h0OjA7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxLjJlbTtoZWlnaHQ6MS4yZW07cGFkZGluZzowO292ZXJmbG93OmhpZGRlbjt0cmFuc2l0aW9uOmNvbG9yIC4xcyBlYXNlLW91dDtib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjA7b3V0bGluZTppbml0aWFsO2JhY2tncm91bmQ6MCAwO2NvbG9yOiNjY2M7Zm9udC1mYW1pbHk6c2VyaWY7Zm9udC1zaXplOjIuNWVtO2xpbmUtaGVpZ2h0OjEuMjtjdXJzb3I6cG9pbnRlcn0uc3dhbDItY2xvc2U6aG92ZXJ7dHJhbnNmb3JtOm5vbmU7YmFja2dyb3VuZDowIDA7Y29sb3I6I2YyNzQ3NH0uc3dhbDItY29udGVudHt6LWluZGV4OjE7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MDtwYWRkaW5nOjA7Y29sb3I6IzU0NTQ1NDtmb250LXNpemU6MS4xMjVlbTtmb250LXdlaWdodDozMDA7bGluZS1oZWlnaHQ6bm9ybWFsO3RleHQtYWxpZ246Y2VudGVyO3dvcmQtd3JhcDpicmVhay13b3JkfS5zd2FsMi1jaGVja2JveCwuc3dhbDItZmlsZSwuc3dhbDItaW5wdXQsLnN3YWwyLXJhZGlvLC5zd2FsMi1zZWxlY3QsLnN3YWwyLXRleHRhcmVhe21hcmdpbjoxZW0gYXV0b30uc3dhbDItZmlsZSwuc3dhbDItaW5wdXQsLnN3YWwyLXRleHRhcmVhe2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO3RyYW5zaXRpb246Ym9yZGVyLWNvbG9yIC4zcyxib3gtc2hhZG93IC4zcztib3JkZXI6MXB4IHNvbGlkICNkOWQ5ZDk7Ym9yZGVyLXJhZGl1czouMTg3NWVtO2JhY2tncm91bmQ6aW5oZXJpdDtib3gtc2hhZG93Omluc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4wNik7Y29sb3I6aW5oZXJpdDtmb250LXNpemU6MS4xMjVlbX0uc3dhbDItZmlsZS5zd2FsMi1pbnB1dGVycm9yLC5zd2FsMi1pbnB1dC5zd2FsMi1pbnB1dGVycm9yLC5zd2FsMi10ZXh0YXJlYS5zd2FsMi1pbnB1dGVycm9ye2JvcmRlci1jb2xvcjojZjI3NDc0IWltcG9ydGFudDtib3gtc2hhZG93OjAgMCAycHggI2YyNzQ3NCFpbXBvcnRhbnR9LnN3YWwyLWZpbGU6Zm9jdXMsLnN3YWwyLWlucHV0OmZvY3VzLC5zd2FsMi10ZXh0YXJlYTpmb2N1c3tib3JkZXI6MXB4IHNvbGlkICNiNGRiZWQ7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDNweCAjYzRlNmY1fS5zd2FsMi1maWxlOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLC5zd2FsMi1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwuc3dhbDItdGV4dGFyZWE6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6I2NjY30uc3dhbDItZmlsZTo6LW1vei1wbGFjZWhvbGRlciwuc3dhbDItaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIsLnN3YWwyLXRleHRhcmVhOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiNjY2N9LnN3YWwyLWZpbGU6LW1zLWlucHV0LXBsYWNlaG9sZGVyLC5zd2FsMi1pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXIsLnN3YWwyLXRleHRhcmVhOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojY2NjfS5zd2FsMi1maWxlOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIsLnN3YWwyLWlucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXIsLnN3YWwyLXRleHRhcmVhOjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6I2NjY30uc3dhbDItZmlsZTo6cGxhY2Vob2xkZXIsLnN3YWwyLWlucHV0OjpwbGFjZWhvbGRlciwuc3dhbDItdGV4dGFyZWE6OnBsYWNlaG9sZGVye2NvbG9yOiNjY2N9LnN3YWwyLXJhbmdle21hcmdpbjoxZW0gYXV0bztiYWNrZ3JvdW5kOmluaGVyaXR9LnN3YWwyLXJhbmdlIGlucHV0e3dpZHRoOjgwJX0uc3dhbDItcmFuZ2Ugb3V0cHV0e3dpZHRoOjIwJTtjb2xvcjppbmhlcml0O2ZvbnQtd2VpZ2h0OjYwMDt0ZXh0LWFsaWduOmNlbnRlcn0uc3dhbDItcmFuZ2UgaW5wdXQsLnN3YWwyLXJhbmdlIG91dHB1dHtoZWlnaHQ6Mi42MjVlbTtwYWRkaW5nOjA7Zm9udC1zaXplOjEuMTI1ZW07bGluZS1oZWlnaHQ6Mi42MjVlbX0uc3dhbDItaW5wdXR7aGVpZ2h0OjIuNjI1ZW07cGFkZGluZzowIC43NWVtfS5zd2FsMi1pbnB1dFt0eXBlPW51bWJlcl17bWF4LXdpZHRoOjEwZW19LnN3YWwyLWZpbGV7YmFja2dyb3VuZDppbmhlcml0O2ZvbnQtc2l6ZToxLjEyNWVtfS5zd2FsMi10ZXh0YXJlYXtoZWlnaHQ6Ni43NWVtO3BhZGRpbmc6Ljc1ZW19LnN3YWwyLXNlbGVjdHttaW4td2lkdGg6NTAlO21heC13aWR0aDoxMDAlO3BhZGRpbmc6LjM3NWVtIC42MjVlbTtiYWNrZ3JvdW5kOmluaGVyaXQ7Y29sb3I6aW5oZXJpdDtmb250LXNpemU6MS4xMjVlbX0uc3dhbDItY2hlY2tib3gsLnN3YWwyLXJhZGlve2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2JhY2tncm91bmQ6aW5oZXJpdDtjb2xvcjppbmhlcml0fS5zd2FsMi1jaGVja2JveCBsYWJlbCwuc3dhbDItcmFkaW8gbGFiZWx7bWFyZ2luOjAgLjZlbTtmb250LXNpemU6MS4xMjVlbX0uc3dhbDItY2hlY2tib3ggaW5wdXQsLnN3YWwyLXJhZGlvIGlucHV0e21hcmdpbjowIC40ZW19LnN3YWwyLXZhbGlkYXRpb24tbWVzc2FnZXtkaXNwbGF5Om5vbmU7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzouNjI1ZW07b3ZlcmZsb3c6aGlkZGVuO2JhY2tncm91bmQ6I2YwZjBmMDtjb2xvcjojNjY2O2ZvbnQtc2l6ZToxZW07Zm9udC13ZWlnaHQ6MzAwfS5zd2FsMi12YWxpZGF0aW9uLW1lc3NhZ2U6OmJlZm9yZXtjb250ZW50OlwiIVwiO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEuNWVtO21pbi13aWR0aDoxLjVlbTtoZWlnaHQ6MS41ZW07bWFyZ2luOjAgLjYyNWVtO3pvb206bm9ybWFsO2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQtY29sb3I6I2YyNzQ3NDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OjYwMDtsaW5lLWhlaWdodDoxLjVlbTt0ZXh0LWFsaWduOmNlbnRlcn1Ac3VwcG9ydHMgKC1tcy1hY2NlbGVyYXRvcjp0cnVlKXsuc3dhbDItcmFuZ2UgaW5wdXR7d2lkdGg6MTAwJSFpbXBvcnRhbnR9LnN3YWwyLXJhbmdlIG91dHB1dHtkaXNwbGF5Om5vbmV9fUBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDpub25lKSwoLW1zLWhpZ2gtY29udHJhc3Q6YWN0aXZlKXsuc3dhbDItcmFuZ2UgaW5wdXR7d2lkdGg6MTAwJSFpbXBvcnRhbnR9LnN3YWwyLXJhbmdlIG91dHB1dHtkaXNwbGF5Om5vbmV9fUAtbW96LWRvY3VtZW50IHVybC1wcmVmaXgoKXsuc3dhbDItY2xvc2U6Zm9jdXN7b3V0bGluZToycHggc29saWQgcmdiYSg1MCwxMDAsMTUwLC40KX19LnN3YWwyLWljb257cG9zaXRpb246cmVsYXRpdmU7Ym94LXNpemluZzpjb250ZW50LWJveDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjVlbTtoZWlnaHQ6NWVtO21hcmdpbjoxLjI1ZW0gYXV0byAxLjg3NWVtO3pvb206bm9ybWFsO2JvcmRlcjouMjVlbSBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmFkaXVzOjUwJTtmb250LWZhbWlseTppbmhlcml0O2xpbmUtaGVpZ2h0OjVlbTtjdXJzb3I6ZGVmYXVsdDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LnN3YWwyLWljb246OmJlZm9yZXtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDo5MiU7Zm9udC1zaXplOjMuNzVlbX0uc3dhbDItaWNvbi5zd2FsMi1lcnJvcntib3JkZXItY29sb3I6I2YyNzQ3NH0uc3dhbDItaWNvbi5zd2FsMi1lcnJvciAuc3dhbDIteC1tYXJre3Bvc2l0aW9uOnJlbGF0aXZlO2ZsZXgtZ3JvdzoxfS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIFtjbGFzc149c3dhbDIteC1tYXJrLWxpbmVde2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjIuMzEyNWVtO3dpZHRoOjIuOTM3NWVtO2hlaWdodDouMzEyNWVtO2JvcmRlci1yYWRpdXM6LjEyNWVtO2JhY2tncm91bmQtY29sb3I6I2YyNzQ3NH0uc3dhbDItaWNvbi5zd2FsMi1lcnJvciBbY2xhc3NePXN3YWwyLXgtbWFyay1saW5lXVtjbGFzcyQ9bGVmdF17bGVmdDoxLjA2MjVlbTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKX0uc3dhbDItaWNvbi5zd2FsMi1lcnJvciBbY2xhc3NePXN3YWwyLXgtbWFyay1saW5lXVtjbGFzcyQ9cmlnaHRde3JpZ2h0OjFlbTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9LnN3YWwyLWljb24uc3dhbDItd2FybmluZ3tib3JkZXItY29sb3I6I2ZhY2VhODtjb2xvcjojZjhiYjg2fS5zd2FsMi1pY29uLnN3YWwyLXdhcm5pbmc6OmJlZm9yZXtjb250ZW50OlwiIVwifS5zd2FsMi1pY29uLnN3YWwyLWluZm97Ym9yZGVyLWNvbG9yOiM5ZGUwZjY7Y29sb3I6IzNmYzNlZX0uc3dhbDItaWNvbi5zd2FsMi1pbmZvOjpiZWZvcmV7Y29udGVudDpcImlcIn0uc3dhbDItaWNvbi5zd2FsMi1xdWVzdGlvbntib3JkZXItY29sb3I6I2M5ZGFlMTtjb2xvcjojODdhZGJkfS5zd2FsMi1pY29uLnN3YWwyLXF1ZXN0aW9uOjpiZWZvcmV7Y29udGVudDpcIj9cIn0uc3dhbDItaWNvbi5zd2FsMi1xdWVzdGlvbi5zd2FsMi1hcmFiaWMtcXVlc3Rpb24tbWFyazo6YmVmb3Jle2NvbnRlbnQ6XCLYn1wifS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3N7Ym9yZGVyLWNvbG9yOiNhNWRjODZ9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV17cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6My43NWVtO2hlaWdodDo3LjVlbTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTtib3JkZXItcmFkaXVzOjUwJX0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXVtjbGFzcyQ9bGVmdF17dG9wOi0uNDM3NWVtO2xlZnQ6LTIuMDYzNWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOjMuNzVlbSAzLjc1ZW07Ym9yZGVyLXJhZGl1czo3LjVlbSAwIDAgNy41ZW19LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV1bY2xhc3MkPXJpZ2h0XXt0b3A6LS42ODc1ZW07bGVmdDoxLjg3NWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOjAgMy43NWVtO2JvcmRlci1yYWRpdXM6MCA3LjVlbSA3LjVlbSAwfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtcmluZ3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7dG9wOi0uMjVlbTtsZWZ0Oi0uMjVlbTtib3gtc2l6aW5nOmNvbnRlbnQtYm94O3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOi4yNWVtIHNvbGlkIHJnYmEoMTY1LDIyMCwxMzQsLjMpO2JvcmRlci1yYWRpdXM6NTAlfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtZml4e3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTt0b3A6LjVlbTtsZWZ0OjEuNjI1ZW07d2lkdGg6LjQzNzVlbTtoZWlnaHQ6NS42MjVlbTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV17ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7aGVpZ2h0Oi4zMTI1ZW07Ym9yZGVyLXJhZGl1czouMTI1ZW07YmFja2dyb3VuZC1jb2xvcjojYTVkYzg2fS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVdW2NsYXNzJD10aXBde3RvcDoyLjg3NWVtO2xlZnQ6Ljg3NWVtO3dpZHRoOjEuNTYyNWVtO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVdW2NsYXNzJD1sb25nXXt0b3A6Mi4zNzVlbTtyaWdodDouNWVtO3dpZHRoOjIuOTM3NWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHN7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbjowIDAgMS4yNWVtO3BhZGRpbmc6MDtiYWNrZ3JvdW5kOmluaGVyaXQ7Zm9udC13ZWlnaHQ6NjAwfS5zd2FsMi1wcm9ncmVzcy1zdGVwcyBsaXtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXB7ei1pbmRleDoyMDt3aWR0aDoyZW07aGVpZ2h0OjJlbTtib3JkZXItcmFkaXVzOjJlbTtiYWNrZ3JvdW5kOiMzMDg1ZDY7Y29sb3I6I2ZmZjtsaW5lLWhlaWdodDoyZW07dGV4dC1hbGlnbjpjZW50ZXJ9LnN3YWwyLXByb2dyZXNzLXN0ZXBzIC5zd2FsMi1wcm9ncmVzcy1zdGVwLnN3YWwyLWFjdGl2ZS1wcm9ncmVzcy1zdGVwe2JhY2tncm91bmQ6IzMwODVkNn0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXAuc3dhbDItYWN0aXZlLXByb2dyZXNzLXN0ZXB+LnN3YWwyLXByb2dyZXNzLXN0ZXB7YmFja2dyb3VuZDojYWRkOGU2O2NvbG9yOiNmZmZ9LnN3YWwyLXByb2dyZXNzLXN0ZXBzIC5zd2FsMi1wcm9ncmVzcy1zdGVwLnN3YWwyLWFjdGl2ZS1wcm9ncmVzcy1zdGVwfi5zd2FsMi1wcm9ncmVzcy1zdGVwLWxpbmV7YmFja2dyb3VuZDojYWRkOGU2fS5zd2FsMi1wcm9ncmVzcy1zdGVwcyAuc3dhbDItcHJvZ3Jlc3Mtc3RlcC1saW5le3otaW5kZXg6MTA7d2lkdGg6Mi41ZW07aGVpZ2h0Oi40ZW07bWFyZ2luOjAgLTFweDtiYWNrZ3JvdW5kOiMzMDg1ZDZ9W2NsYXNzXj1zd2FsMl17LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50fS5zd2FsMi1zaG93ey13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLXNob3cgLjNzO2FuaW1hdGlvbjpzd2FsMi1zaG93IC4zc30uc3dhbDItc2hvdy5zd2FsMi1ub2FuaW1hdGlvbnstd2Via2l0LWFuaW1hdGlvbjpub25lO2FuaW1hdGlvbjpub25lfS5zd2FsMi1oaWRley13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLWhpZGUgLjE1cyBmb3J3YXJkczthbmltYXRpb246c3dhbDItaGlkZSAuMTVzIGZvcndhcmRzfS5zd2FsMi1oaWRlLnN3YWwyLW5vYW5pbWF0aW9uey13ZWJraXQtYW5pbWF0aW9uOm5vbmU7YW5pbWF0aW9uOm5vbmV9LnN3YWwyLXJ0bCAuc3dhbDItY2xvc2V7cmlnaHQ6YXV0bztsZWZ0OjB9LnN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1pY29uIC5zd2FsMi1zdWNjZXNzLWxpbmUtdGlwey13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcCAuNzVzO2FuaW1hdGlvbjpzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXAgLjc1c30uc3dhbDItYW5pbWF0ZS1zdWNjZXNzLWljb24gLnN3YWwyLXN1Y2Nlc3MtbGluZS1sb25ney13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1saW5lLWxvbmcgLjc1czthbmltYXRpb246c3dhbDItYW5pbWF0ZS1zdWNjZXNzLWxpbmUtbG9uZyAuNzVzfS5zd2FsMi1hbmltYXRlLXN1Y2Nlc3MtaWNvbiAuc3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lLXJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLXJvdGF0ZS1zdWNjZXNzLWNpcmN1bGFyLWxpbmUgNC4yNXMgZWFzZS1pbjthbmltYXRpb246c3dhbDItcm90YXRlLXN1Y2Nlc3MtY2lyY3VsYXItbGluZSA0LjI1cyBlYXNlLWlufS5zd2FsMi1hbmltYXRlLWVycm9yLWljb257LXdlYmtpdC1hbmltYXRpb246c3dhbDItYW5pbWF0ZS1lcnJvci1pY29uIC41czthbmltYXRpb246c3dhbDItYW5pbWF0ZS1lcnJvci1pY29uIC41c30uc3dhbDItYW5pbWF0ZS1lcnJvci1pY29uIC5zd2FsMi14LW1hcmt7LXdlYmtpdC1hbmltYXRpb246c3dhbDItYW5pbWF0ZS1lcnJvci14LW1hcmsgLjVzO2FuaW1hdGlvbjpzd2FsMi1hbmltYXRlLWVycm9yLXgtbWFyayAuNXN9QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLXJvdGF0ZS1sb2FkaW5nezAle3RyYW5zZm9ybTpyb3RhdGUoMCl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fUBrZXlmcmFtZXMgc3dhbDItcm90YXRlLWxvYWRpbmd7MCV7dHJhbnNmb3JtOnJvdGF0ZSgwKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19QG1lZGlhIHByaW50e2JvZHkuc3dhbDItc2hvd246bm90KC5zd2FsMi1uby1iYWNrZHJvcCk6bm90KC5zd2FsMi10b2FzdC1zaG93bil7b3ZlcmZsb3cteTpzY3JvbGwhaW1wb3J0YW50fWJvZHkuc3dhbDItc2hvd246bm90KC5zd2FsMi1uby1iYWNrZHJvcCk6bm90KC5zd2FsMi10b2FzdC1zaG93bik+W2FyaWEtaGlkZGVuPXRydWVde2Rpc3BsYXk6bm9uZX1ib2R5LnN3YWwyLXNob3duOm5vdCguc3dhbDItbm8tYmFja2Ryb3ApOm5vdCguc3dhbDItdG9hc3Qtc2hvd24pIC5zd2FsMi1jb250YWluZXJ7cG9zaXRpb246c3RhdGljIWltcG9ydGFudH19Iik7",
        "bGV0IHJlY29tbWVuZGF0aW9uRGlhbG9nID0gew0KDQogICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsDQogICAgc2hvd0RpYWxvZ0ZvclJlY29tbWVuZGF0aW9uOmZ1bmN0aW9uKHJlY29tbWVuZGF0aW9uKXsNCg0KICAgICAgICByZWNvbW1lbmRhdGlvbkRpYWxvZy5yZWNvbW1lbmRhdGlvbiA9IHJlY29tbWVuZGF0aW9uOw0KDQoNCiAgICAgICAgcmVjb21tZW5kYXRpb25EaWFsb2cuaGlkZURpYWxvZygpOw0KDQogICAgICAgIGxldCBmdW5jdGlvbkRlc2NyaXB0aW9uc0hUTUwgPSB0aGlzLmNyZWF0RnVuY3Rpb25EZXNjcmlwdGlvbkhUTUwocmVjb21tZW5kYXRpb24uZnVuY3Rpb25zKTsNCg0KICAgICAgICBsZXQgZGlhbG9nSFRNTCA9ICAnPGRpdiBjbGFzcz0ibW9kYWwgbWljcm9tb2RhbC1zbGlkZSIgaWQ9ImVyLXJlY29tbWVuZGF0aW9uLTEiIGFyaWEtaGlkZGVuPSJ0cnVlIj5cbicgKw0KICAgICAgICAgICAgJyAgICA8ZGl2IGNsYXNzPSJtb2RhbF9fb3ZlcmxheSIgdGFiaW5kZXg9Ii0xIiBkYXRhLW1pY3JvbW9kYWwtY2xvc2U+XG4nICsNCiAgICAgICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsX19jb250YWluZXIiIHJvbGU9ImRpYWxvZyIgYXJpYS1tb2RhbD0idHJ1ZSIgYXJpYS1sYWJlbGxlZGJ5PSJlci1yZWNvbW1lbmRhdGlvbi0xLXRpdGxlIj5cbicgKw0KICAgICAgICAgICAgJyAgICAgICAgICAgIDxoZWFkZXIgY2xhc3M9Im1vZGFsX19oZWFkZXIiPlxuJyArDQogICAgICAgICAgICAnICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWxfX3RpdGxlIiBpZD0iZXItcmVjb21tZW5kYXRpb24tMS10aXRsZSI+XG4nICsNCiAgICAgICAgICAgICcgICAgICAgICAgICAgICAgICAgICcrcmVjb21tZW5kYXRpb24udGl0bGUrDQogICAgICAgICAgICAnICAgICAgICAgICAgICAgIDwvaDI+XG4nICsNCiAgICAgICAgICAgICcgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibW9kYWxfX2Nsb3NlIiBhcmlhLWxhYmVsPSJDbG9zZSIgZGF0YS1taWNyb21vZGFsLWNsb3NlPjwvYnV0dG9uPicrDQogICAgICAgICAgICAnICAgICAgICAgICAgPC9oZWFkZXI+XG4nICsNCiAgICAgICAgICAgICcgICAgICAgICAgICA8bWFpbiBjbGFzcz0ibW9kYWxfX2NvbnRlbnQiIGlkPSJlci1yZWNvbW1lbmRhdGlvbi0xLWNvbnRlbnQiPlxuJyArDQogICAgICAgICAgICAnICAgICAgICAgICAgICAgPGRpdj48c3Ryb25nIGNsYXNzPSJyZWNvbW1lbmRhdGlvbl9kZXNjcmlwdGlvbiI+JytyZWNvbW1lbmRhdGlvbi5kZXNjcmlwdGlvbisnPC9zdHJvbmc+PC9kaXY+JyArDQogICAgICAgICAgICAnICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVjb21tZW5kYXRpb25fb3V0ZXIiPicrDQogICAgICAgICAgICBmdW5jdGlvbkRlc2NyaXB0aW9uc0hUTUwrDQogICAgICAgICAgICAnICAgICAgICAgICAgICAgPC9kaXY+JyArDQogICAgICAgICAgICAnICAgICAgICAgICA8L21haW4+XG4nICsNCiAgICAgICAgICAgICcgICAgICAgICAgICA8Zm9vdGVyIGNsYXNzPSJtb2RhbF9fZm9vdGVyIj5cbicgKw0KICAgICAgICAgICAgJyAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJlclJlY29tbWVuZGF0aW9uRGlhbG9nWWVzIiBjbGFzcz0ibW9kYWxfX2J0biBtb2RhbF9fYnRuLXByaW1hcnkgcmVjb21tZW5kYXRpb25feWVzIiBkYXRhLW1pY3JvbW9kYWwtY2xvc2UgPicrcmVjb21tZW5kYXRpb24ueWVzKyc8L2J1dHRvbj5cbicgKw0KICAgICAgICAgICAgJyAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJlclJlY29tbWVuZGF0aW9uRGlhbG9nTm8iIGNsYXNzPSJtb2RhbF9fYnRuIHJlY29tbWVuZGF0aW9uX25vIj4nK3JlY29tbWVuZGF0aW9uLm5vKyc8L2J1dHRvbj5cbicgKw0KICAgICAgICAgICAgJyAgICAgICAgICAgIDwvZm9vdGVyPlxuJyArDQogICAgICAgICAgICAnICAgICAgICA8L2Rpdj5cbicgKw0KICAgICAgICAgICAgJyAgICA8L2Rpdj5cbicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCg0KICAgICAgICAkKCJib2R5IikuYXBwZW5kKGRpYWxvZ0hUTUwpOw0KDQogICAgICAgIE1pY3JvTW9kYWwuc2hvdygnZXItcmVjb21tZW5kYXRpb24tMScpOw0KDQogICAgICAgIHJlY29tbWVuZGF0aW9uRGlhbG9nLmRpYWxvZ1Zpc2libGUgPSB0cnVlOw0KDQoNCiAgICAgICAgJCgiI2VyUmVjb21tZW5kYXRpb25EaWFsb2dZZXMiKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICByZWNvbW1lbmRhdGlvbkRpYWxvZy5yZWNvbW1lbmRhdGlvbi5yZXN1bHQgPSB0cnVlOw0KICAgICAgICAgICAgY29udGVudFNjcmlwdENvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb0JhY2tncm91bmRTY3JpcHQoew0KICAgICAgICAgICAgICAgIHR5cGU6ICJyZWNvbW1lbmRhdGlvblJlc3VsdCIsDQogICAgICAgICAgICAgICAgZGF0YTogcmVjb21tZW5kYXRpb25EaWFsb2cucmVjb21tZW5kYXRpb24sDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgcmVjb21tZW5kYXRpb25EaWFsb2cuaGlkZURpYWxvZygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCIjZXJSZWNvbW1lbmRhdGlvbkRpYWxvZ05vIikuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgcmVjb21tZW5kYXRpb25EaWFsb2cucmVjb21tZW5kYXRpb24ucmVzdWx0ID0gZmFsc2U7DQogICAgICAgICAgICBjb250ZW50U2NyaXB0Q29udHJvbGxlci5zZW5kTWVzc2FnZVRvQmFja2dyb3VuZFNjcmlwdCh7DQogICAgICAgICAgICAgICAgdHlwZTogInJlY29tbWVuZGF0aW9uUmVzdWx0IiwNCiAgICAgICAgICAgICAgICBkYXRhOiByZWNvbW1lbmRhdGlvbkRpYWxvZy5yZWNvbW1lbmRhdGlvbiwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgcmVjb21tZW5kYXRpb25EaWFsb2cuaGlkZURpYWxvZygpOw0KICAgICAgICB9KTsNCg0KICAgIH0sDQoNCiAgICBoaWRlRGlhbG9nOiBmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgaWYocmVjb21tZW5kYXRpb25EaWFsb2cuZGlhbG9nVmlzaWJsZSl7DQogICAgICAgICAgICBNaWNyb01vZGFsLmNsb3NlKCdlci1yZWNvbW1lbmRhdGlvbi0xJyk7DQogICAgICAgICAgICAkKCIjZXItcmVjb21tZW5kYXRpb24tMSIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgcmVjb21tZW5kYXRpb25EaWFsb2cuZGlhbG9nVmlzaWJsZSA9IGZhbHNlOw0KICAgICAgICB9DQoNCg0KICAgIH0sDQoNCiAgICBjcmVhdEZ1bmN0aW9uRGVzY3JpcHRpb25IVE1MOmZ1bmN0aW9uIChmdW5jdGlvbnMpIHsNCg0KICAgICAgICBsZXQgaHRtbCA9ICAiPGRpdiBjbGFzcz0ncmVjb21tZW5kYXRpb25fZnVuY3Rpb25zX2NvbnRhaW5lcic+IjsNCg0KICAgICAgICBmb3IobGV0IGk9MDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKyl7DQoNCiAgICAgICAgICAgIGh0bWwrPSAgICI8ZGl2IGNsYXNzPSdyZWNvbW1lbmRhdGlvbl9mdW5jdGlvbl9jb250YWluZXInPiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIjxoMz4iK2Z1bmN0aW9uc1tpXS50cmFuc3RsYXRlZFRpdGxlKyI8L2gzPiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3JlY29tbWVuZGF0aW9uX2ltYWdlJz48aW1nIHNyYz0nIitmdW5jdGlvbnNbaV0uZGVmYXVsdEljb25VUkwrIicgYWx0PScnPjwvZGl2PiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIjxkaXY+IitmdW5jdGlvbnNbaV0udHJhbnNsYXRlZERlc2NyaXB0aW9uKyI8L2Rpdj4iICsNCiAgICAgICAgICAgICAgICAgICAgICI8L2Rpdj4iOw0KDQogICAgICAgIH0NCg0KICAgICAgICBodG1sKz0iPC9kaXY+IjsNCg0KICAgICAgICByZXR1cm4gaHRtbDsNCg0KICAgIH0NCn07",
        "dmFyIGFsZXJ0TWFuYWdlciA9IHsNCg0KICAgIGFsZXJ0V2FzQ2xvc2VkOiBmYWxzZSwNCiAgICBhbGVydElzT3BlbjogZmFsc2UsDQoNCiAgICBzdXBwcmVzc0NsaWNrOmZ1bmN0aW9uICgpIHsNCg0KICAgICAgICBpZihhbGVydE1hbmFnZXIuYWxlcnRJc09wZW4pew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBpZihhbGVydE1hbmFnZXIuYWxlcnRXYXNDbG9zZWQpew0KICAgICAgICAgICAgYWxlcnRNYW5hZ2VyLmFsZXJ0V2FzQ2xvc2VkID0gZmFsc2U7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfSwNCg0KICAgIHNob3dFcnJvckFsZXJ0OiBmdW5jdGlvbiAodGl0bGUsZGVzY3JpcHRpb24pIHsNCiAgICAgICAgYWxlcnRNYW5hZ2VyLmFsZXJ0SXNPcGVuID0gdHJ1ZTsNCiAgICAgICAgU3dhbC5maXJlKHsNCiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSwNCiAgICAgICAgICAgIHRleHQ6IGRlc2NyaXB0aW9uLA0KICAgICAgICAgICAgdHlwZTogJ2Vycm9yJywNCiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnT2snLA0KICAgICAgICAgICAgd2lkdGg6IDI1MCwNCiAgICAgICAgICAgIHBhZGRpbmc6ICcxZW0nLA0KICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsNCiAgICAgICAgICAgIGFsZXJ0TWFuYWdlci5hbGVydFdhc0Nsb3NlZCA9IHRydWU7DQogICAgICAgICAgICBhbGVydE1hbmFnZXIuYWxlcnRJc09wZW4gPSBmYWxzZTsNCiAgICAgICAgfSk7DQogICAgfSwNCg0KICAgIHNob3dJbmZvQWxlcnQ6IGZ1bmN0aW9uICh0aXRsZSxkZXNjcmlwdGlvbikgew0KICAgICAgICBhbGVydE1hbmFnZXIuYWxlcnRJc09wZW4gPSB0cnVlOw0KICAgICAgICBTd2FsLmZpcmUoew0KICAgICAgICAgICAgdGl0bGU6IHRpdGxlLA0KICAgICAgICAgICAgdGV4dDogZGVzY3JpcHRpb24sDQogICAgICAgICAgICB0eXBlOiAnaW5mbycsDQogICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ09rJywNCiAgICAgICAgICAgIHdpZHRoOiAyNTAsDQogICAgICAgICAgICBwYWRkaW5nOiAnMWVtJywNCiAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7DQogICAgICAgICAgICBhbGVydE1hbmFnZXIuYWxlcnRJc09wZW4gPSB0cnVlOw0KICAgICAgICAgICAgYWxlcnRNYW5hZ2VyLmFsZXJ0SXNPcGVuID0gZmFsc2U7DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQp9Ow==",
        "",
        "Y2xhc3MgU2VudGVuY2VUb2tlbml6ZXJ7DQogICAgY29uc3RydWN0b3IoKXsNCiAgICB9DQogICAgc2V0RW50cnkoZW50cnkpew0KICAgICAgICB0aGlzLmVudHJ5ID0gdGhpcy5jb21wYWN0KGVudHJ5KTsNCiAgICAgICAgdGhpcy5zZW50ZW5jZXMgPSBudWxsOw0KICAgIH0NCg0KICAgIGdldFNlbnRlbmNlcygpew0KICAgICAgICBpZiAoIXRoaXMuZW50cnkpIHJldHVybiBbXTsNCiAgICAgICAgbGV0IHdvcmRzID0gdGhpcy5lbnRyeS5zcGxpdCgnICcpOw0KICAgICAgICBsZXQgZW5kaW5nV29yZHMgPSB3b3Jkcy5maWx0ZXIoZnVuY3Rpb24odykgew0KICAgICAgICAgICAgcmV0dXJuIHcuZW5kc1dpdGgoJy4nKSB8fCB3LmVuZHNXaXRoKCchJykgfHwgdy5lbmRzV2l0aCgnPycpOw0KICAgICAgICB9KTsNCg0KICAgICAgICBsZXQgc2VsZiA9IHRoaXM7DQogICAgICAgIGxldCBsYXN0U2VudGVuY2UgPSB3b3Jkc1swXTsNCiAgICAgICAgc2VsZi5zZW50ZW5jZXMgPSBbXTsNCiAgICAgICAgd29yZHMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHsNCg0KDQogICAgICAgICAgICBpZiAoZW5kaW5nV29yZHMuaW5kZXhPZihwcmV2KSAhPT0gLTEpIHsNCiAgICAgICAgICAgICAgICBzZWxmLnNlbnRlbmNlcy5wdXNoKHNlbGYuY29tcGFjdChsYXN0U2VudGVuY2UpKTsNCiAgICAgICAgICAgICAgICBsYXN0U2VudGVuY2UgPSAiIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGxhc3RTZW50ZW5jZSA9IGxhc3RTZW50ZW5jZSArICIgIiArIGN1cjsNCiAgICAgICAgICAgIHJldHVybiBjdXI7DQogICAgICAgIH0pOw0KICAgICAgICBzZWxmLnNlbnRlbmNlcy5wdXNoKHRoaXMuY29tcGFjdChsYXN0U2VudGVuY2UpKTsNCiAgICAgICAgcmV0dXJuIHRoaXMuc2VudGVuY2VzOw0KICAgIH0NCg0KDQogICAgY29tcGFjdChzdHIpew0KICAgICAgICBsZXQgcmVzID0gc3RyLnRyaW0oKTsNCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoJyAgJywgJyAnKTsNCiAgICAgICAgcmV0dXJuIHJlczsNCiAgICB9DQoNCn0NCg==",
        "",
        "LyoqDQogKiBVdGlsaXR5IG1ldGhvZHMgZm9yIGhhbmRsaW5nIEkvTyBUeXBlcw0KICogQENsYXNzIGlvVHlwZVV0aWxzDQogKi8NCnZhciBpb1R5cGVVdGlscyA9IHsNCiAgICAvKioNCiAgICAgKiBDb252ZXJ0cyBhbiBvYmplY3QgdG8gYSBzcGVjaWZpYyBJT1R5cGUgaW5zdGFuY2UNCiAgICAgKiBAcGFyYW0gaW9PYmplY3QNCiAgICAgKiBAcmV0dXJucyBJT1R5cGUgaW5zdGFuY2UNCiAgICAgKi8NCiAgICB0b0lPVHlwZUluc3RhbmNlKGlvT2JqZWN0KSB7DQogICAgICAgIGxldCBJT3JldCA9IG5ldyBJT1R5cGUoKTsNCiAgICAgICAgaWYgKHR5cGVvZihpb09iamVjdCkgPT09ICJvYmplY3QiICYmIGlvT2JqZWN0Lm5hbWUgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgc3dpdGNoIChpb09iamVjdC5uYW1lKSB7DQogICAgICAgICAgICAgICAgY2FzZSAnVm9pZElPVHlwZSc6DQogICAgICAgICAgICAgICAgICAgIElPcmV0ID0gbmV3IFZvaWRJT1R5cGUoKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnV29yZCc6DQogICAgICAgICAgICAgICAgICAgIElPcmV0ID0gbmV3IFdvcmQoaW9PYmplY3Qud29yZCxpb09iamVjdC5sYW5nLGlvT2JqZWN0LnNlbnRlbmNlU3RhcnQsaW9PYmplY3Quc2VudGVuY2VFbmQpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdTZW50ZW5jZSc6DQogICAgICAgICAgICAgICAgICAgIElPcmV0ID0gbmV3IFNlbnRlbmNlKGlvT2JqZWN0LnNlbnRlbmNlLGlvT2JqZWN0LmxhbmcpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdQYXJhZ3JhcGgnOg0KICAgICAgICAgICAgICAgICAgICBJT3JldCA9IG5ldyBQYXJhZ3JhcGgoaW9PYmplY3QucGFyYWdyYXBoLGlvT2JqZWN0LmxhbmcpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdBbm5vdGF0ZWRQYXJhZ3JhcGgnOg0KICAgICAgICAgICAgICAgICAgICBJT3JldCA9IG5ldyBBbm5vdGF0ZWRQYXJhZ3JhcGgoaW9PYmplY3QucGFyYWdyYXBoLGlvT2JqZWN0LmFubm90YXRpb25zLCBpb09iamVjdC5sYW5nKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnSW1hZ2VJT1R5cGUnOg0KICAgICAgICAgICAgICAgICAgICBJT3JldCA9IG5ldyBJbWFnZUlPVHlwZShpb09iamVjdC51cmwsIGlvT2JqZWN0LmFsdCwgaW9PYmplY3QudGl0bGUpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdBdWRpb1R5cGUnOg0KICAgICAgICAgICAgICAgICAgICBJT3JldCA9IG5ldyBBdWRpb1R5cGUoaW9PYmplY3QubXAzVVJMLCBpb09iamVjdC5zcGVlY2hNYXJrVVJMLCBpb09iamVjdC5zcGVlY2hNYXJrcyk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgJ0phdmFTY3JpcHRUeXBlJzoNCiAgICAgICAgICAgICAgICAgICAgSU9yZXQgPSBuZXcgSmF2YVNjcmlwdFR5cGUoaW9PYmplY3Quc2NyaXB0KTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnVVJMVHlwZSc6DQogICAgICAgICAgICAgICAgICAgIElPcmV0ID0gbmV3IFVSTFR5cGUoaW9PYmplY3QudXJsLCBpb09iamVjdC50YXJnZXQpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50UmVwbGFjZW1lbnQnOg0KICAgICAgICAgICAgICAgICAgICBJT3JldCA9IG5ldyBDb250ZW50UmVwbGFjZW1lbnQoaW9PYmplY3QucmVwbGFjZW1lbnRzLGlvT2JqZWN0LmxhbmcpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdFcnJvcic6DQogICAgICAgICAgICAgICAgICAgIElPcmV0ID0gbmV3IEVycm9yKGlvT2JqZWN0Lm1lc3NhZ2UsaW9PYmplY3QudHlwZSxpb09iamVjdC5uYW1lLGlvT2JqZWN0LmRlc2NyaXB0aW9uKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnTm9SZXN1bHQnOg0KICAgICAgICAgICAgICAgICAgICBJT3JldCA9IG5ldyBOb1Jlc3VsdChpb09iamVjdC5tZXNzYWdlLCBpb09iamVjdC5uYW1lLGlvT2JqZWN0LmRlc2NyaXB0aW9uKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBpb09iamVjdDsgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gSU9yZXQ7DQogICAgfSwNCg0KfTs=",
        "",
        "",
        "",
        "",
        "",
        "",
        "bGV0IHVpVXBkYXRlTWFuYWdlciA9IHsNCiAgICBzYXZlQ3VycmVudENvbmZpZ3VyYXRpb246IGZ1bmN0aW9uICh1aSxjb25maWd1cmF0aW9uKSB7DQoNCiAgICAgICAgbGV0IG1lc3NhZ2UgPXsNCiAgICAgICAgICAgIHR5cGU6ICJzYXZlVWlDb25maWd1cmF0aW9uRm9yVGFiIiwNCiAgICAgICAgICAgIGlkOiB1aS5pZCwNCiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb246IGNvbmZpZ3VyYXRpb24sDQogICAgICAgIH07DQogICAgICAgIGNvbnRlbnRTY3JpcHRDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9CYWNrZ3JvdW5kU2NyaXB0KG1lc3NhZ2UpOw0KDQogICAgfQ0KfTs=",
        "",
        "Y2xhc3MgUHJlc2VudGF0aW9uew0KICAgIGNvbnN0cnVjdG9yKGZ1bmN0aW9uSW5mbywgdXNlckludGVyZmFjZSxjb25maWd1cmF0aW9uKXsNCg0KICAgICAgICB0aGlzLmZ1bmN0aW9uSW5mbyA9IGZ1bmN0aW9uSW5mbzsNCiAgICAgICAgdGhpcy51c2VySW50ZXJmYWNlID0gdXNlckludGVyZmFjZTsNCiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjsNCiAgICAgICAgdGhpcy5yZXF1ZXN0Q291bnRlciA9IDA7DQogICAgICAgIHRoaXMuaXNDb21wYXRpYmxlV2l0aE90aGVyUHJlc2VudGF0aW9ucyA9IGZhbHNlOw0KICAgICAgICB0aGlzLmluc3RhbnREaXNwbGF5ID0gdHJ1ZTsNCiAgICAgICAgdGhpcy5sYXN0UmVxdWVzdElEID0gbnVsbDsNCg0KICAgIH0NCg0KICAgIHJlbmRlclJlc3VsdChyZXF1ZXN0LHJlc3VsdCl7DQoNCiAgICB9DQoNCg0KICAgIHJlbW92ZVJlc3VsdChyZXN1bHRJRCl7DQoNCiAgICB9DQoNCiAgICByZW1vdmVMYXN0UmVzdWx0KCkgew0KICAgICAgICBpZiAodGhpcy5sYXN0UmVxdWVzdElEKSB7DQogICAgICAgICAgICB0aGlzLnJlbW92ZVJlc3VsdCh0aGlzLmxhc3RSZXF1ZXN0SUQpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgdW5kbygpew0KDQogICAgfQ0KDQogICAgcmVtb3ZlKCl7DQogICAgICAgIGNvbnNvbGUubG9nKCJSZW1vdmluZyBwcmVzZW50YXRpb24iKTsNCiAgICB9DQoNCiAgICByZW1vdmVBbmltYXRlZFJlc3VsdCgpew0KDQogICAgfQ0KDQogICAgZ2V0SUQoKXsNCiAgICAgICAgcmV0dXJuIHRoaXMudXNlckludGVyZmFjZS51aUlkKyItIit0aGlzLmZ1bmN0aW9uSW5mby50b29sSWQ7DQogICAgfQ0KDQogICAgZ2V0UHJlc2VudGF0aW9uQW5kUmVxdWVzdElkZW50aWZpZXIocmVxdWVzdElEKXsNCiAgICAgICAgcmV0dXJuICdkYXRhLXByZXNlbnRhdGlvbmlkPSInK3RoaXMuZ2V0SUQoKSsnIiBkYXRhLXJlcXVlc3RpZD0iJytyZXF1ZXN0SUQrJyInOw0KICAgIH0NCg0KICAgIGdldFJlc3VsdENsYXNzKCl7DQogICAgICAgIHJldHVybiAiZWFzeS1yZWFkaW5nLXJlc3VsdCI7DQogICAgfQ0KDQogICAgY3JlYXRlUmVxdWVzdElkKCl7DQogICAgICAgIHRoaXMucmVxdWVzdENvdW50ZXIrKzsNCiAgICAgICAgdGhpcy5sYXN0UmVxdWVzdElEID0gImVyLXJlc3VsdC0iK3RoaXMuZ2V0SUQoKSsiLSIrdGhpcy5yZXF1ZXN0Q291bnRlcjsNCiAgICAgICAgcmV0dXJuIHRoaXMubGFzdFJlcXVlc3RJRDsNCiAgICB9DQoNCiAgICBzZXRUb29sSW5kZXgodG9vbEluZGV4KXsNCiAgICAgICAgdGhpcy50b29sSW5kZXggPSB0b29sSW5kZXg7DQogICAgfQ0KDQogICAgZ2V0V2lkZ2V0KCl7DQoNCiAgICAgICAgcmV0dXJuIHRoaXMudXNlckludGVyZmFjZS50b29sc1t0aGlzLnRvb2xJbmRleF0ud2lkZ2V0Ow0KICAgIH0NCg0KICAgIHVwZGF0ZUNvbmZpZ3VyYXRpb25BbmRGdW5jdGlvbihjb25maWd1cmF0aW9uLGZ1bmN0aW9uSW5mbyl7DQogICAgICAgIHRoaXMuZnVuY3Rpb25JbmZvID0gZnVuY3Rpb25JbmZvOw0KICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uOw0KICAgICAgICB0aGlzLnRvb2xJZCA9IHRoaXMuZnVuY3Rpb25JbmZvLnRvb2xJZDsNCiAgICB9DQoNCn0=",
        "Y2xhc3MgVXNlckludGVyZmFjZUJhc2V7DQogICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbix0YWJDb25maWd1cmF0aW9uKXsNCg0KICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uOw0KICAgICAgICB0aGlzLnRhYkNvbmZpZ3VyYXRpb24gPSB0YWJDb25maWd1cmF0aW9uOw0KICAgIH0NCg0KDQogICAgaW5pdFVJKCl7DQoNCiAgICB9DQoNCg0KICAgIHNob3coKXsNCg0KDQogICAgfQ0KDQogICAgaGlkZSgpew0KDQogICAgfQ0KDQogICAgZ2V0VG9vbENvbnRhaW5lcklERm9yTGF5b3V0KHRvb2xJRCxsYXlvdXRDb25maWcsb3JkZXIpew0KDQogICAgfQ0KDQogICAgcmVtb3ZlQ29udGFpbmVyRm9yVG9vbCh0b29sSUQpew0KDQogICAgfQ0KDQogICAgdG9vbHNMb2FkZWQoKSB7DQoNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgY29uc29sZS5sb2coIlJlbW92aW5nIHVzZXIgaW50ZXJmYWNlOiIpOw0KICAgIH0NCg0KICAgIHVpVXBkYXRlZCgpew0KDQoNCiAgICB9DQoNCg0KDQp9",
        "Y2xhc3MgV2lkZ2V0QmFzZXsNCg0KICAgIGNvbnN0cnVjdG9yKGZ1bmN0aW9uSW5mbywgdXNlckludGVyZmFjZSx0YXJnZXRJRCwgY29uZmlndXJhdGlvbil7DQogICAgICAgIHRoaXMuZnVuY3Rpb25JbmZvID0gZnVuY3Rpb25JbmZvOw0KICAgICAgICB0aGlzLnVzZXJJbnRlcmZhY2UgPSB1c2VySW50ZXJmYWNlOw0KICAgICAgICB0aGlzLnRhcmdldElEID0gdGFyZ2V0SUQ7DQogICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247DQogICAgICAgIHRoaXMudG9vbElkID0gdGhpcy5mdW5jdGlvbkluZm8udG9vbElkOw0KICAgICAgICB0aGlzLndpZGdldElEID0gdXNlckludGVyZmFjZS5pZCsiXyIrZnVuY3Rpb25JbmZvLnNvdXJjZS5pZCsiXyIrZnVuY3Rpb25JbmZvLnRvb2xJZDsNCg0KICAgIH0NCg0KICAgIGRpc2FibGUoKXsNCg0KICAgIH0NCg0KICAgIGVuYWJsZSgpew0KDQogICAgfQ0KDQoNCiAgICBwcmVzZW50YXRpb25GaW5pc2hlZChwcmVzZW50YXRpb24pew0KDQogICAgfQ0KDQogICAgcmVxdWVzdEZhaWxlZChyZXEsY29uZmlnKXsNCg0KICAgIH0NCg0KICAgIGFjdGl2YXRlV2lkZ2V0KCl7DQoNCg0KICAgIH0NCiAgICBkZWFjdGl2YXRlV2lkZ2V0KG1hbnVhbD10cnVlKXsNCiAgICAgICAgaWYoZWFzeVJlYWRpbmcudXNlckludGVyZmFjZXNbdGhpcy51c2VySW50ZXJmYWNlLnVpSWRdKXsNCiAgICAgICAgICAgIGlmKGVhc3lSZWFkaW5nLnVzZXJJbnRlcmZhY2VzW3RoaXMudXNlckludGVyZmFjZS51aUlkXS50b29sc1t0aGlzLnRvb2xJbmRleF0pew0KICAgICAgICAgICAgICAgIGlmKGVhc3lSZWFkaW5nLnVzZXJJbnRlcmZhY2VzW3RoaXMudXNlckludGVyZmFjZS51aUlkXS50b29sc1t0aGlzLnRvb2xJbmRleF0ucHJlc2VudGF0aW9uKXsNCiAgICAgICAgICAgICAgICAgICAgZWFzeVJlYWRpbmcudXNlckludGVyZmFjZXNbdGhpcy51c2VySW50ZXJmYWNlLnVpSWRdLnRvb2xzW3RoaXMudG9vbEluZGV4XS5wcmVzZW50YXRpb24ucmVtb3ZlQW5pbWF0ZWRSZXN1bHQoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKG1hbnVhbCkgew0KICAgICAgICAgICAgICAgICAgICAvLyBJZiByZXF1ZXN0IGhhcyBiZWVuIG1hbnVhbGx5IGNhbmNlbGxlZCBieSB1c2VyLCBpbmZvcm0gcmVhc29uZXINCiAgICAgICAgICAgICAgICAgICAgY29udGVudFNjcmlwdENvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb0JhY2tncm91bmRTY3JpcHQoew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImhlbHBDYW5jZWxsZWQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgdWlfaTogdGhpcy51c2VySW50ZXJmYWNlLmlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9pOiB0aGlzLnRvb2xJZCwNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJlcXVlc3RNYW5hZ2VyLmNhbmNlbFJlcXVlc3QodGhpcyk7DQogICAgfQ0KDQoNCiAgICB3aWRnZXRBY3RpdmF0ZWQod2lkZ2V0KXsNCiAgICAgICAgaWYod2lkZ2V0ICE9PSB0aGlzKXsNCg0KICAgICAgICAgICAgLyoNCiAgICAgICAgICAgIGlmKGVhc3lSZWFkaW5nLnVzZXJJbnRlcmZhY2VzW3RoaXMudXNlckludGVyZmFjZS51aUlkXSl7DQogICAgICAgICAgICAgICAgaWYoZWFzeVJlYWRpbmcudXNlckludGVyZmFjZXNbdGhpcy51c2VySW50ZXJmYWNlLnVpSWRdLnRvb2xzW3RoaXMudG9vbElkXSl7DQogICAgICAgICAgICAgICAgICAgIGlmKGVhc3lSZWFkaW5nLnVzZXJJbnRlcmZhY2VzW3RoaXMudXNlckludGVyZmFjZS51aUlkXS50b29sc1t0aGlzLnRvb2xJZF0ucHJlc2VudGF0aW9uKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVhc3lSZWFkaW5nLnVzZXJJbnRlcmZhY2VzW3RoaXMudXNlckludGVyZmFjZS51aUlkXS50b29sc1t0aGlzLnRvb2xJZF0ucHJlc2VudGF0aW9uLnJlbW92ZVJlc3VsdCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyLmNhbmNlbFJlcXVlc3QodGhpcyk7DQogICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVXaWRnZXQoZmFsc2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmVxdWVzdEZpbmlzaGVkKCkgew0KDQogICAgfQ0KDQogICAgZ2V0UHJlc2VudGF0aW9uKCl7DQoNCiAgICAgICAgcmV0dXJuIHRoaXMudXNlckludGVyZmFjZS50b29sc1t0aGlzLnRvb2xJbmRleF0ucHJlc2VudGF0aW9uOw0KICAgIH0NCg0KICAgIHN0b3BQcmVzZW50YXRpb24oKXsNCg0KICAgICAgICBsZXQgcHJlc2VudGF0aW9uID0gdGhpcy5nZXRQcmVzZW50YXRpb24oKTsNCg0KICAgICAgICBpZihwcmVzZW50YXRpb24pew0KICAgICAgICAgICAgcHJlc2VudGF0aW9uLnJlbW92ZVJlc3VsdCgpOw0KICAgICAgICB9DQoNCg0KICAgIH0NCg0KICAgIHJlbW92ZSgpew0KICAgICAgICBjb25zb2xlLmxvZygiUmVtb3Zpbmcgd2lkZ2V0OiIpOw0KICAgIH0NCg0KICAgIHNldFRvb2xJbmRleCh0b29sSW5kZXgpew0KICAgICAgICB0aGlzLnRvb2xJbmRleCA9IHRvb2xJbmRleDsNCiAgICB9DQoNCiAgICB1cGRhdGVDb25maWd1cmF0aW9uQW5kRnVuY3Rpb24oY29uZmlndXJhdGlvbixmdW5jdGlvbkluZm8pew0KICAgICAgICB0aGlzLmZ1bmN0aW9uSW5mbyA9IGZ1bmN0aW9uSW5mbzsNCiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjsNCiAgICAgICAgdGhpcy50b29sSWQgPSB0aGlzLmZ1bmN0aW9uSW5mby50b29sSWQ7DQogICAgfQ0KDQoNCn0=",
        "Y2xhc3MgQnVzeUFuaW1hdGlvbiB7DQogICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbikgew0KICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uOw0KICAgIH0NCg0KICAgIHN0YXJ0QW5pbWF0aW9uKHRleHRub2Rlcyl7DQoNCiAgICB9DQoNCiAgICBzdG9wQW5pbWF0aW9uKCl7DQoNCiAgICB9DQoNCiAgICByZW1vdmUoKXsNCiAgICAgICAgY29uc29sZS5sb2coIlJlbW92aW5nIGFuaW1hdGlvbjoiKTsNCiAgICB9DQp9DQo=",
        "Y2xhc3MgUGx1Z2luIHsNCiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uKSB7DQogICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247DQogICAgfQ0KfQ0K"
    ],
    "staticCSS": [
        "Lm1vZGFsIHsNCiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsYXZlbmlyIG5leHQsYXZlbmlyLGhlbHZldGljYSBuZXVlLGhlbHZldGljYSx1YnVudHUscm9ib3RvLG5vdG8sc2Vnb2UgdWksYXJpYWwsc2Fucy1zZXJpZjsNCn0NCg0KLm1vZGFsX19vdmVybGF5IHsNCiAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgdG9wOiAwOw0KICAgIGxlZnQ6IDA7DQogICAgcmlnaHQ6IDA7DQogICAgYm90dG9tOiAwOw0KICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMC42KTsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQp9DQoNCi5tb2RhbF9fY29udGFpbmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIHBhZGRpbmc6IDMwcHg7DQogIC8qICBtYXgtd2lkdGg6IDUwMHB4OyAqLw0KICAgIG1heC1oZWlnaHQ6IDEwMHZoOw0KICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCi8qICAgIG92ZXJmbG93LXk6IGF1dG87ICovDQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsYXZlbmlyIG5leHQsYXZlbmlyLGhlbHZldGljYSBuZXVlLGhlbHZldGljYSx1YnVudHUscm9ib3RvLG5vdG8sc2Vnb2UgdWksYXJpYWwsc2Fucy1zZXJpZiAhaW1wb3J0YW50Ow0KfQ0KDQoubW9kYWxfX2hlYWRlciB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCg0KLm1vZGFsX190aXRsZSB7DQogICAgbWFyZ2luLXRvcDogMDsNCiAgICBtYXJnaW4tYm90dG9tOiAwOw0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQogICAgZm9udC1zaXplOiAyMHB4ICFpbXBvcnRhbnQ7DQogICAgbGluZS1oZWlnaHQ6IDEuMjU7DQogICAgY29sb3I6ICMwMDQ0OWUgIWltcG9ydGFudDsNCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KfQ0KDQoNCg0KLm1vZGFsX19oZWFkZXIgLm1vZGFsX19jbG9zZTpiZWZvcmUgeyBjb250ZW50OiAiXDI3MTUiOyB9DQoNCi5tb2RhbF9fY29udGVudCB7DQogICAgbWFyZ2luLXRvcDogMnJlbTsNCiAgICBtYXJnaW4tYm90dG9tOiAycmVtOw0KICAgIGxpbmUtaGVpZ2h0OiAxLjU7DQogICAgY29sb3I6IHJnYmEoMCwwLDAsLjgpOw0KfQ0KDQoubW9kYWxfX2J0biB7DQogICAgZm9udC1zaXplOiAxOHB4Ow0KICAgIHBhZGRpbmctbGVmdDogMXJlbTsNCiAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtOw0KICAgIHBhZGRpbmctdG9wOiAuNXJlbTsNCiAgICBwYWRkaW5nLWJvdHRvbTogLjVyZW07DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjsNCiAgICBjb2xvcjogcmdiYSgwLDAsMCwuOCk7DQogICAgYm9yZGVyLXJhZGl1czogLjI1cmVtOw0KICAgIGJvcmRlci1zdHlsZTogbm9uZTsNCiAgICBib3JkZXItd2lkdGg6IDA7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOw0KICAgIHRleHQtdHJhbnNmb3JtOiBub25lOw0KICAgIG92ZXJmbG93OiB2aXNpYmxlOw0KICAgIGxpbmUtaGVpZ2h0OiAxLjE1Ow0KICAgIG1hcmdpbjogMDsNCg0KfQ0KDQoNCi5tb2RhbF9fYnRuLXByaW1hcnkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDQ0OWU7DQogICAgY29sb3I6ICNmZmY7DQp9DQoNCg0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKipcDQogIERlbW8gQW5pbWF0aW9uIFN0eWxlDQpcKioqKioqKioqKioqKioqKioqKioqKioqKiovDQpAa2V5ZnJhbWVzIG1tZmFkZUluIHsNCiAgICBmcm9tIHsgb3BhY2l0eTogMDsgfQ0KICAgIHRvIHsgb3BhY2l0eTogMTsgfQ0KfQ0KDQpAa2V5ZnJhbWVzIG1tZmFkZU91dCB7DQogICAgZnJvbSB7IG9wYWNpdHk6IDE7IH0NCiAgICB0byB7IG9wYWNpdHk6IDA7IH0NCn0NCg0KQGtleWZyYW1lcyBtbXNsaWRlSW4gew0KICAgIGZyb20geyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTUlKTsgfQ0KICAgIHRvIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyB9DQp9DQoNCkBrZXlmcmFtZXMgbW1zbGlkZU91dCB7DQogICAgZnJvbSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsgfQ0KICAgIHRvIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMCUpOyB9DQp9DQoNCi5taWNyb21vZGFsLXNsaWRlIHsNCiAgICBkaXNwbGF5OiBub25lOw0KfQ0KDQoubWljcm9tb2RhbC1zbGlkZS5pcy1vcGVuIHsNCiAgICBkaXNwbGF5OiBibG9jazsNCn0NCg0KLm1pY3JvbW9kYWwtc2xpZGVbYXJpYS1oaWRkZW49ImZhbHNlIl0gLm1vZGFsX19vdmVybGF5IHsNCiAgICBhbmltYXRpb246IG1tZmFkZUluIC4zcyBjdWJpYy1iZXppZXIoMC4wLCAwLjAsIDAuMiwgMSk7DQp9DQoNCi5taWNyb21vZGFsLXNsaWRlW2FyaWEtaGlkZGVuPSJmYWxzZSJdIC5tb2RhbF9fY29udGFpbmVyIHsNCiAgICBhbmltYXRpb246IG1tc2xpZGVJbiAuM3MgY3ViaWMtYmV6aWVyKDAsIDAsIC4yLCAxKTsNCn0NCg0KLm1pY3JvbW9kYWwtc2xpZGVbYXJpYS1oaWRkZW49InRydWUiXSAubW9kYWxfX292ZXJsYXkgew0KICAgIGFuaW1hdGlvbjogbW1mYWRlT3V0IC4zcyBjdWJpYy1iZXppZXIoMC4wLCAwLjAsIDAuMiwgMSk7DQp9DQoNCi5taWNyb21vZGFsLXNsaWRlW2FyaWEtaGlkZGVuPSJ0cnVlIl0gLm1vZGFsX19jb250YWluZXIgew0KICAgIGFuaW1hdGlvbjogbW1zbGlkZU91dCAuM3MgY3ViaWMtYmV6aWVyKDAsIDAsIC4yLCAxKTsNCn0NCg0KLm1pY3JvbW9kYWwtc2xpZGUgLm1vZGFsX19jb250YWluZXIsDQoubWljcm9tb2RhbC1zbGlkZSAubW9kYWxfX292ZXJsYXkgew0KICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07DQogICAgei1pbmRleDogOTk5OTk5OTk5OTk5OTk5Ow0KfQ0KDQoucmVjb21tZW5kYXRpb25faW1hZ2U+aW1new0KICAgIG1heC1oZWlnaHQ6IDE1MHB4Ow0KfQ0KLnJlY29tbWVuZGF0aW9uX3llc3sNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgbGVmdDogMjBweDsNCiAgICBtaW4td2lkdGg6IDUwcHg7DQp9DQoNCi5yZWNvbW1lbmRhdGlvbl9ub3sNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgcmlnaHQ6IDIwcHg7DQogICAgbWluLXdpZHRoOiA1MHB4Ow0KfQ0KLnJlY29tbWVuZGF0aW9uX291dGVyew0KICAgIGZsb2F0OiByaWdodDsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbGVmdDogLTUwJTsNCn0NCg0KLnJlY29tbWVuZGF0aW9uX2Z1bmN0aW9uX2NvbnRhaW5lcnsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7DQogICAgcGFkZGluZzogMTBweDsNCiAgICBib3JkZXItcmFkaXVzOiAxMHB4Ow0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIG1heC13aWR0aDogMjUwcHg7DQogICAgbWFyZ2luOiA1cHg7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIGxlZnQ6IDUwJTsNCg0KfQ0KDQoubW9kYWxfX2Nsb3NlIHsNCiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjazsNCiAgICBib3JkZXItcmFkaXVzOiAzcHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNiAhaW1wb3J0YW50Ow0KICAgIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxhdmVuaXIgbmV4dCxhdmVuaXIsaGVsdmV0aWNhIG5ldWUsaGVsdmV0aWNhLHVidW50dSxyb2JvdG8sbm90byxzZWdvZSB1aSxhcmlhbCxzYW5zLXNlcmlmOw0KICAgIC8qIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyovDQogICAgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7DQogICAgbWluLWhlaWdodDogMjVweDsNCiAgICBtaW4td2lkdGg6IDI1cHg7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIG1hcmdpbjogaW5pdGlhbDsNCn0NCg0KLm1vZGFsX19jbG9zZTpob3ZlciwubW9kYWxfX2Nsb3NlOmZvY3Vzew0KDQogICAgY29sb3I6IHdoaXRlISBpbXBvcnRhbnQ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzE4MTMxNyAhaW1wb3J0YW50Ow0KDQp9DQoNCg0KLnJlY29tbWVuZGF0aW9uX2Rlc2NyaXB0aW9uew0KICAgIGZvbnQtc2l6ZTogMTVweDsNCn0NCg0KDQoucmVjb21tZW5kYXRpb25fZnVuY3Rpb25fY29udGFpbmVyPmgzew0KICAgIGZvbnQtc2l6ZTogMTVweCAhaW1wb3J0YW50Ow0KICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7DQp9DQoNCi5yZWNvbW1lbmRhdGlvbl9mdW5jdGlvbl9jb250YWluZXI+aDN7DQogICAgZm9udC1zaXplOiAxNXB4ICFpbXBvcnRhbnQ7DQogICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDsNCn0NCg0KLnJlY29tbWVuZGF0aW9uX2Z1bmN0aW9uX2NvbnRhaW5lcj5kaXZ7DQogICAgZm9udC1zaXplOiAxNXB4ICFpbXBvcnRhbnQ7DQp9DQoNCi5tb2RhbF9fZm9vdGVyew0KICAgIGNsZWFyOiBib3RoOw0KfQ0KDQoubW9kYWxfX2Zvb3RlcjphZnRlcnsNCiAgICBjbGVhcjogYm90aDsNCn0=",
        "Lm1vZGFsX19jb250YWluZXIgew0KICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOw0KICAgIGJvcmRlcjogNXB4IHNvbGlkICMwMDg1NTA7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIHdpZHRoOiA0NWVtOw0KICAgIGhlaWdodDogNDJlbTsNCiAgICBmb250LXNpemU6IGluaXRpYWw7DQogICAgY29sb3I6IGJsYWNrOw0KfQ0KDQoubW9kYWxfX2NvbnRhaW5lciBmaWVsZHNldCB7DQogICAgYm9yZGVyOiBub25lOw0KfQ0KDQoubW9kYWxfX2NvbnRhaW5lciB0ZXh0YXJlYSB7DQogICAgZm9udC1zaXplOiBpbml0aWFsOw0KfQ0KDQoubW9kYWxfX2NvbnRhaW5lciBpbnB1dFt0eXBlPSdyYWRpbyddIHsNCiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuNSk7DQogICAgLW1vei10cmFuc2Zvcm06IHNjYWxlKDEuNSk7DQogICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuNSk7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGhlaWdodDogMS41ZW07DQogICAgd2lkdGg6IDEuNWVtOw0KICAgIC13ZWJraXQtYXBwZWFyYW5jZTogcmFkaW87DQogICAgZm9udC1zaXplOiBpbml0aWFsOw0KfQ0KDQoubW9kYWxfX2NvbnRhaW5lciBmb290ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Ow0KICAgIHBhZGRpbmc6IDA7DQp9DQoNCiNlci1mZWVkYmFjay1sb2dvIHsNCiAgICB3aWR0aDogM2VtOw0KICAgIGhlaWdodDogM2VtOw0KfQ0KDQoubW9kYWxfX2hlYWRlciB7DQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwZW0gMS41ZW07DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBtYXJnaW4tdG9wOiAwOw0KfQ0KDQoubW9kYWxfX2hlYWRlciBkaXYgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIG1hcmdpbi10b3A6IDAuNWVtOw0KfQ0KDQoubW9kYWxfX2NvbnRlbnQgew0KICAgIG1hcmdpbjogMWVtOw0KfQ0KDQoubW9kYWxfX2NvbnRlbnQgbGVnZW5kIHsNCiAgICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsNCiAgICBjb2xvcjogYmxhY2s7DQogICAgcGFkZGluZy1ib3R0b206IDFlbTsNCiAgICBmb250LXNpemU6IDEuNWVtOw0KfQ0KDQoubW9kYWxfX2NvbnRlbnQgbGFiZWwgew0KICAgIGZvbnQtc2l6ZTogMS41ZW07DQp9DQoNCiNlci1mZWVkYmFjay10aXRsZSwgLmVyRmVlZGJhY2tfcGFnZTEsIC5lckZlZWRiYWNrX3BhZ2U4IHsNCiAgICBjb2xvcjogIzAwODU1MCAhaW1wb3J0YW50Ow0KfQ0KDQojaGVsbG9fMSwgLmVyRmVlZGJhY2tfcGFnZTggew0KICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgIGZvbnQtc2l6ZTogMmVtOw0KfQ0KDQojaGVsbG9fMSB7DQogICAgbWFyZ2luLXRvcDogMWVtOw0KICAgIG1hcmdpbi1ib3R0b206IDFlbTsNCn0NCg0KI2hlbGxvXzIsICNoZWxsb18zLCAjaGVsbG9fNCB7DQogICAgbWFyZ2luLWJvdHRvbTogMWVtOzsNCiAgICBmb250LXNpemU6IDEuMmVtOw0KfQ0KDQouZXJGZWVkYmFja19wYWdlOCB7DQogICAgbWFyZ2luLXRvcDogNGVtOw0KfQ0KDQouZXJGZWVkYmFja19wYWdlMiBpbnB1dFt0eXBlPSdyYWRpbyddIHsNCiAgICBtYXJnaW4tbGVmdDogMzdlbTsNCn0NCg0KLmVyRmVlZGJhY2tfcGFnZTIgaW1nIHsNCiAgICB3aWR0aDogMS44ZW07DQogICAgaGVpZ2h0OiAxLjhlbTsNCiAgICBmbG9hdDogbGVmdDsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQp9DQoNCi5lckZlZWRiYWNrX3BhZ2UyIGRpdiB7DQogICAgaGVpZ2h0OiAyLjVlbTsNCn0NCg0KLmVyUmFkaW9MYWJlbCB7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIG1hcmdpbi1sZWZ0OiAyLjNlbTsNCn0NCg0KLnJhZGlvRGl2IHsNCiAgICBmbG9hdDogbGVmdDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgcGFkZGluZy1yaWdodDogMWVtOw0KICAgIHBhZGRpbmctYm90dG9tOiAxZW07DQp9DQoNCi5yYWRpb0RpdiBpbWcgew0KICAgIGRpc3BsYXk6IGlubGluZTsNCiAgICB3aWR0aDogNGVtOw0KICAgIGhlaWdodDogNGVtOw0KfQ0KDQoucmFkaW9EaXYgbGFiZWwgew0KICAgIGRpc3BsYXk6IGJsb2NrOw0KfQ0KDQouYWRkRGl2IHsNCiAgICBjbGVhcjogbGVmdDsNCn0NCg0KLmFkZERpdiBpbWcgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIHdpZHRoOiAzZW07DQogICAgaGVpZ2h0OiAzZW07DQp9DQoNCiNxNF9hZGQsICNxNV9hZGQgew0KICAgIG1pbi1oZWlnaHQ6IDhlbTsNCiAgICBtaW4td2lkdGg6IDM1ZW07DQogICAgaGVpZ2h0OiA4ZW07DQogICAgd2lkdGg6IDM1ZW07DQogICAgbWF4LWhlaWdodDogOGVtOw0KICAgIG1heC13aWR0aDogMzVlbTsNCn0NCg0KI3E2IHsNCiAgICBtaW4taGVpZ2h0OiAyMmVtOw0KICAgIG1pbi13aWR0aDogMzVlbTsNCiAgICBoZWlnaHQ6IDIyZW07DQogICAgd2lkdGg6IDM1ZW07DQogICAgbWF4LWhlaWdodDogMjJlbTsNCiAgICBtYXgtd2lkdGg6IDM1ZW07DQp9DQoNCi5lckZlZWRiYWNrX3BhZ2U3IGltZyB7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgd2lkdGg6IDNlbTsNCiAgICBoZWlnaHQ6IDNlbTsNCn0NCg0KLm1vZGFsX19jbG9zZSB7DQogICAgbWFyZ2luLWJvdHRvbTogMmVtOw0KICAgIHdpZHRoOiAxLjNlbTsNCiAgICBoZWlnaHQ6IDIuN2VtOw0KfQ0KDQoubW9kYWxfX2Nsb3NlOmZvY3VzIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2ICFpbXBvcnRhbnQ7DQogICAgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7DQp9DQoNCi5tb2RhbF9fZm9vdGVyIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgdG9wOiAzN2VtOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA0ZW0gYXV0byA4ZW0gM2VtOw0KICAgIHdpZHRoOiA0My41ZW07DQp9DQoNCi5tb2RhbF9fZm9vdGVyIGltZyB7DQogICAgd2lkdGg6IDRlbTsNCiAgICBoZWlnaHQ6IDRlbTsNCn0NCg0KI2VySDIwMjBOb3RlIHsNCiAgICBmb250LXNpemU6IDcwJTsNCiAgICBtYXJnaW4tbGVmdDogMS41ZW07DQogICAgbWFyZ2luLXRvcDogMC41ZW07DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGNvbG9yOiB3aGl0ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA4NTUwOw0KICAgIGhlaWdodDogNWVtOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQp9DQoNCiNlckJhY2tCdG4gew0KICAgIGZvbnQtc2l6ZTogaW5pdGlhbDsNCiAgICB3aWR0aDogM2VtOw0KICAgIG1hcmdpbi1sZWZ0OiA1ZW07DQogICAgbWFyZ2luLXRvcDogMC41ZW07DQogICAgcGFkZGluZzogMDsNCiAgICBib3JkZXI6IG5vbmU7DQp9DQoNCiNlckZvcndhcmRCdG4gew0KICAgIGZvbnQtc2l6ZTogaW5pdGlhbDsNCiAgICB3aWR0aDogM2VtOw0KICAgIG1hcmdpbi10b3A6IDAuNWVtOw0KICAgIHBhZGRpbmc6IDA7DQogICAgYm9yZGVyOiBub25lOw0KfQ0K"
    ],
    "loginType": "Anonym",
    "busyAnimation": {
        "source": {
            "id": "spinner",
            "name": "Spinner",
            "description": "A simple spinning animation.",
            "version": "1.0",
            "versionDescription": "Initial Version",
            "debugMode": false,
            "remoteAssetDirectory": "",
            "remoteBaseDirectory": "components/busy-animation/spinner/1.0/",
            "implementationClass": "SpinnerBusyAnimation",
            "contentScripts": [
                {
                    "id": "animation/spinner.js",
                    "source": "Y2xhc3MgU3Bpbm5lckJ1c3lBbmltYXRpb24gZXh0ZW5kcyBCdXN5QW5pbWF0aW9uew0KDQogICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbil7DQogICAgICAgIHN1cGVyKGNvbmZpZ3VyYXRpb24pOw0KDQogICAgICAgIHRoaXMubnVtYmVyT2ZCdXN5UmVxdWVzdHMgPSAwOw0KDQogICAgICAgICQoImJvZHkiKS5hcHBlbmQoJzxkaXYgaWQ9ImVyLWJ1c3ktYW5pbWF0aW9uIiBzdHlsZT0iZGlzcGxheTogbm9uZSIgY2xhc3M9Imxkcy1yaW5nIj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjwvZGl2PicpOw0KICAgICAgICAkKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24oZSl7DQogICAgICAgICAgICAkKCcjZXItYnVzeS1hbmltYXRpb24nKS5jc3Moew0KICAgICAgICAgICAgICAgIGxlZnQ6ICBlLnBhZ2VYLTMwLA0KICAgICAgICAgICAgICAgIHRvcDogICBlLnBhZ2VZKzIwDQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICBzdGFydEFuaW1hdGlvbih0ZXh0bm9kZXMpew0KICAgICAgICB0aGlzLm51bWJlck9mQnVzeVJlcXVlc3RzKys7DQogICAgICAgICQoJyNlci1idXN5LWFuaW1hdGlvbicpLnNob3coKTsNCg0KICAgIH0NCg0KICAgIHN0b3BBbmltYXRpb24oKXsNCiAgICAgICAgdGhpcy5udW1iZXJPZkJ1c3lSZXF1ZXN0cy0tOw0KICAgICAgICAkKCcjZXItYnVzeS1hbmltYXRpb24nKS5oaWRlKCk7DQoNCiAgICB9DQp9DQo="
                }
            ],
            "contentCSS": [
                {
                    "id": "animation/spinner.css",
                    "css": "Lmxkcy1yaW5nIHsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHdpZHRoOiA2NHB4Ow0KICAgIGhlaWdodDogNjRweDsNCiAgICB6LWluZGV4OiA5OTk5OTk5OTsNCn0NCi5sZHMtcmluZyBkaXYgew0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHdpZHRoOiA1MXB4Ow0KICAgIGhlaWdodDogNTFweDsNCiAgICBtYXJnaW46IDZweDsNCiAgICBib3JkZXI6IDZweCBzb2xpZCBibHVlOw0KICAgIGJvcmRlci1yYWRpdXM6IDUwJTsNCiAgICBhbmltYXRpb246IGxkcy1yaW5nIDEuMnMgY3ViaWMtYmV6aWVyKDAuNSwgMCwgMC41LCAxKSBpbmZpbml0ZTsNCiAgICBib3JkZXItY29sb3I6IGJsdWUgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7DQp9DQoubGRzLXJpbmcgZGl2Om50aC1jaGlsZCgxKSB7DQogICAgYW5pbWF0aW9uLWRlbGF5OiAtMC40NXM7DQp9DQoubGRzLXJpbmcgZGl2Om50aC1jaGlsZCgyKSB7DQogICAgYW5pbWF0aW9uLWRlbGF5OiAtMC4zczsNCn0NCi5sZHMtcmluZyBkaXY6bnRoLWNoaWxkKDMpIHsNCiAgICBhbmltYXRpb24tZGVsYXk6IC0wLjE1czsNCn0NCkBrZXlmcmFtZXMgbGRzLXJpbmcgew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOw0KICAgIH0NCn0="
                }
            ]
        },
        "configuration": {
            "backgroundColor": "#000000",
            "fontColor": "#FFFFFF"
        }
    },
    "isNewProfile": true,
    "classMapping": "aWYoY2xhc3NNYXBwaW5nKXtkZWxldGUgY2xhc3NNYXBwaW5nO30gdmFyIGNsYXNzTWFwcGluZyA9IHsnQ29udGludW91c0Nob2ljZUJ1dHRvbic6Q29udGludW91c0Nob2ljZUJ1dHRvbiwnQXVkaW9IaWdobGlnaHRlcic6QXVkaW9IaWdobGlnaHRlciwnVHdvU3RhdGVCdXR0b24nOlR3b1N0YXRlQnV0dG9uLCdBdXRvQnV0dG9uJzpBdXRvQnV0dG9uLCdDb250ZW50UmVwbGFjZW1lbnRTd2l0Y2hlcic6Q29udGVudFJlcGxhY2VtZW50U3dpdGNoZXIsJ0J1dHRvbic6QnV0dG9uLCdTaW5nbGVDaG9pY2VCdXR0b24nOlNpbmdsZUNob2ljZUJ1dHRvbiwnVGlwcHlUb29sdGlwJzpUaXBweVRvb2x0aXAsJ1RhYlNsaWRlT3V0VXNlckludGVyZmFjZSc6VGFiU2xpZGVPdXRVc2VySW50ZXJmYWNlLCdTcGlubmVyQnVzeUFuaW1hdGlvbic6U3Bpbm5lckJ1c3lBbmltYXRpb24sfTtpZihmdW5jdGlvbk1hcHBpbmcpe2RlbGV0ZSBmdW5jdGlvbk1hcHBpbmc7fSAgdmFyIGZ1bmN0aW9uTWFwcGluZyA9IHsnY29sb3JpemUnOmNvbG9yaXplLCdtYWduaWZ5Rm9udCc6bWFnbmlmeUZvbnQsJ3Nocmlua0ZvbnQnOnNocmlua0ZvbnQsJ2luY3JlYXNlTGluZUhlaWdodCc6aW5jcmVhc2VMaW5lSGVpZ2h0LCdkZWNyZWFzZUxpbmVIZWlnaHQnOmRlY3JlYXNlTGluZUhlaWdodCwncmVhZGFiaWxpdHknOnJlYWRhYmlsaXR5LCdlYXN5UmVhZGluZ1NjcmVlblJ1bGVyJzplYXN5UmVhZGluZ1NjcmVlblJ1bGVyLH07"
}


let webSocket = new WebSocket("wss://localhost:8080");
webSocket.onopen = function(ev){
    webSocket.send(JSON.stringify({
        type:"embeddedLogin"
    }));
};
webSocket.onmessage = function(ev){
    let receivedMessage = JSON.parse(message.data);
    contentScriptController.receiveMessageFromBackgroundScript(receivedMessage);

};
webSocket.onclose = function(ev){
    console.log(ev);
};
webSocket.onerror = function(ev){
    console.log(ev);
};

let contentScriptController = {
    debugModeListenerStarted:false,
    profileReceived: false,
    init: function () {


    },

    receiveMessageFromBackgroundScript : function (m) {
        requestManager.receiveRequestResult(m);
    },
    easyReadingUiUpdate:function (event){
        // easyReading.busyAnimation.startAnimation();
    },
    sendMessageToBackgroundScript: function(message) {
        if(message.type == "cloudRequest"){
            if(webSocket.readyState){
                webSocket.send(JSON.stringify(message));
            }

        }

    },





};

let util ={
    isDefined: function (obj) {
        if (obj !== undefined && obj !== null && obj !== "" && obj !== {} && obj !== []) {
            return true;
        }
        return true;
    },
    appendPathToUrl:function (url, str) {
        if (url.startsWith("wss://")) {
            url = url.substr(6, url.length - 1);
        }
        if (!str.startsWith('/')) {
            str = '/' + str;
        }
        return "https://" + url + '/' + str;
    }
};
easyReading.startup(uiCollection);
